{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/FriendRequests.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { User, Check, X, Clock } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface FriendRequestsProps {\n  open: boolean;\n  onClose: () => void;\n  username: string;\n}\n\ninterface RequestDetails {\n  _id: string;\n  sender: string;\n  receiver: string;\n  status: string;\n  createdAt: string;\n  senderDetails?: {\n    username: string;\n    fullName: string;\n    profileImage: string;\n  };\n  receiverDetails?: {\n    username: string;\n    fullName: string;\n    profileImage: string;\n  };\n}\n\nexport default function FriendRequests({ open, onClose, username }: FriendRequestsProps) {\n  const { toast } = useToast();\n\n  const { data: requests, refetch } = useQuery<{ received: RequestDetails[], sent: RequestDetails[] }>({\n    queryKey: ['/api/connections/friend-requests', username],\n    enabled: open && !!username,\n  });\n\n  const acceptMutation = useMutation({\n    mutationFn: async (connectionId: string) => {\n      return await apiRequest('POST', '/api/connections/accept-request', {\n        connectionId\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend request accepted\",\n      });\n      refetch();\n      queryClient.invalidateQueries({ queryKey: ['/api/users/contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/connections/friends'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to accept request\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const ignoreMutation = useMutation({\n    mutationFn: async (connectionId: string) => {\n      return await apiRequest('POST', '/api/connections/ignore-request', {\n        connectionId\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend request ignored\",\n      });\n      refetch();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to ignore request\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"bg-midnight-dark border-gray-800 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Friend Requests</DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"received\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"received\" data-testid=\"tab-received-requests\">\n              Received ({requests?.received.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"sent\" data-testid=\"tab-sent-requests\">\n              Sent ({requests?.sent.length || 0})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"received\">\n            <ScrollArea className=\"h-[400px] pr-4\">\n              {requests?.received.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <div className=\"h-16 w-16 rounded-full bg-midnight-light flex items-center justify-center\">\n                      <User className=\"h-8 w-8 text-gray-500\" />\n                    </div>\n                    <p className=\"text-gray-400 font-medium\">No pending friend requests</p>\n                    <p className=\"text-sm text-gray-500\">When someone sends you a request, it will appear here</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-3 py-2\">\n                  {requests?.received.map((request) => (\n                    <div\n                      key={request._id}\n                      className=\"flex items-center gap-4 p-4 rounded-lg bg-gradient-to-r from-midnight-light to-midnight-dark border border-gray-700 hover:border-swapgreen/50 transition-all\"\n                      data-testid={`request-received-${request.senderDetails?.username}`}\n                    >\n                      <Avatar className=\"h-14 w-14 border-2 border-swapgreen ring-2 ring-swapgreen/20\">\n                        <AvatarImage src={request.senderDetails?.profileImage} alt={request.senderDetails?.username} />\n                        <AvatarFallback className=\"bg-midnight-dark text-white text-lg\">\n                          <User className=\"h-7 w-7\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-semibold text-white text-base truncate\">\n                          @{request.senderDetails?.username || 'Unknown'}\n                        </p>\n                        <p className=\"text-sm text-gray-300 truncate\">\n                          {request.senderDetails?.fullName || 'No name'}\n                        </p>\n                      </div>\n\n                      <div className=\"flex gap-2 shrink-0\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => acceptMutation.mutate(request._id)}\n                          disabled={acceptMutation.isPending}\n                          className=\"h-10 px-5 bg-white hover:bg-gray-100 text-swapgreen border-2 border-swapgreen font-bold\"\n                          data-testid={`button-accept-${request.senderDetails?.username}`}\n                        >\n                          <Check className=\"h-4 w-4 mr-1 text-swapgreen\" />\n                          Accept\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => ignoreMutation.mutate(request._id)}\n                          disabled={ignoreMutation.isPending}\n                          className=\"h-10 px-5 bg-white hover:bg-gray-100 border-2 border-red-500 text-red-500 font-bold\"\n                          data-testid={`button-ignore-${request.senderDetails?.username}`}\n                        >\n                          <X className=\"h-4 w-4 mr-1 text-red-500\" />\n                          Ignore\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n\n          <TabsContent value=\"sent\">\n            <ScrollArea className=\"h-[400px] pr-4\">\n              {requests?.sent.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"flex flex-col items-center gap-3\">\n                    <div className=\"h-16 w-16 rounded-full bg-midnight-light flex items-center justify-center\">\n                      <Clock className=\"h-8 w-8 text-gray-500\" />\n                    </div>\n                    <p className=\"text-gray-400 font-medium\">No sent friend requests</p>\n                    <p className=\"text-sm text-gray-500\">Requests you send will appear here</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-3 py-2\">\n                  {requests?.sent.map((request) => (\n                    <div\n                      key={request._id}\n                      className=\"flex items-center gap-4 p-4 rounded-lg bg-gradient-to-r from-midnight-light to-midnight-dark border border-gray-700\"\n                      data-testid={`request-sent-${request.receiverDetails?.username}`}\n                    >\n                      <Avatar className=\"h-14 w-14 border-2 border-yellow-500 ring-2 ring-yellow-500/20\">\n                        <AvatarImage src={request.receiverDetails?.profileImage} alt={request.receiverDetails?.username} />\n                        <AvatarFallback className=\"bg-midnight-dark text-white text-lg\">\n                          <User className=\"h-7 w-7\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-semibold text-white text-base truncate\">\n                          @{request.receiverDetails?.username || 'Unknown'}\n                        </p>\n                        <p className=\"text-sm text-gray-300 truncate\">\n                          {request.receiverDetails?.fullName || 'No name'}\n                        </p>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 text-yellow-400 bg-yellow-500/10 px-4 py-2 rounded-lg border border-yellow-500/30 shrink-0\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span className=\"text-sm font-medium\">Pending</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9320},"client/src/components/examples/ChatWindow.tsx":{"content":"import { useState } from 'react';\nimport ChatWindow from '../ChatWindow';\n\nexport default function ChatWindowExample() {\n  const [messages, setMessages] = useState([\n    {\n      id: '1',\n      content: 'Hey! How are you?',\n      timestamp: '10:30 AM',\n      isSender: false,\n      blockNumber: 42,\n    },\n    {\n      id: '2',\n      content: \"I'm great! Just testing the blockchain messaging system.\",\n      timestamp: '10:31 AM',\n      isSender: true,\n      blockNumber: 43,\n      isDelivered: true,\n      isRead: true,\n    },\n  ]);\n\n  return (\n    <div className=\"h-screen bg-background\">\n      <ChatWindow\n        contactName=\"Alice Chen\"\n        messages={messages}\n        blockCount={43}\n        onSendMessage={(msg) => {\n          const newMessage = {\n            id: String(messages.length + 1),\n            content: msg,\n            timestamp: new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\n            isSender: true,\n            blockNumber: 43 + messages.length,\n            isDelivered: true,\n            isRead: false,\n          };\n          setMessages([...messages, newMessage]);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":1166},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/examples/LedgerViewer.tsx":{"content":"import LedgerViewer from '../LedgerViewer';\n\nconst sampleBlocks = [\n  {\n    index: 0,\n    hash: \"0000000000000000000000000000000000000000000000000000000000000000\",\n    prevHash: \"0\",\n    timestamp: \"2025-01-01 00:00:00\",\n    from: \"system\",\n    to: \"all\",\n    payload: \"Genesis Block\",\n  },\n  {\n    index: 1,\n    hash: \"a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2\",\n    prevHash: \"0000000000000000000000000000000000000000000000000000000000000000\",\n    timestamp: \"2025-01-01 10:30:15\",\n    from: \"alice\",\n    to: \"bob\",\n    payload: \"Hello Bob!\",\n  },\n  {\n    index: 2,\n    hash: \"f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2\",\n    prevHash: \"a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2\",\n    timestamp: \"2025-01-01 10:31:42\",\n    from: \"bob\",\n    to: \"alice\",\n    payload: \"Hi Alice!\",\n  },\n];\n\nexport default function LedgerViewerExample() {\n  return (\n    <div className=\"h-screen bg-background\">\n      <LedgerViewer blocks={sampleBlocks} isValid={true} />\n    </div>\n  );\n}\n","size_bytes":1040},"client/src/components/examples/LoginPage.tsx":{"content":"import LoginPage from '../LoginPage';\n\nexport default function LoginPageExample() {\n  return (\n    <LoginPage\n      onLogin={(username, password) => console.log('Login:', username, password)}\n      onRegister={(username, password) => console.log('Register:', username, password)}\n    />\n  );\n}\n","size_bytes":294},"server/models/User.js":{"content":"import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  email: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  phone: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  fullName: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  dateOfBirth: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  publicKey: {\n    type: String,\n    required: true,\n  },\n  privateKey: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  authorizedIPs: [{\n    ip: String,\n    authorizedAt: Date,\n    userAgent: String,\n  }],\n  description: {\n    type: String,\n    default: '',\n  },\n  profileImage: {\n    type: String,\n    default: '',\n  },\n  isVerified: {\n    type: Boolean,\n    default: false,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n});\n\nuserSchema.pre('save', async function(next) {\n  if (this.isModified('password')) {\n    this.password = await bcrypt.hash(this.password, 12);\n  }\n  next();\n});\n\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return await bcrypt.compare(candidatePassword, this.password);\n};\n\nexport default mongoose.model('User', userSchema);\n","size_bytes":1669},"server/migrations/decrypt-chat-fields.js":{"content":"import mongoose from 'mongoose';\nimport { decryptField } from '../lib/encryption.js';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nasync function decryptChatFields() {\n  try {\n    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/swapchat';\n    await mongoose.connect(MONGODB_URI);\n    console.log('✓ MongoDB connected');\n\n    const chatCollection = mongoose.connection.collection('chats');\n    const allChats = await chatCollection.find({}).toArray();\n    console.log(`Found ${allChats.length} chat messages to migrate`);\n\n    let updated = 0;\n    let skipped = 0;\n    let errors = 0;\n\n    for (const chat of allChats) {\n      try {\n        const needsUpdate = \n          (chat.senderId && chat.senderId.startsWith('U2FsdGVkX1')) ||\n          (chat.receiverId && chat.receiverId.startsWith('U2FsdGVkX1')) ||\n          (chat.encryptedMessage && chat.encryptedMessage.startsWith('U2FsdGVkX1'));\n        \n        if (!needsUpdate) {\n          skipped++;\n          continue;\n        }\n\n        const updates = {};\n        \n        if (chat.senderId && chat.senderId.startsWith('U2FsdGVkX1')) {\n          updates.senderId = decryptField(chat.senderId);\n          console.log(`  Decrypting senderId: ${chat.senderId.substring(0, 20)}... → ${updates.senderId}`);\n        }\n        \n        if (chat.receiverId && chat.receiverId.startsWith('U2FsdGVkX1')) {\n          updates.receiverId = decryptField(chat.receiverId);\n          console.log(`  Decrypting receiverId: ${chat.receiverId.substring(0, 20)}... → ${updates.receiverId}`);\n        }\n        \n        if (chat.encryptedMessage && chat.encryptedMessage.startsWith('U2FsdGVkX1')) {\n          updates.encryptedMessage = decryptField(chat.encryptedMessage);\n          console.log(`  Decrypting message: ${chat.encryptedMessage.substring(0, 20)}...`);\n        }\n\n        if (Object.keys(updates).length > 0) {\n          await chatCollection.updateOne(\n            { _id: chat._id },\n            { $set: updates }\n          );\n          updated++;\n          \n          if (updated % 10 === 0) {\n            console.log(`Progress: ${updated} messages updated, ${skipped} skipped, ${errors} errors`);\n          }\n        } else {\n          skipped++;\n        }\n      } catch (error) {\n        console.error(`Error updating chat ${chat._id}:`, error.message);\n        errors++;\n      }\n    }\n\n    console.log('\\n✓ Migration completed!');\n    console.log(`  Updated: ${updated} messages`);\n    console.log(`  Skipped: ${skipped} messages (already decrypted)`);\n    console.log(`  Errors: ${errors} messages`);\n    console.log(`  Total: ${allChats.length} messages`);\n\n    await mongoose.disconnect();\n    console.log('✓ MongoDB disconnected');\n    process.exit(0);\n  } catch (error) {\n    console.error('Migration failed:', error);\n    process.exit(1);\n  }\n}\n\ndecryptChatFields();\n","size_bytes":2861},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/LedgerViewer.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, Shield } from \"lucide-react\";\nimport BlockItem from \"./BlockItem\";\nimport BlockchainStatus from \"./BlockchainStatus\";\n\ninterface Block {\n  index: number;\n  hash: string;\n  prevHash: string;\n  timestamp: string;\n  from: string;\n  to: string;\n  payload?: string;\n}\n\ninterface LedgerViewerProps {\n  blocks: Block[];\n  isValid?: boolean;\n}\n\nexport default function LedgerViewer({ blocks, isValid = true }: LedgerViewerProps) {\n  const handleExport = () => {\n    console.log(\"Exporting blockchain...\");\n    const dataStr = JSON.stringify(blocks, null, 2);\n    const dataBlob = new Blob([dataStr], { type: \"application/json\" });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `blockchain-${Date.now()}.json`;\n    link.click();\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <Card className=\"border-0 shadow-none flex-1 flex flex-col\">\n        <CardHeader className=\"flex-shrink-0\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-primary\" />\n                Blockchain Ledger\n              </CardTitle>\n              <CardDescription className=\"mt-1\">\n                Immutable message history\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <BlockchainStatus\n                blockCount={blocks.length - 1}\n                isValid={isValid}\n              />\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleExport}\n                data-testid=\"button-export\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"flex-1 overflow-auto\">\n          <div className=\"space-y-0\">\n            {blocks.map((block) => (\n              <BlockItem key={block.index} {...block} />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2353},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    \n    try {\n      const errorData = JSON.parse(text);\n      if (errorData.error === 'IP_NOT_AUTHORIZED' || errorData.requiresReauth) {\n        window.dispatchEvent(new CustomEvent('ip-not-authorized', { \n          detail: { message: errorData.message || 'Your IP address has changed. Please log in again.' }\n        }));\n        throw new Error(errorData.message || 'Your IP address has changed. Please log in again.');\n      }\n    } catch (parseError) {\n      if (parseError instanceof Error && parseError.message.includes('IP address has changed')) {\n        throw parseError;\n      }\n    }\n    \n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      const queryParams = queryKey[1] as Record<string, any>;\n      \n      Object.entries(queryParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n      \n      const paramString = params.toString();\n      if (paramString) {\n        url = `${url}?${paramString}`;\n      }\n    } else if (queryKey.length > 1) {\n      url = queryKey.join(\"/\");\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2589},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/MessageContextMenu.tsx":{"content":"import React from 'react';\n\nexport default function MessageContextMenu({\n  x,\n  y,\n  onCopyEncrypted,\n  onCopyLink,\n  onForward,\n  onDelete,\n  onSelect,\n  onClose,\n}: {\n  x: number;\n  y: number;\n  onCopyEncrypted: () => void;\n  onCopyLink: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onSelect: () => void;\n  onClose: () => void;\n}) {\n  return (\n    <div\n      style={{ left: x, top: y }}\n      className=\"absolute z-50 bg-card border border-border rounded shadow-md p-2\"\n      onMouseLeave={onClose}\n    >\n      <button className=\"block px-3 py-1 text-sm w-full text-left hover:bg-gray-700\" onClick={() => { onCopyEncrypted(); onClose(); }}>Copy (encrypted)</button>\n      <button className=\"block px-3 py-1 text-sm w-full text-left hover:bg-gray-700\" onClick={() => { onCopyLink(); onClose(); }}>Copy message link</button>\n      <button className=\"block px-3 py-1 text-sm w-full text-left hover:bg-gray-700\" onClick={() => { onForward(); onClose(); }}>Forward</button>\n      <button className=\"block px-3 py-1 text-sm w-full text-left hover:bg-gray-700\" onClick={() => { onSelect(); onClose(); }}>Select</button>\n      <button className=\"block px-3 py-1 text-sm w-full text-left text-red-400 hover:bg-gray-700\" onClick={() => { onDelete(); onClose(); }}>Delete</button>\n    </div>\n  );\n}\n","size_bytes":1308},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"scripts/check_otps.js":{"content":"import dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport OTP from '../server/models/OTP.js';\nimport { decryptField } from '../server/lib/encryption.js';\n\ndotenv.config();\n\nasync function main() {\n  const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/swapchat';\n  await mongoose.connect(MONGODB_URI, { dbName: undefined });\n\n  const targetEmail = process.argv[2] || 'parikhgaming@gmail.com';\n  console.log(`Checking OTP records for: ${targetEmail}`);\n\n  // Fetch recent OTP documents (limit to 100 to be safe)\n  const docs = await OTP.find({}).sort({ createdAt: -1 }).limit(100).lean();\n\n  const matching = docs.filter(d => {\n    try {\n      const dec = decryptField(d.email);\n      return dec && dec.toString().trim().toLowerCase() === targetEmail.trim().toLowerCase();\n    } catch (e) {\n      return false;\n    }\n  });\n\n  console.log(`Total OTP docs scanned: ${docs.length}`);\n  console.log(`Matching OTP docs for ${targetEmail}: ${matching.length}`);\n\n  if (matching.length === 0) {\n    console.log('No matching OTP records found.');\n  } else {\n    for (const d of matching) {\n      console.log('---');\n      console.log(`id: ${d._id}`);\n      console.log(`verified: ${d.verified}`);\n      console.log(`createdAt: ${d.createdAt}`);\n      console.log(`expiresAt: ${d.expiresAt}`);\n      // Intentionally do NOT print the otp value\n    }\n  }\n\n  await mongoose.disconnect();\n}\n\nmain().catch(err => {\n  console.error('Error checking OTPs:', err);\n  process.exit(1);\n});\n","size_bytes":1502},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { GoogleOAuthProvider } from '@react-oauth/google';\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || '';\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>\n    <App />\n  </GoogleOAuthProvider>\n);\n","size_bytes":370},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/middleware/auth.js":{"content":"import jwt from 'jsonwebtoken';\nimport requestIp from 'request-ip';\nimport crypto from 'crypto';\nimport User from '../models/User.js';\nimport IPAuthorization from '../models/IPAuthorization.js';\nimport { sendIPAuthorizationEmail } from '../lib/emailService.js';\n\nfunction normalizeIP(ip) {\n  if (!ip) return ip;\n  if (ip.includes(',')) ip = ip.split(',')[0].trim();\n  if (ip.includes(':') && ip.split(':').length > 2 && ip.includes('.')) {\n    const last = ip.split(':').pop();\n    if (last && last.includes('.')) ip = last;\n  } else if (ip.includes(':') && !ip.includes('.')) {\n    ip = ip.split('%')[0];\n  } else if (ip.includes(':') && ip.includes('.')) {\n    ip = ip.split(':')[0];\n  }\n  return ip.trim();\n}\n\nexport async function authenticateToken(req, res, next) {\n  const token = req.cookies?.token || req.headers.authorization?.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access denied. No token provided.' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    \n    if (!user) {\n      return res.status(401).json({ error: 'Invalid token.' });\n    }\n\n    console.log('=== MIDDLEWARE: AUTHENTICATING USER ===');\n    console.log('User from token:', decoded.username);\n    console.log('User ID from token:', decoded.userId);\n    console.log('User ID from DB:', user._id.toString());\n    console.log('Username from DB:', user.username);\n    console.log('This user has', user.authorizedIPs?.length || 0, 'authorized IPs');\n\n    const rawClientIP = requestIp.getClientIp(req) || \n      req.headers['x-forwarded-for']?.split(',')[0]?.trim() || \n      req.connection.remoteAddress || \n      req.socket.remoteAddress || \n      req.ip;\n    const clientIP = normalizeIP(rawClientIP);\n\n    const isAuthorizedIP = user.authorizedIPs && user.authorizedIPs.some(auth => {\n      const normalizedAuthIP = normalizeIP(auth.ip);\n      const matches = normalizedAuthIP === clientIP;\n      console.log(`Middleware IP check: ${normalizedAuthIP} === ${clientIP} ? ${matches}`);\n      return matches;\n    });\n\n    if (!isAuthorizedIP) {\n      console.log('=== MIDDLEWARE: IP AUTHORIZATION CHECK FAILED ===');\n      console.log('User:', user.username);\n      console.log('Raw IP:', rawClientIP);\n      console.log('Normalized Current IP:', clientIP);\n      console.log('User Agent:', req.headers['user-agent']);\n      console.log('Authorized IPs:', JSON.stringify(user.authorizedIPs));\n      console.log('Request Path:', req.path);\n      console.log('Request Method:', req.method);\n\n      try {\n        await IPAuthorization.deleteMany({ username: user.username, ip: clientIP, authorized: false });\n\n        const authToken = crypto.randomBytes(32).toString('hex');\n        const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\n\n        const ipAuth = new IPAuthorization({\n          username: user.username,\n          ip: clientIP,\n          token: authToken,\n          userAgent: req.headers['user-agent'],\n          expiresAt,\n        });\n\n        ipAuth.ip = normalizeIP(ipAuth.ip);\n        await ipAuth.save();\n\n        const authUrl = `${req.protocol}://${req.get('host')}/api/auth/authorize-ip?token=${authToken}`;\n\n        try {\n          await sendIPAuthorizationEmail(user.email, user.username, ipAuth.ip, authUrl);\n          console.log('✓ IP authorization email sent to:', user.email);\n        } catch (emailErr) {\n          console.error('Failed to send IP authorization email:', emailErr);\n        }\n        \n        console.log('✓ IP authorization request created for IP:', clientIP);\n      } catch (err) {\n        console.error('Error creating/sending IP authorization:', err);\n      }\n\n      console.log('❌ Access denied - IP not authorized');\n      console.log('=== END MIDDLEWARE IP CHECK ===');\n\n      return res.status(403).json({ \n        error: 'IP_NOT_AUTHORIZED',\n        message: 'Your IP address has changed or is not authorized. An authorization email has been sent to your registered email address. Please verify the new IP address to continue.',\n        requiresReauth: true,\n        ip: clientIP\n      });\n    }\n\n    console.log(`✓ Middleware: IP ${clientIP} is authorized for user ${user.username}`);\n\n    req.user = {\n      id: user._id,\n      username: user.username,\n      publicKey: user.publicKey,\n    };\n    next();\n  } catch (error) {\n    return res.status(403).json({ error: 'Invalid or expired token.' });\n  }\n}\n\nexport async function authenticateSocket(socket, next) {\n  const token = socket.handshake.auth.token;\n\n  if (!token) {\n    return next(new Error('Authentication error'));\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      console.error('Socket auth: User not found');\n      return next(new Error('Authentication error'));\n    }\n\n    socket.userId = decoded.userId;\n    socket.username = decoded.username;\n\n    const rawClientIP = socket.handshake.headers['x-forwarded-for']?.split(',')[0]?.trim() || socket.handshake.address;\n    const clientIP = normalizeIP(rawClientIP);\n\n    const isAuthorizedIP = user.authorizedIPs && user.authorizedIPs.some(auth => {\n      const normalizedAuthIP = normalizeIP(auth.ip);\n      return normalizedAuthIP === clientIP;\n    });\n\n    if (!isAuthorizedIP) {\n      console.log('=== SOCKET: IP AUTHORIZATION CHECK FAILED ===');\n      console.log('User:', user.username);\n      console.log('Raw IP:', rawClientIP);\n      console.log('Normalized IP:', clientIP);\n      console.log('Authorized IPs:', JSON.stringify(user.authorizedIPs));\n\n      try {\n        await IPAuthorization.deleteMany({ username: user.username, ip: clientIP, authorized: false });\n        \n        const authToken = crypto.randomBytes(32).toString('hex');\n        const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\n        \n        const ipAuth = new IPAuthorization({\n          username: user.username,\n          ip: clientIP,\n          token: authToken,\n          userAgent: socket.handshake.headers['user-agent'],\n          expiresAt,\n        });\n        \n        ipAuth.ip = normalizeIP(ipAuth.ip);\n        await ipAuth.save();\n        \n        const protocol = socket.handshake.headers['x-forwarded-proto'] || 'https';\n        const host = socket.handshake.headers.host;\n        const authUrl = `${protocol}://${host}/api/auth/authorize-ip?token=${authToken}`;\n        \n        try {\n          await sendIPAuthorizationEmail(user.email, user.username, ipAuth.ip, authUrl);\n          console.log('✓ Socket: IP authorization email sent to:', user.email);\n        } catch (emailErr) {\n          console.error('Socket: Failed to send IP authorization email:', emailErr);\n        }\n      } catch (e) {\n        console.error('Socket IP auth creation error:', e);\n      }\n      \n      console.log('❌ Socket connection denied - IP not authorized');\n      console.log('=== END SOCKET IP CHECK ===');\n      return next(new Error('IP_NOT_AUTHORIZED'));\n    }\n\n    console.log(`✓ Socket: IP ${clientIP} is authorized for user ${user.username}`);\n    next();\n  } catch (error) {\n    console.error('Socket auth error:', error);\n    next(new Error('Authentication error'));\n  }\n}\n","size_bytes":7247},"server/models/Story.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst storySchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  username: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  content: {\n    type: String,\n    required: true,\n  },\n  mediaType: {\n    type: String,\n    enum: ['text', 'image'],\n    default: 'text',\n  },\n  backgroundColor: {\n    type: String,\n    default: '#1a1a1a',\n  },\n  image: {\n    type: String,\n    default: '',\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n  expiresAt: {\n    type: Date,\n    required: true,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n});\n\nstorySchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });\nstorySchema.index({ userId: 1, createdAt: -1 });\n\nexport default mongoose.model('Story', storySchema);\n","size_bytes":957},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/MessageBubble.tsx":{"content":"import { Lock, Check, CheckCheck, Image as ImageIcon, Video, Mic, File, MapPin, User, BarChart3 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MessageBubbleProps {\n  content: string;\n  timestamp: string;\n  isSender: boolean;\n  id: string;\n  blockNumber?: number;\n  isEncrypted?: boolean;\n  status?: 'sent' | 'delivered' | 'seen';\n  messageType?: 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact' | 'poll';\n  mediaUrl?: string;\n  metadata?: any;\n  onContextMenu?: (e: React.MouseEvent, id: string) => void;\n  isSelected?: boolean;\n  onToggleSelect?: (id: string) => void;\n}\nexport default function MessageBubble({\n  id,\n  content,\n  timestamp,\n  isSender,\n  blockNumber,\n  isEncrypted = true,\n  status = 'sent',\n  messageType = 'text',\n  mediaUrl,\n  metadata,\n  onContextMenu,\n  isSelected,\n  onToggleSelect,\n}: MessageBubbleProps) {\n  const renderMediaContent = () => {\n    if (!mediaUrl && !metadata) return null;\n    \n    switch (messageType) {\n      case 'image':\n        return (\n          <img \n            src={mediaUrl} \n            alt=\"Shared image\" \n            className=\"max-w-xs rounded-lg mb-2\"\n            data-testid=\"media-image\"\n          />\n        );\n      case 'video':\n        return (\n          <video \n            src={mediaUrl} \n            controls \n            className=\"max-w-xs rounded-lg mb-2\"\n            data-testid=\"media-video\"\n          />\n        );\n      case 'audio':\n        return (\n          <audio \n            src={mediaUrl} \n            controls \n            className=\"mb-2 w-full\"\n            data-testid=\"media-audio\"\n          />\n        );\n      case 'document':\n        return (\n          <a \n            href={mediaUrl} \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"flex items-center gap-2 text-sm text-primary hover:underline mb-2 bg-gray-700/50 px-3 py-2 rounded-lg\"\n            data-testid=\"media-document\"\n          >\n            <File className=\"h-5 w-5\" />\n            <span>Document</span>\n          </a>\n        );\n      case 'location':\n        if (metadata) {\n          const { latitude, longitude } = metadata;\n          return (\n            <a \n              href={`https://www.google.com/maps?q=${latitude},${longitude}`}\n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"flex items-center gap-2 text-sm text-primary hover:underline mb-2 bg-gray-700/50 px-3 py-2 rounded-lg\"\n              data-testid=\"media-location\"\n            >\n              <MapPin className=\"h-5 w-5 text-green-500\" />\n              <span>View Location</span>\n            </a>\n          );\n        }\n        return null;\n      case 'contact':\n        if (metadata) {\n          const { name, phone, email } = metadata;\n          return (\n            <div className=\"bg-gray-700/50 px-3 py-2 rounded-lg mb-2\" data-testid=\"media-contact\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <User className=\"h-4 w-4 text-cyan-500\" />\n                <span className=\"font-semibold\">{name}</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                <div>{phone}</div>\n                {email && <div>{email}</div>}\n              </div>\n            </div>\n          );\n        }\n        return null;\n      case 'poll':\n        if (metadata) {\n          const { question, options, votes = {} } = metadata;\n          return (\n            <div className=\"bg-gray-700/50 px-3 py-2 rounded-lg mb-2 min-w-[200px]\" data-testid=\"media-poll\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <BarChart3 className=\"h-4 w-4 text-yellow-500\" />\n                <span className=\"font-semibold text-sm\">{question}</span>\n              </div>\n              <div className=\"space-y-1\">\n                {options.map((option: string, idx: number) => (\n                  <div key={idx} className=\"text-xs bg-gray-800/50 px-2 py-1 rounded\">\n                    {option} {votes[idx] ? `(${votes[idx]})` : ''}\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n        }\n        return null;\n      default:\n        return null;\n    }\n  };\n  \n  const getMediaIcon = () => {\n    switch (messageType) {\n      case 'image': return <ImageIcon className=\"h-3 w-3 text-muted-foreground\" />;\n      case 'video': return <Video className=\"h-3 w-3 text-muted-foreground\" />;\n      case 'audio': return <Mic className=\"h-3 w-3 text-muted-foreground\" />;\n      case 'document': return <File className=\"h-3 w-3 text-muted-foreground\" />;\n      case 'location': return <MapPin className=\"h-3 w-3 text-green-500\" />;\n      case 'contact': return <User className=\"h-3 w-3 text-cyan-500\" />;\n      case 'poll': return <BarChart3 className=\"h-3 w-3 text-yellow-500\" />;\n      default: return null;\n    }\n  };\n  return (\n    <div\n      className={cn(\n        \"flex w-full mb-3\",\n        isSender ? \"justify-end\" : \"justify-start\"\n      )}\n      data-testid={`message-${isSender ? 'sent' : 'received'}`}\n      onContextMenu={(e) => onContextMenu && onContextMenu(e, String(id))}\n    >\n      <div\n        className={cn(\n          \"max-w-md rounded-2xl p-4 backdrop-blur-xl relative\",\n          isSender\n            ? \"bg-primary/10 border border-primary/20\"\n            : \"bg-card border border-card-border\",\n          isSelected ? 'ring-2 ring-primary' : ''\n        )}\n      >\n        {/* Selection indicator: show a round checkbox to the right of the bubble when selected (Telegram-like) */}\n        <div\n          style={{ right: -18 }}\n          className={`absolute top-1/2 -translate-y-1/2 rounded-full w-8 h-8 flex items-center justify-center cursor-pointer transition-colors ${isSelected ? 'bg-primary text-white' : 'bg-transparent border border-gray-600'}`}\n          onClick={() => onToggleSelect && onToggleSelect(String(id))}\n          role=\"button\"\n          aria-pressed={!!isSelected}\n        >\n          {isSelected ? (\n            <span className=\"text-xs font-semibold\">✓</span>\n          ) : (\n            <span className=\"w-3 h-3 rounded-full border border-gray-400 block\" />\n          )}\n        </div>\n        {renderMediaContent()}\n        <div className=\"flex items-start gap-2 mb-1\">\n          <div className=\"flex items-center gap-1.5\">\n            {isEncrypted && (\n              <Lock className=\"h-3 w-3 text-muted-foreground mt-0.5 flex-shrink-0\" data-testid=\"icon-encrypted\" />\n            )}\n            {messageType !== 'text' && getMediaIcon()}\n          </div>\n          <p className=\"text-sm leading-relaxed break-words\">{content}</p>\n        </div>\n        <div className=\"flex items-center justify-between gap-3 mt-2\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-xs text-muted-foreground\">{timestamp}</span>\n            {blockNumber !== undefined && (\n              <button\n                onClick={() => console.log(`View block #${blockNumber}`)}\n                className=\"text-xs font-mono text-accent hover:text-accent-foreground transition-colors\"\n                data-testid={`link-block-${blockNumber}`}\n              >\n                #{blockNumber}\n              </button>\n            )}\n          </div>\n          {isSender && (\n            <div className=\"flex-shrink-0\">\n              {status === 'seen' ? (\n                <CheckCheck className=\"h-3.5 w-3.5 text-blue-500\" data-testid=\"icon-seen\" />\n              ) : status === 'delivered' ? (\n                <CheckCheck className=\"h-3.5 w-3.5 text-muted-foreground\" data-testid=\"icon-delivered\" />\n              ) : (\n                <Check className=\"h-3.5 w-3.5 text-muted-foreground\" data-testid=\"icon-sent\" />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7828},"client/src/pages/login.tsx":{"content":"import { Link } from \"wouter\";\nimport AuthLayout from \"@/components/AuthLayout\";\nimport LoginForm from \"@/components/LoginForm\";\n\ninterface LoginProps {\n  onAuthenticated: (token: string, user: any) => void;\n}\n\nexport default function Login({ onAuthenticated }: LoginProps) {\n  return (\n    <AuthLayout>\n      <LoginForm onSuccess={onAuthenticated} />\n      \n      <div className=\"mt-4 text-center text-sm\">\n        <span className=\"text-muted-foreground\">Don't have an account? </span>\n        <Link href=\"/register\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-register\">\n          Sign up\n        </Link>\n      </div>\n    </AuthLayout>\n  );\n}\n","size_bytes":672},"server/routes/debug.js":{"content":"import express from 'express';\nimport requestIp from 'request-ip';\nimport { authenticateToken } from '../middleware/auth.js';\nimport User from '../models/User.js';\n\nfunction normalizeIP(ip) {\n  if (!ip) return ip;\n  if (ip.includes(',')) ip = ip.split(',')[0].trim();\n  if (ip.includes(':') && ip.split(':').length > 2 && ip.includes('.')) {\n    const last = ip.split(':').pop();\n    if (last && last.includes('.')) ip = last;\n  } else if (ip.includes(':') && !ip.includes('.')) {\n    ip = ip.split('%')[0];\n  } else if (ip.includes(':') && ip.includes('.')) {\n    ip = ip.split(':')[0];\n  }\n  return ip.trim();\n}\n\nconst router = express.Router();\n\n// Protected debug route: returns raw/normalized IP and user's authorized IPs\nrouter.get('/ipinfo', authenticateToken, async (req, res) => {\n  try {\n    const rawClientIP = requestIp.getClientIp(req) || req.headers['x-forwarded-for']?.split(',')[0]?.trim() || req.connection.remoteAddress || req.socket.remoteAddress || req.ip;\n    const clientIP = normalizeIP(rawClientIP);\n\n    const user = await User.findById(req.user.id);\n\n    res.json({\n      rawClientIP,\n      clientIP,\n      authorizedIPs: user.authorizedIPs || [],\n    });\n  } catch (err) {\n    console.error('Debug IP info error:', err);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nexport default router;\n","size_bytes":1333},"client/src/components/examples/AppSidebar.tsx":{"content":"import { useState } from 'react';\nimport AppSidebar from '../AppSidebar';\n\nconst sampleContacts = [\n  {\n    id: '1',\n    name: 'Alice Chen',\n    lastMessage: 'The blockchain is synced!',\n    timestamp: '2m',\n    unreadCount: 3,\n    isOnline: true,\n  },\n  {\n    id: '2',\n    name: 'Bob Smith',\n    lastMessage: 'Thanks for the message',\n    timestamp: '1h',\n    isOnline: false,\n  },\n  {\n    id: '3',\n    name: 'Carol Johnson',\n    lastMessage: 'See you tomorrow',\n    timestamp: '3h',\n    isOnline: true,\n  },\n];\n\nexport default function AppSidebarExample() {\n  const [activeId, setActiveId] = useState('1');\n\n  return (\n    <div className=\"h-screen\">\n      <AppSidebar\n        contacts={sampleContacts}\n        activeContactId={activeId}\n        onSelectContact={(id) => setActiveId(id)}\n        onViewLedger={() => console.log('View ledger')}\n      />\n    </div>\n  );\n}\n","size_bytes":872},"server/models/Chat.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nfunction encryptJSON(value) {\n  if (!value) return value;\n  if (typeof value === 'object') {\n    return encryptField(JSON.stringify(value));\n  }\n  return encryptField(value);\n}\n\nfunction decryptJSON(value) {\n  if (!value) return value;\n  try {\n    const decrypted = decryptField(value);\n    try {\n      return JSON.parse(decrypted);\n    } catch {\n      return decrypted;\n    }\n  } catch (error) {\n    console.error('Decryption error:', error);\n    return value;\n  }\n}\n\nconst chatSchema = new mongoose.Schema({\n  senderId: {\n    type: String,\n    required: true,\n    get: decryptField,\n    set: encryptField,\n  },\n  receiverId: {\n    type: String,\n    required: true,\n    get: decryptField,\n    set: encryptField,\n  },\n  encryptedMessage: {\n    type: String,\n    required: true,\n  },\n  chatRoomId: {\n    type: String,\n    required: true,\n    index: true,\n  },\n  messageType: {\n    type: String,\n    enum: ['text', 'image', 'video', 'audio', 'document', 'location', 'contact', 'poll'],\n    default: 'text',\n  },\n  mediaUrl: {\n    type: String,\n    default: null,\n    get: decryptField,\n    set: encryptField,\n  },\n  metadata: {\n    type: mongoose.Schema.Types.Mixed,\n    default: null,\n    get: decryptJSON,\n    set: encryptJSON,\n  },\n  status: {\n    type: String,\n    enum: ['sent', 'delivered', 'seen'],\n    default: 'sent',\n  },\n  blockIndex: {\n    type: Number,\n    required: false,\n  },\n  hash: {\n    type: String,\n    required: false,\n  },\n  previousHash: {\n    type: String,\n    required: false,\n  },\n  chatPublicKey: {\n    type: String,\n    required: false,\n    get: decryptField,\n    set: encryptField,\n  },\n  chatPrivateKey: {\n    type: String,\n    required: false,\n    get: decryptField,\n    set: encryptField,\n  },\n  // list of usernames for which this message has been deleted (per-user delete)\n  deletedFor: {\n    type: [String],\n    default: [],\n    get: (arr) => {\n      if (!arr) return [];\n      try {\n        return arr.map(a => decryptField(a));\n      } catch (err) {\n        console.warn('Failed to decrypt deletedFor array', err);\n        return arr;\n      }\n    },\n    set: (arr) => {\n      if (!arr) return [];\n      // Expect callers to push encrypted values where appropriate, but\n      // allow setting with plaintext array here by encrypting each value.\n      try {\n        return arr.map(a => typeof a === 'string' ? encryptField(a) : a);\n      } catch (err) {\n        console.warn('Failed to encrypt deletedFor array', err);\n        return arr;\n      }\n    }\n  },\n  timestamp: {\n    type: Date,\n    default: Date.now,\n    index: true,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n  timestamps: true,\n});\n\nchatSchema.index({ chatRoomId: 1, timestamp: -1 });\nchatSchema.index({ senderId: 1, receiverId: 1 });\nchatSchema.index({ hash: 1 });\n\nconst Chat = mongoose.model('Chat', chatSchema);\n\nexport default Chat;\n","size_bytes":2964},"client/src/components/examples/ContactItem.tsx":{"content":"import { useState } from 'react';\nimport ContactItem from '../ContactItem';\n\nexport default function ContactItemExample() {\n  const [active, setActive] = useState('alice');\n\n  return (\n    <div className=\"p-4 bg-sidebar space-y-2 max-w-sm\">\n      <ContactItem\n        name=\"Alice Chen\"\n        lastMessage=\"The blockchain is synced!\"\n        timestamp=\"2m\"\n        unreadCount={3}\n        isOnline={true}\n        isActive={active === 'alice'}\n        onClick={() => setActive('alice')}\n      />\n      <ContactItem\n        name=\"Bob Smith\"\n        lastMessage=\"Thanks for the encrypted message\"\n        timestamp=\"1h\"\n        isOnline={false}\n        isActive={active === 'bob'}\n        onClick={() => setActive('bob')}\n      />\n      <ContactItem\n        name=\"Carol Johnson\"\n        isOnline={true}\n        isActive={active === 'carol'}\n        onClick={() => setActive('carol')}\n      />\n    </div>\n  );\n}\n","size_bytes":908},"client/src/components/AuthLayout.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport heroImage from '@assets/generated_images/Blockchain_network_hero_image_243b3dd4.png';\nimport lockblipLogo from \"@assets/Untitled design_1761899121550.png\";\n\ninterface AuthLayoutProps {\n  children: React.ReactNode;\n  title?: string;\n  description?: string;\n}\n\nexport default function AuthLayout({ \n  children, \n  title = \"LockBlip\",\n  description = \"Blockchain-powered secure messaging with end-to-end encryption\"\n}: AuthLayoutProps) {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 relative overflow-hidden\">\n      <div\n        className=\"absolute inset-0 z-0\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(11, 16, 32, 0.85), rgba(27, 31, 58, 0.85)), url(${heroImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      \n      <div className=\"absolute top-4 right-4 z-20\">\n        <ThemeToggle />\n      </div>\n      \n      <Card className=\"w-full max-w-md relative z-10 border-primary/20 bg-card/80 backdrop-blur-xl\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"flex justify-center mb-2\">\n            <img src={lockblipLogo} alt=\"LockBlip\" className=\"h-16 w-16 object-contain rounded-2xl shadow-lg\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold\">{title}</CardTitle>\n          <CardDescription>{description}</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {children}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1670},"server/lib/blockchain.js":{"content":"import crypto from 'crypto';\nimport Block from '../models/Blockchain.js';\n\nexport function calculateHash(index, timestamp, from, to, payload, prevHash) {\n  const data = `${index}${timestamp}${from}${to}${payload}${prevHash}`;\n  return crypto.createHash('sha256').update(data).digest('hex');\n}\n\nexport async function initializeBlockchain() {\n  const existingBlocks = await Block.countDocuments();\n  \n  if (existingBlocks === 0) {\n    const timestamp = new Date().toISOString();\n    const hash = calculateHash(0, timestamp, 'system', 'all', 'Genesis Block', '0');\n    \n    const genesisBlock = new Block({\n      index: 0,\n      timestamp,\n      from: 'system',\n      to: 'all',\n      payload: 'Genesis Block',\n      prevHash: '0',\n      hash,\n    });\n    \n    await genesisBlock.save();\n    console.log('Genesis block created');\n  }\n}\n\nexport async function getLatestBlock() {\n  const block = await Block.findOne().sort({ index: -1 });\n  return block;\n}\n\nexport async function addMessageBlock(from, to, payload) {\n  const prevBlock = await getLatestBlock();\n  const index = prevBlock.index + 1;\n  const timestamp = new Date().toISOString();\n  const prevHash = prevBlock.hash;\n  const hash = calculateHash(index, timestamp, from, to, payload, prevHash);\n\n  const block = new Block({\n    index,\n    timestamp,\n    from,\n    to,\n    payload,\n    prevHash,\n    hash,\n  });\n\n  await block.save();\n  return block;\n}\n\nexport async function getBlockchain() {\n  return await Block.find().sort({ index: 1 });\n}\n\nexport async function getUserBlockchain(username) {\n  const blocks = await Block.find({\n    $or: [\n      { from: username },\n      { to: username },\n      { from: 'system' }\n    ]\n  }).sort({ index: 1 });\n  \n  return blocks;\n}\n\nexport async function validateChain() {\n  const chain = await getBlockchain();\n  \n  for (let i = 1; i < chain.length; i++) {\n    const block = chain[i];\n    const prev = chain[i - 1];\n    \n    if (block.prevHash !== prev.hash) {\n      return { valid: false, error: `Block ${i} prevHash mismatch` };\n    }\n    \n    const calculatedHash = calculateHash(\n      block.index,\n      block.timestamp,\n      block.from,\n      block.to,\n      block.payload,\n      block.prevHash\n    );\n    \n    if (block.hash !== calculatedHash) {\n      return { valid: false, error: `Block ${i} hash invalid` };\n    }\n  }\n  \n  return { valid: true };\n}\n","size_bytes":2357},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/models/OTP.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst otpSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  otp: {\n    type: String,\n    required: true,\n  },\n  expiresAt: {\n    type: Date,\n    required: true,\n  },\n  verified: {\n    type: Boolean,\n    default: false,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n    expires: 600,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n});\n\nexport default mongoose.model('OTP', otpSchema);\n","size_bytes":603},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/models/Connection.js":{"content":"import mongoose from 'mongoose';\n\nconst connectionSchema = new mongoose.Schema({\n  sender: {\n    type: String,\n    required: true,\n  },\n  receiver: {\n    type: String,\n    required: true,\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'accepted', 'ignored', 'blocked'],\n    default: 'pending',\n  },\n  isFriend: {\n    type: Boolean,\n    default: false,\n  },\n  messagePermission: {\n    type: Boolean,\n    default: false,\n  },\n  notes: {\n    type: String,\n    default: '',\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n  updatedAt: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\nconnectionSchema.index({ sender: 1, receiver: 1 }, { unique: true });\n\nconnectionSchema.pre('save', function(next) {\n  this.updatedAt = new Date();\n  next();\n});\n\nexport default mongoose.model('Connection', connectionSchema);\n","size_bytes":834},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/routes/connections.js":{"content":"import express from 'express';\nimport Connection from '../models/Connection.js';\nimport User from '../models/User.js';\nimport { authenticateToken } from '../middleware/auth.js';\n\nconst router = express.Router();\n\n// Helper function to find user by decrypted username\nasync function findUserByUsername(username) {\n  if (!username) return null;\n  \n  const trimmedUsername = username.trim();\n  \n  // Get all users and filter by decrypted username\n  // Note: This is not scalable for large datasets\n  const allUsers = await User.find({}).select('username fullName profileImage publicKey');\n  \n  // Find the user with matching decrypted username\n  const matchedUser = allUsers.find(user => \n    user.username && user.username.toLowerCase() === trimmedUsername.toLowerCase()\n  );\n  \n  return matchedUser || null;\n}\n\nrouter.post('/send-request', authenticateToken, async (req, res) => {\n  try {\n    const senderUser = await User.findById(req.user.id);\n    if (!senderUser) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const { receiver } = req.body;\n    const sender = senderUser.username;\n\n    if (!sender || !receiver) {\n      return res.status(400).json({ message: 'Sender and receiver are required' });\n    }\n\n    if (sender === receiver) {\n      return res.status(400).json({ message: 'Cannot send request to yourself' });\n    }\n\n    const existingConnection = await Connection.findOne({\n      $or: [\n        { sender, receiver },\n        { sender: receiver, receiver: sender }\n      ]\n    });\n\n    if (existingConnection) {\n      return res.status(400).json({ \n        message: 'Connection already exists',\n        status: existingConnection.status\n      });\n    }\n\n    const connection = new Connection({\n      sender,\n      receiver,\n      status: 'pending',\n      isFriend: false,\n      messagePermission: false,\n    });\n\n    await connection.save();\n    res.status(201).json({ message: 'Friend request sent', connection });\n  } catch (error) {\n    console.error('Send request error:', error);\n    res.status(500).json({ message: 'Failed to send friend request' });\n  }\n});\n\nrouter.post('/accept-request', authenticateToken, async (req, res) => {\n  try {\n    const { connectionId } = req.body;\n\n    if (!connectionId) {\n      return res.status(400).json({ message: 'Connection ID is required' });\n    }\n\n    const currentUser = await User.findById(req.user.id);\n    if (!currentUser) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const connection = await Connection.findById(connectionId);\n\n    if (!connection) {\n      return res.status(404).json({ message: 'Connection not found' });\n    }\n\n    if (connection.receiver !== currentUser.username) {\n      return res.status(403).json({ message: 'Only the receiver can accept this request' });\n    }\n\n    if (connection.status !== 'pending') {\n      return res.status(400).json({ message: 'Can only accept pending requests' });\n    }\n\n    connection.status = 'accepted';\n    connection.isFriend = true;\n    connection.messagePermission = true;\n    connection.updatedAt = new Date();\n\n    await connection.save();\n    res.json({ message: 'Friend request accepted', connection });\n  } catch (error) {\n    console.error('Accept request error:', error);\n    res.status(500).json({ message: 'Failed to accept friend request' });\n  }\n});\n\nrouter.post('/ignore-request', authenticateToken, async (req, res) => {\n  try {\n    const { connectionId } = req.body;\n\n    if (!connectionId) {\n      return res.status(400).json({ message: 'Connection ID is required' });\n    }\n\n    const currentUser = await User.findById(req.user.id);\n    if (!currentUser) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const connection = await Connection.findById(connectionId);\n\n    if (!connection) {\n      return res.status(404).json({ message: 'Connection not found' });\n    }\n\n    if (connection.receiver !== currentUser.username) {\n      return res.status(403).json({ message: 'Only the receiver can ignore this request' });\n    }\n\n    if (connection.status !== 'pending') {\n      return res.status(400).json({ message: 'Can only ignore pending requests' });\n    }\n\n    connection.status = 'ignored';\n    connection.isFriend = false;\n    connection.messagePermission = false;\n    connection.updatedAt = new Date();\n\n    await connection.save();\n    res.json({ message: 'Friend request ignored', connection });\n  } catch (error) {\n    console.error('Ignore request error:', error);\n    res.status(500).json({ message: 'Failed to ignore friend request' });\n  }\n});\n\nrouter.get('/friend-requests/:username', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    const username = user.username;\n\n    console.log('📬 Fetching friend requests for user:', username);\n\n    const received = await Connection.find({\n      receiver: username,\n      status: 'pending'\n    }).lean();\n\n    const sent = await Connection.find({\n      sender: username,\n      status: 'pending'\n    }).lean();\n\n    console.log('📥 Received requests:', received.length);\n    console.log('📤 Sent requests:', sent.length);\n\n    const receivedWithDetails = await Promise.all(\n      received.map(async (conn) => {\n        const senderUsername = conn.sender;\n        console.log('🔍 Looking up sender by username:', senderUsername);\n        \n        // Use helper function to find user by decrypted username\n        const senderUser = await findUserByUsername(senderUsername);\n        \n        console.log('👤 Sender user found:', senderUser ? 'Yes' : 'No');\n        if (senderUser) {\n          console.log('✅ Sender details:', { username: senderUser.username, fullName: senderUser.fullName });\n        }\n        \n        return {\n          ...conn,\n          senderDetails: senderUser ? {\n            username: senderUser.username,\n            fullName: senderUser.fullName,\n            profileImage: senderUser.profileImage,\n            publicKey: senderUser.publicKey\n          } : {\n            username: senderUsername,\n            fullName: 'Unknown User',\n            profileImage: ''\n          }\n        };\n      })\n    );\n\n    const sentWithDetails = await Promise.all(\n      sent.map(async (conn) => {\n        const receiverUsername = conn.receiver;\n        console.log('🔍 Looking up receiver by username:', receiverUsername);\n        \n        // Use helper function to find user by decrypted username\n        const receiverUser = await findUserByUsername(receiverUsername);\n        \n        console.log('👤 Receiver user found:', receiverUser ? 'Yes' : 'No');\n        \n        return {\n          ...conn,\n          receiverDetails: receiverUser ? {\n            username: receiverUser.username,\n            fullName: receiverUser.fullName,\n            profileImage: receiverUser.profileImage,\n            publicKey: receiverUser.publicKey\n          } : {\n            username: receiverUsername,\n            fullName: 'Unknown User',\n            profileImage: ''\n          }\n        };\n      })\n    );\n\n    console.log('✅ Sending response with:', {\n      receivedCount: receivedWithDetails.length,\n      sentCount: sentWithDetails.length\n    });\n\n    res.json({ \n      received: receivedWithDetails,\n      sent: sentWithDetails\n    });\n  } catch (error) {\n    console.error('Get friend requests error:', error);\n    res.status(500).json({ message: 'Failed to fetch friend requests' });\n  }\n});\n\nrouter.get('/friends/:username', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    const username = user.username;\n\n    const connections = await Connection.find({\n      $or: [\n        { sender: username, status: 'accepted' },\n        { receiver: username, status: 'accepted' }\n      ]\n    }).lean();\n\n    const friendUsernames = connections.map(conn => \n      conn.sender === username ? conn.receiver : conn.sender\n    );\n\n    const friends = await User.find({\n      username: { $in: friendUsernames }\n    }).select('username fullName profileImage description');\n\n    res.json(friends);\n  } catch (error) {\n    console.error('Get friends error:', error);\n    res.status(500).json({ message: 'Failed to fetch friends' });\n  }\n});\n\nrouter.get('/connection-status/:username/:otherUsername', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    const username = user.username;\n    const { otherUsername } = req.params;\n\n    const connection = await Connection.findOne({\n      $or: [\n        { sender: username, receiver: otherUsername },\n        { sender: otherUsername, receiver: username }\n      ]\n    }).lean();\n\n    if (!connection) {\n      return res.json({ status: 'none', connectionId: null });\n    }\n\n    const isSender = connection.sender === username;\n    \n    res.json({\n      status: connection.status,\n      connectionId: connection._id,\n      isSender,\n      isFriend: connection.isFriend,\n      messagePermission: connection.messagePermission\n    });\n  } catch (error) {\n    console.error('Get connection status error:', error);\n    res.status(500).json({ message: 'Failed to fetch connection status' });\n  }\n});\n\nrouter.post('/remove-friend', authenticateToken, async (req, res) => {\n  try {\n    const { connectionId } = req.body;\n\n    if (!connectionId) {\n      return res.status(400).json({ message: 'Connection ID is required' });\n    }\n\n    const currentUser = await User.findById(req.user.id);\n    if (!currentUser) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    const connection = await Connection.findById(connectionId);\n\n    if (!connection) {\n      return res.status(404).json({ message: 'Connection not found' });\n    }\n\n    if (connection.sender !== currentUser.username && connection.receiver !== currentUser.username) {\n      return res.status(403).json({ message: 'You can only remove your own connections' });\n    }\n\n    await Connection.findByIdAndDelete(connectionId);\n    res.json({ message: 'Friend removed successfully' });\n  } catch (error) {\n    console.error('Remove friend error:', error);\n    res.status(500).json({ message: 'Failed to remove friend' });\n  }\n});\n\nexport default router;\n","size_bytes":10487},"server/lib/encryption.js":{"content":"import CryptoJS from 'crypto-js';\n\nfunction getEncryptionKey() {\n  const key = process.env.ENCRYPTION_MASTER_KEY || 'default-dev-key-min-32-chars-long';\n  return key;\n}\n\nexport function encryptField(value) {\n  if (!value) return value;\n  const key = getEncryptionKey();\n  const encrypted = CryptoJS.AES.encrypt(value, key).toString();\n  return encrypted;\n}\n\nexport function decryptField(value) {\n  if (!value) return value;\n  try {\n    const key = getEncryptionKey();\n    const bytes = CryptoJS.AES.decrypt(value, key);\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n    return decrypted;\n  } catch (error) {\n    console.error('Decryption error:', error);\n    return value;\n  }\n}\n","size_bytes":690},"server/index.js":{"content":"import express from 'express';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport mongoose from 'mongoose';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\n\nimport authRoutes from './routes/auth.js';\nimport usersRoutes from './routes/users.js';\nimport blockchainRoutes from './routes/blockchain.js';\nimport debugRoutes from './routes/debug.js';\nimport { initializeBlockchain, addMessageBlock } from './lib/blockchain.js';\nimport { authenticateSocket } from './middleware/auth.js';\nimport { setupVite, serveStatic } from './vite.js';\n\nconst app = express();\nconst server = createServer(app);\n\nconst io = new Server(server, {\n  cors: {\n    origin: process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'http://localhost:5000',\n    credentials: true,\n  },\n});\n\napp.use(helmet({\n  contentSecurityPolicy: false,\n}));\n\napp.use(cors({\n  origin: process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'http://localhost:5000',\n  credentials: true,\n}));\n\n// If running behind a proxy (nginx, cloudflare, etc.), trust the proxy so\n// req.ip and X-Forwarded-For are handled correctly. Set to true for now;\n// adjust in production to specific proxy IPs or CIDR if needed.\napp.set('trust proxy', true);\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: 'Too many requests from this IP, please try again later.',\n});\n\napp.use('/api/', limiter);\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\nmongoose.connect(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n})\n.then(async () => {\n  console.log('✓ MongoDB connected');\n  await initializeBlockchain();\n  console.log('✓ Blockchain initialized');\n})\n.catch(err => {\n  console.error('MongoDB connection error:', err);\n  process.exit(1);\n});\n\napp.use('/api/auth', authRoutes);\napp.use('/api/users', usersRoutes);\napp.use('/api/blockchain', blockchainRoutes);\napp.use('/api/debug', debugRoutes);\n\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\nio.use(authenticateSocket);\n\nconst userSockets = new Map();\n\nio.on('connection', (socket) => {\n  console.log(`User connected: ${socket.username}`);\n  userSockets.set(socket.username, socket.id);\n\n  socket.emit('connected', { username: socket.username });\n\n  socket.on('send-message', async (data) => {\n    try {\n      const { to, encryptedPayload } = data;\n      \n      const block = await addMessageBlock(\n        socket.username,\n        to,\n        encryptedPayload\n      );\n\n      const recipientSocketId = userSockets.get(to);\n      if (recipientSocketId) {\n        io.to(recipientSocketId).emit('receive-message', {\n          from: socket.username,\n          block: {\n            index: block.index,\n            timestamp: block.timestamp,\n            hash: block.hash,\n            prevHash: block.prevHash,\n            payload: block.payload,\n          },\n        });\n      }\n\n      socket.emit('message-sent', {\n        blockNumber: block.index,\n        hash: block.hash,\n        timestamp: block.timestamp,\n      });\n\n      console.log(`Message block #${block.index} created: ${socket.username} -> ${to}`);\n    } catch (error) {\n      console.error('Send message error:', error);\n      socket.emit('error', { message: 'Failed to send message' });\n    }\n  });\n\n  socket.on('disconnect', () => {\n    console.log(`User disconnected: ${socket.username}`);\n    userSockets.delete(socket.username);\n  });\n});\n\napp.use((err, req, res, next) => {\n  console.error('Error:', err);\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n  res.status(status).json({ error: message });\n});\n\n(async () => {\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const PORT = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port: PORT,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    console.log(`✓ Server running on port ${PORT}`);\n  });\n})();\n\nexport default server;\n","size_bytes":4232},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/models/Blockchain.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst blockSchema = new mongoose.Schema({\n  index: {\n    type: Number,\n    required: true,\n  },\n  timestamp: {\n    type: String,\n    required: true,\n  },\n  from: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  to: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  payload: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  prevHash: {\n    type: String,\n    required: true,\n  },\n  hash: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n});\n\nblockSchema.index({ from: 1, to: 1 });\nblockSchema.index({ index: 1 });\n\nexport default mongoose.model('Block', blockSchema);\n","size_bytes":936},"server/index-main.ts":{"content":"\n// Load .env into process.env for local development\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconsole.log('Starting server initialization...');\n\nimport express, { Request, Response, NextFunction } from 'express';\nimport { createServer } from 'http';\nimport { Server, Socket } from 'socket.io';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\n\nconsole.log('Basic imports loaded');\n\nimport authRoutes from './routes/auth.js';\nimport usersRoutes from './routes/users.js';\nimport blockchainRoutes from './routes/blockchain.js';\nimport storiesRoutes from './routes/stories.js';\nimport connectionsRoutes from './routes/connections.js';\nimport chatsRoutes from './routes/chats.js';\nimport uploadsRoutes from './routes/uploads.js';\nimport { initializeBlockchain, addMessageBlock } from './lib/blockchain.js';\nimport { authenticateSocket } from './middleware/auth.js';\nimport { setupVite, serveStatic } from './vite.js';\nimport { encryptField, decryptField } from './lib/encryption.js';\nimport { \n  encryptMessageWithChatKeys, \n  decryptMessageWithChatKeys, \n  calculateMessageHash, \n  getPreviousMessageHash,\n  getChatKeys \n} from './lib/chatCrypto.js';\nimport Connection from './models/Connection.js';\nimport Chat from './models/Chat.js';\nimport User from './models/User.js';\nimport path from 'path';\n\nconsole.log('All imports loaded');\n\ninterface AuthenticatedSocket extends Socket {\n  userId?: string;\n  username?: string;\n}\n\nconst app = express();\nconst server = createServer(app);\n\napp.set('trust proxy', true);\n\nconst io = new Server(server, {\n  cors: {\n    origin: process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'http://localhost:5000',\n    credentials: true,\n  },\n});\n\napp.use(helmet({\n  contentSecurityPolicy: false,\n}));\n\napp.use(cors({\n  origin: process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'http://localhost:5000',\n  credentials: true,\n}));\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: 'Too many requests from this IP, please try again later.',\n  validate: { trustProxy: false },\n});\n\napp.use('/api/', limiter);\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\napp.use(cookieParser());\n\napp.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\napp.use('/api/auth', authRoutes);\napp.use('/api/users', usersRoutes);\napp.use('/api/blockchain', blockchainRoutes);\napp.use('/api/stories', storiesRoutes);\napp.use('/api/connections', connectionsRoutes);\napp.use('/api/chats', chatsRoutes);\napp.use('/api/uploads', uploadsRoutes);\n\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\nio.use(authenticateSocket);\n\nconst userSockets = new Map<string, string>();\n\nio.on('connection', (socket: AuthenticatedSocket) => {\n  console.log(`User connected: ${socket.username}`);\n  if (socket.username) {\n    userSockets.set(socket.username, socket.id);\n  }\n\n  socket.emit('connected', { username: socket.username });\n\n  socket.on('send-message', async (data) => {\n    try {\n      const { to, message, messageType = 'text', mediaUrl = null, metadata = null } = data;\n      \n      const areFriends = await Connection.findOne({\n        $or: [\n          { sender: socket.username, receiver: to, status: 'accepted' },\n          { sender: to, receiver: socket.username, status: 'accepted' }\n        ]\n      });\n\n      if (!areFriends) {\n        console.log(`Message blocked: ${socket.username} and ${to} are not friends`);\n        socket.emit('error', { message: 'You can only message friends' });\n        return;\n      }\n      \n      const chatRoomId = [socket.username, to].sort().join('_');\n      \n      const { encryptedMessage, chatPublicKey, chatPrivateKey } = await encryptMessageWithChatKeys(message, chatRoomId);\n      \n      const previousHash = await getPreviousMessageHash(chatRoomId);\n      const timestamp = new Date();\n      const hash = calculateMessageHash(\n        chatRoomId,\n        socket.username!,\n        to,\n        messageType,\n        encryptedMessage,\n        timestamp.toISOString(),\n        previousHash\n      );\n      \n      const block = await addMessageBlock(\n        socket.username!,\n        to,\n        encryptedMessage\n      );\n      \n      const chatMessage = await Chat.create({\n        senderId: socket.username,\n        receiverId: to,\n        encryptedMessage,\n        chatRoomId,\n        messageType,\n        mediaUrl,\n        metadata,\n        status: 'sent',\n        blockIndex: block.index,\n        hash,\n        previousHash,\n        chatPublicKey,\n        chatPrivateKey,\n        timestamp,\n      });\n\n      const recipientSocketId = userSockets.get(to);\n      if (recipientSocketId) {\n        const { serverDecrypt } = await import('./lib/chatCrypto.js');\n        const chatEncrypted = serverDecrypt(encryptedMessage);\n        \n        io.to(recipientSocketId).emit('receive-message', {\n          from: socket.username,\n          messageId: chatMessage._id.toString(),\n          encryptedMessage: chatEncrypted,\n          chatPublicKey,\n          chatPrivateKey,\n          hash,\n          previousHash,\n          block: {\n            index: block.index,\n            timestamp: block.timestamp,\n            hash: block.hash,\n            prevHash: block.prevHash,\n            payload: block.payload,\n          },\n          messageType,\n          mediaUrl,\n          metadata,\n        });\n        \n        await Chat.findByIdAndUpdate(chatMessage._id, { status: 'delivered' });\n        \n        socket.emit('message-delivered', {\n          messageId: chatMessage._id.toString(),\n          blockNumber: block.index,\n        });\n      }\n\n      socket.emit('message-sent', {\n        messageId: chatMessage._id.toString(),\n        blockNumber: block.index,\n        hash: block.hash,\n        previousHash,\n        timestamp: timestamp.toISOString(),\n      });\n\n      console.log(`Message block #${block.index} created: ${socket.username} -> ${to} (hash: ${hash.substring(0, 8)}...)`);\n    } catch (error) {\n      console.error('Send message error:', error);\n      socket.emit('error', { message: 'Failed to send message' });\n    }\n  });\n\n  socket.on('message-seen', async (data) => {\n    try {\n      const { messageId, from } = data;\n      \n      const message = await Chat.findByIdAndUpdate(\n        messageId,\n        { status: 'seen' },\n        { new: true }\n      );\n      \n      if (message) {\n        const senderSocketId = userSockets.get(from);\n        if (senderSocketId) {\n          io.to(senderSocketId).emit('message-status-update', {\n            messageId,\n            status: 'seen',\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Message seen error:', error);\n    }\n  });\n  \n  socket.on('messages-seen-bulk', async (data) => {\n    try {\n      const { username } = data;\n      const chatRoomId = [socket.username, username].sort().join('_');\n      \n      console.log('📬 messages-seen-bulk event received');\n      console.log('  From user (viewer):', socket.username);\n      console.log('  For messages from:', username);\n      console.log('  Chat room ID:', chatRoomId);\n      \n      // The stored `receiverId` values are encrypted using a non-deterministic\n      // algorithm (random salt), so encrypting the username again will not\n      // produce a value that matches the DB. To reliably mark messages as\n      // seen we first fetch candidate messages in the chat room (status !=\n      // 'seen'), then decrypt `receiverId` in application code and update\n      // only those message documents whose decrypted receiver matches the\n      // viewer username.\n      const candidates = await Chat.find({ chatRoomId, status: { $ne: 'seen' } })\n        .select('_id receiverId')\n        .lean();\n\n      const idsToUpdate = [] as string[];\n      for (const c of candidates) {\n        try {\n          const decryptedReceiver = decryptField(c.receiverId);\n          if (decryptedReceiver === socket.username) {\n            idsToUpdate.push(c._id.toString());\n          }\n        } catch (err) {\n          console.warn('Failed to decrypt receiverId for candidate message', c._id, err);\n        }\n      }\n\n      let modifiedCount = 0;\n      if (idsToUpdate.length > 0) {\n        const updateRes = await Chat.updateMany({ _id: { $in: idsToUpdate } }, { status: 'seen' });\n        modifiedCount = updateRes.modifiedCount || 0;\n      }\n\n      console.log('  Database update result:', modifiedCount, 'messages updated');\n\n      const senderSocketId = userSockets.get(username);\n      if (senderSocketId) {\n        console.log('  Notifying sender:', username, 'via socket:', senderSocketId);\n        io.to(senderSocketId).emit('messages-seen-bulk', {\n          from: socket.username,\n          count: modifiedCount,\n        });\n      } else {\n        console.log('  Sender', username, 'is not online');\n      }\n    } catch (error) {\n      console.error('Messages seen bulk error:', error);\n    }\n  });\n\n  socket.on('disconnect', () => {\n    console.log(`User disconnected: ${socket.username}`);\n    if (socket.username) {\n      userSockets.delete(socket.username);\n    }\n  });\n\n  socket.on('delete-message-for-both', (data) => {\n    try {\n      const { messageId, to } = data;\n      const recipientSocketId = userSockets.get(to);\n      if (recipientSocketId) {\n        io.to(recipientSocketId).emit('message-deleted', { messageId });\n      }\n    } catch (err) {\n      console.error('Error in delete-message-for-both socket relay:', err);\n    }\n  });\n});\n\napp.use((err: any, req: Request, res: Response, next: NextFunction) => {\n  console.error('Error:', err);\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n  res.status(status).json({ error: message });\n});\n\n(async () => {\n  try {\n    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/swapchat';\n    await mongoose.connect(MONGODB_URI);\n    console.log('✓ MongoDB connected');\n    \n    await initializeBlockchain();\n    console.log('✓ Blockchain initialized');\n  } catch (err) {\n    console.error('Database initialization error:', err);\n    process.exit(1);\n  }\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const PORT = parseInt(process.env.PORT || '5000', 10);\n  const listenOptions: any = { port: PORT, host: \"0.0.0.0\" };\n  // reusePort isn't supported on some Windows builds / environments. Only enable it on non-Windows.\n  if (process.platform !== 'win32') {\n    listenOptions.reusePort = true;\n  }\n\n  server.listen(listenOptions, () => {\n    console.log(`✓ Server running on port ${PORT}`);\n  });\n})();\n\nexport default server;\n","size_bytes":10868},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/RegistrationForm.tsx":{"content":"import { useState } from \"react\";\nimport { GoogleLogin } from '@react-oauth/google';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Check, Key, Mail } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport nacl from \"tweetnacl\";\nimport naclUtil from \"tweetnacl-util\";\n\ninterface RegistrationFormProps {\n  onSuccess: (token: string, user: any) => void;\n}\n\nexport default function RegistrationForm({ onSuccess }: RegistrationFormProps) {\n  const [step, setStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGoogleLoading, setIsGoogleLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n\n  const [formData, setFormData] = useState({\n    email: \"\",\n    fullName: \"\",\n    phone: \"\",\n    dateOfBirth: \"\",\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    otp: \"\",\n  });\n\n  const [keys, setKeys] = useState<{ publicKey: string; privateKey: string } | null>(null);\n\n  const updateField = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError(\"\");\n  };\n\n  const checkUsername = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/auth/check-username', { username: formData.username });\n      const data = await response.json();\n      return data.available;\n    } catch (err: any) {\n      throw new Error(err.message || \"Failed to check username\");\n    }\n  };\n\n  const sendOTP = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    try {\n      await apiRequest('POST', '/api/auth/send-otp', {\n        email: formData.email,\n        fullName: formData.fullName,\n        phone: formData.phone,\n        dateOfBirth: formData.dateOfBirth,\n      });\n      setSuccess(\"OTP sent to your email!\");\n      setStep(2);\n    } catch (err: any) {\n      setError(err.message || \"Failed to send OTP\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const verifyOTP = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    try {\n      await apiRequest('POST', '/api/auth/verify-otp', {\n        email: formData.email,\n        otp: formData.otp,\n      });\n      setSuccess(\"Email verified!\");\n      setStep(3);\n    } catch (err: any) {\n      setError(err.message || \"Invalid OTP\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createAccount = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    setSuccess(\"\");\n    try {\n      const usernameAvailable = await checkUsername();\n      if (!usernameAvailable) {\n        setError(\"Username already taken\");\n        setIsLoading(false);\n        return;\n      }\n\n      setSuccess(\"Generating encryption keys...\");\n      const keyPair = nacl.box.keyPair();\n      const publicKey = naclUtil.encodeBase64(keyPair.publicKey);\n      const privateKey = naclUtil.encodeBase64(keyPair.secretKey);\n      \n      setKeys({ publicKey, privateKey });\n\n      const response = await apiRequest('POST', '/api/auth/register', {\n        username: formData.username,\n        password: formData.password,\n        email: formData.email,\n        fullName: formData.fullName,\n        phone: formData.phone,\n        dateOfBirth: formData.dateOfBirth,\n        publicKey,\n        privateKey,\n      });\n\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('privateKey', privateKey);\n      localStorage.setItem('user', JSON.stringify({ ...data.user, privateKey }));\n      onSuccess(data.token, { ...data.user, privateKey });\n    } catch (err: any) {\n      setSuccess(\"\");\n      const errorMessage = err.message || \"Registration failed\";\n      if (errorMessage.includes(\"Email not verified\")) {\n        setError(\"Email verification expired. Please start registration again.\");\n        setTimeout(() => setStep(1), 3000);\n      } else if (errorMessage.includes(\"errors\")) {\n        setError(\"Invalid registration data. Please check all fields.\");\n      } else {\n        setError(errorMessage);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleStep1Submit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.email || !formData.fullName || !formData.phone || !formData.dateOfBirth) {\n      setError(\"Please fill all fields\");\n      return;\n    }\n    sendOTP();\n  };\n\n  const handleStep2Submit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.otp.length !== 6) {\n      setError(\"OTP must be 6 digits\");\n      return;\n    }\n    verifyOTP();\n  };\n\n  const handleStep3Submit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.username || formData.username.length < 3) {\n      setError(\"Username must be at least 3 characters\");\n      return;\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {\n      setError(\"Username can only contain letters, numbers, and underscores\");\n      return;\n    }\n    if (formData.password.length < 8) {\n      setError(\"Password must be at least 8 characters\");\n      return;\n    }\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Passwords do not match\");\n      return;\n    }\n    createAccount();\n  };\n\n  const handleGoogleSuccess = async (credentialResponse: any) => {\n    try {\n      setIsGoogleLoading(true);\n      setError(\"\");\n      const response = await apiRequest('POST', '/api/auth/google', {\n        credential: credentialResponse.credential,\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.user) {\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('privateKey', data.user.privateKey);\n        onSuccess(data.token, data.user);\n      } else {\n        setError(data.error || 'Failed to authenticate with Google');\n      }\n    } catch (error: any) {\n      console.error('Google signup error:', error);\n      setError(error.message || 'Failed to authenticate with Google');\n    } finally {\n      setIsGoogleLoading(false);\n    }\n  };\n\n  const handleGoogleError = () => {\n    setError('Google authentication failed');\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-center gap-2 mb-6\">\n        <div className={`h-2 w-2 rounded-full ${step >= 1 ? 'bg-primary' : 'bg-muted'}`} />\n        <div className={`h-2 w-2 rounded-full ${step >= 2 ? 'bg-primary' : 'bg-muted'}`} />\n        <div className={`h-2 w-2 rounded-full ${step >= 3 ? 'bg-primary' : 'bg-muted'}`} />\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\" data-testid=\"alert-error\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {success && (\n        <Alert className=\"border-primary/50 bg-primary/10\" data-testid=\"alert-success\">\n          <Check className=\"h-4 w-4 text-primary\" />\n          <AlertDescription className=\"text-primary\">{success}</AlertDescription>\n        </Alert>\n      )}\n\n      {step === 1 && (\n        <form onSubmit={handleStep1Submit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email Address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => updateField('email', e.target.value)}\n              placeholder=\"your.email@example.com\"\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fullName\">Full Name</Label>\n            <Input\n              id=\"fullName\"\n              type=\"text\"\n              value={formData.fullName}\n              onChange={(e) => updateField('fullName', e.target.value)}\n              placeholder=\"John Doe\"\n              required\n              data-testid=\"input-fullName\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phone\">Phone Number</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) => updateField('phone', e.target.value)}\n              placeholder=\"+1 234 567 8900\"\n              required\n              data-testid=\"input-phone\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n            <Input\n              id=\"dateOfBirth\"\n              type=\"date\"\n              value={formData.dateOfBirth}\n              onChange={(e) => updateField('dateOfBirth', e.target.value)}\n              required\n              data-testid=\"input-dateOfBirth\"\n            />\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-send-otp\">\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Sending OTP...\n              </>\n            ) : (\n              <>\n                <Mail className=\"mr-2 h-4 w-4\" />\n                Send Verification Code\n              </>\n            )}\n          </Button>\n\n          <div className=\"relative my-4\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-muted\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center\" data-testid=\"google-register-button\">\n            {isGoogleLoading ? (\n              <Button disabled className=\"w-full\">\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Signing up with Google...\n              </Button>\n            ) : (\n              <GoogleLogin\n                onSuccess={handleGoogleSuccess}\n                onError={handleGoogleError}\n                size=\"large\"\n                width=\"400\"\n                text=\"signup_with\"\n              />\n            )}\n          </div>\n        </form>\n      )}\n\n      {step === 2 && (\n        <form onSubmit={handleStep2Submit} className=\"space-y-4\">\n          <div className=\"text-center mb-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              We've sent a 6-digit code to <strong>{formData.email}</strong>\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"otp\">Verification Code</Label>\n            <Input\n              id=\"otp\"\n              type=\"text\"\n              value={formData.otp}\n              onChange={(e) => updateField('otp', e.target.value.replace(/\\D/g, '').slice(0, 6))}\n              placeholder=\"000000\"\n              maxLength={6}\n              required\n              className=\"text-center text-2xl tracking-widest\"\n              data-testid=\"input-otp\"\n            />\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-verify-otp\">\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              \"Verify Code\"\n            )}\n          </Button>\n\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            className=\"w-full\"\n            onClick={() => setStep(1)}\n            data-testid=\"button-back\"\n          >\n            Back\n          </Button>\n        </form>\n      )}\n\n      {step === 3 && (\n        <form onSubmit={handleStep3Submit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              value={formData.username}\n              onChange={(e) => updateField('username', e.target.value)}\n              placeholder=\"username\"\n              required\n              data-testid=\"input-username\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              3-20 characters, letters, numbers, and underscores only\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={formData.password}\n              onChange={(e) => updateField('password', e.target.value)}\n              placeholder=\"••••••••\"\n              required\n              data-testid=\"input-password\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Minimum 8 characters\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              value={formData.confirmPassword}\n              onChange={(e) => updateField('confirmPassword', e.target.value)}\n              placeholder=\"••••••••\"\n              required\n              data-testid=\"input-confirmPassword\"\n            />\n          </div>\n\n          <div className=\"bg-primary/10 border border-primary/50 rounded-md p-3 text-sm space-y-2\">\n            <div className=\"flex items-center gap-2 text-primary font-semibold\">\n              <Key className=\"h-4 w-4\" />\n              <span>Encryption Keys - Important</span>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Your encryption keys will be generated automatically and stored securely on this device only. \n              To access your messages from another device, you'll need to register a new account or back up your keys.\n            </p>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-create-account\">\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating Account...\n              </>\n            ) : (\n              \"Create Account\"\n            )}\n          </Button>\n        </form>\n      )}\n    </div>\n  );\n}\n","size_bytes":14400},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/UserProfilePreview.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { MessageSquare, User, UserPlus, Check, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ConnectionStatus {\n  status: 'none' | 'pending' | 'accepted' | 'ignored';\n  isFriend: boolean;\n  isSender: boolean;\n  connectionId?: string;\n}\n\ninterface UserProfilePreviewProps {\n  user: {\n    id: string;\n    username: string;\n    fullName: string;\n    phone?: string;\n    description: string;\n    profileImage: string;\n    publicKey: string;\n    createdAt: string;\n  } | null;\n  open: boolean;\n  onClose: () => void;\n  onStartChat: (publicKey: string, username: string) => void;\n}\n\nexport default function UserProfilePreview({ user, open, onClose, onStartChat }: UserProfilePreviewProps) {\n  const { toast } = useToast();\n  const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n\n  const { data: connectionStatus, refetch: refetchConnectionStatus } = useQuery<ConnectionStatus>({\n    queryKey: ['/api/connections/connection-status', currentUser.username, user?.username],\n    enabled: open && !!currentUser.username && !!user,\n  });\n\n  const sendRequestMutation = useMutation({\n    mutationFn: async () => {\n      if (!user) throw new Error(\"User not found\");\n      return await apiRequest('POST', '/api/connections/send-request', {\n        sender: currentUser.username,\n        receiver: user.username,\n      });\n    },\n    onSuccess: () => {\n      if (!user) return;\n      toast({\n        title: \"Friend request sent\",\n        description: `Request sent to @${user.username}`,\n      });\n      refetchConnectionStatus();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send request\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const acceptRequestMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/connections/accept-request', {\n        connectionId: connectionStatus?.connectionId,\n      });\n    },\n    onSuccess: () => {\n      if (!user) return;\n      toast({\n        title: \"Friend request accepted\",\n        description: `You are now friends with @${user.username}`,\n      });\n      refetchConnectionStatus();\n      queryClient.invalidateQueries({ queryKey: ['/api/users/contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/connections/friends'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to accept request\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const ignoreRequestMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/connections/ignore-request', {\n        connectionId: connectionStatus?.connectionId,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Friend request ignored\",\n      });\n      refetchConnectionStatus();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to ignore request\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user) return null;\n\n  const joinedDate = user.createdAt ? format(new Date(user.createdAt), 'MMMM dd, yyyy') : 'N/A';\n\n  const renderActionButton = () => {\n    if (!connectionStatus) {\n      return null;\n    }\n\n    if (connectionStatus.status === 'accepted' && connectionStatus.isFriend) {\n      return (\n        <Button\n          onClick={() => {\n            onStartChat(user.publicKey, user.username);\n            onClose();\n          }}\n          className=\"w-full bg-white hover:bg-gray-100 text-swapgreen border-2 border-swapgreen font-semibold\"\n          data-testid={`button-start-chat-${user.username}`}\n        >\n          <MessageSquare className=\"h-4 w-4 mr-2 text-swapgreen\" />\n          Message\n        </Button>\n      );\n    }\n\n    if (connectionStatus.status === 'pending' && !connectionStatus.isSender) {\n      return (\n        <div className=\"space-y-2\">\n          <Button\n            onClick={() => acceptRequestMutation.mutate()}\n            disabled={acceptRequestMutation.isPending}\n            className=\"w-full bg-white hover:bg-gray-100 text-swapgreen border-2 border-swapgreen font-semibold\"\n            data-testid={`button-accept-request-${user.username}`}\n          >\n            <Check className=\"h-4 w-4 mr-2 text-swapgreen\" />\n            Accept Request\n          </Button>\n          <Button\n            onClick={() => ignoreRequestMutation.mutate()}\n            disabled={ignoreRequestMutation.isPending}\n            className=\"w-full bg-white hover:bg-gray-100 border-2 border-red-500 text-red-500 font-semibold\"\n            data-testid={`button-ignore-request-${user.username}`}\n          >\n            <X className=\"h-4 w-4 mr-2 text-red-500\" />\n            Ignore\n          </Button>\n        </div>\n      );\n    }\n\n    if (connectionStatus.status === 'pending' && connectionStatus.isSender) {\n      return (\n        <Button\n          disabled\n          variant=\"outline\"\n          className=\"w-full\"\n          data-testid={`button-request-pending-${user.username}`}\n        >\n          Request Pending\n        </Button>\n      );\n    }\n\n    if (connectionStatus.status === 'ignored') {\n      return (\n        <Button\n          disabled\n          variant=\"outline\"\n          className=\"w-full\"\n          data-testid={`button-request-ignored-${user.username}`}\n        >\n          Request Ignored\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        onClick={() => sendRequestMutation.mutate()}\n        disabled={sendRequestMutation.isPending}\n        className=\"w-full bg-white hover:bg-gray-100 text-swapgreen border-2 border-swapgreen font-semibold\"\n        data-testid={`button-send-request-${user.username}`}\n      >\n        <UserPlus className=\"h-4 w-4 mr-2 text-swapgreen\" />\n        Send Friend Request\n      </Button>\n    );\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"bg-midnight-dark border-gray-800 text-white max-w-md\">\n        <DialogHeader>\n          <DialogTitle>User Profile</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            <Avatar className=\"h-24 w-24 border-4 border-swapgreen\">\n              <AvatarImage src={user.profileImage} alt={user.username} />\n              <AvatarFallback className=\"bg-midnight-light text-white text-2xl\">\n                <User className=\"h-12 w-12\" />\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"text-center\">\n              <h2 className=\"text-xl font-semibold text-white\" data-testid={`text-username-${user.username}`}>\n                @{user.username}\n              </h2>\n              <p className=\"text-gray-400 mt-1\" data-testid={`text-fullname-${user.username}`}>\n                {user.fullName}\n              </p>\n            </div>\n          </div>\n\n          {user.description && (\n            <div className=\"bg-midnight-light rounded-lg p-4\">\n              <p className=\"text-sm text-gray-300\" data-testid={`text-description-${user.username}`}>\n                {user.description}\n              </p>\n            </div>\n          )}\n\n          <div className=\"space-y-2 text-sm\">\n            {user.phone && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Phone</span>\n                <span className=\"text-white\" data-testid={`text-phone-${user.username}`}>{user.phone}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-400\">Joined</span>\n              <span className=\"text-white\" data-testid={`text-joined-${user.username}`}>{joinedDate}</span>\n            </div>\n            {connectionStatus?.isFriend && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-400\">Status</span>\n                <span className=\"text-swapgreen flex items-center gap-1\" data-testid={`text-friend-status-${user.username}`}>\n                  <Check className=\"h-3 w-3\" />\n                  Friends\n                </span>\n              </div>\n            )}\n          </div>\n\n          {renderActionButton()}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8769},"client/src/components/examples/ChatInput.tsx":{"content":"import { useState } from 'react';\nimport ChatInput from '../ChatInput';\n\nexport default function ChatInputExample() {\n  const [messages, setMessages] = useState<string[]>([]);\n\n  return (\n    <div className=\"bg-background h-64 flex flex-col\">\n      <div className=\"flex-1 p-4 overflow-auto\">\n        {messages.map((msg, idx) => (\n          <div key={idx} className=\"mb-2 text-sm\">\n            {msg}\n          </div>\n        ))}\n      </div>\n      <ChatInput\n        onSendMessage={(msg) => {\n          console.log('Sending:', msg);\n          setMessages([...messages, msg]);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":613},"client/src/components/LoginPage.tsx":{"content":"import { useState } from \"react\";\nimport { GoogleLogin } from '@react-oauth/google';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Key, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport heroImage from '@assets/generated_images/Blockchain_network_hero_image_243b3dd4.png';\nimport lockblipLogo from \"@assets/Untitled design_1761899121550.png\";\n\ninterface LoginPageProps {\n  onLogin: (username: string, password: string) => void;\n  onRegister: (username: string, password: string) => void;\n}\n\nexport default function LoginPage({ onLogin, onRegister }: LoginPageProps) {\n  const [isGeneratingKeys, setIsGeneratingKeys] = useState(false);\n  const [isGoogleLoading, setIsGoogleLoading] = useState(false);\n  const [loginUsername, setLoginUsername] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n  const [registerUsername, setRegisterUsername] = useState(\"\");\n  const [registerPassword, setRegisterPassword] = useState(\"\");\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(loginUsername, loginPassword);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsGeneratingKeys(true);\n    setTimeout(() => {\n      onRegister(registerUsername, registerPassword);\n      setIsGeneratingKeys(false);\n    }, 2000);\n  };\n\n  const handleGoogleSuccess = async (credentialResponse: any) => {\n    try {\n      setIsGoogleLoading(true);\n      const response = await apiRequest('POST', '/api/auth/google', {\n        credential: credentialResponse.credential,\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.user) {\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('privateKey', data.user.privateKey);\n        window.location.reload();\n      } else {\n        alert(data.error || 'Failed to authenticate with Google');\n      }\n    } catch (error) {\n      console.error('Google login error:', error);\n      alert('Failed to authenticate with Google');\n    } finally {\n      setIsGoogleLoading(false);\n    }\n  };\n\n  const handleGoogleError = () => {\n    alert('Google authentication failed');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 relative overflow-hidden\">\n      <div\n        className=\"absolute inset-0 z-0\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(11, 16, 32, 0.85), rgba(27, 31, 58, 0.85)), url(${heroImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      \n      <Card className=\"w-full max-w-md relative z-10 border-primary/20 bg-card/80 backdrop-blur-xl\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"flex justify-center mb-2\">\n            <img src={lockblipLogo} alt=\"LockBlip\" className=\"h-16 w-16 object-contain rounded-2xl shadow-lg\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold\">LockBlip</CardTitle>\n          <CardDescription>\n            Blockchain-powered secure messaging with end-to-end encryption\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-username\">Username</Label>\n                  <Input\n                    id=\"login-username\"\n                    type=\"text\"\n                    value={loginUsername}\n                    onChange={(e) => setLoginUsername(e.target.value)}\n                    placeholder=\"Enter your username\"\n                    required\n                    data-testid=\"input-login-username\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    value={loginPassword}\n                    onChange={(e) => setLoginPassword(e.target.value)}\n                    placeholder=\"Enter your password\"\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n                  Login\n                </Button>\n\n                <div className=\"relative my-4\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <span className=\"w-full border-t border-muted\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-center\" data-testid=\"google-login-button\">\n                  {isGoogleLoading ? (\n                    <Button disabled className=\"w-full\">\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in with Google...\n                    </Button>\n                  ) : (\n                    <GoogleLogin\n                      onSuccess={handleGoogleSuccess}\n                      onError={handleGoogleError}\n                      size=\"large\"\n                      width=\"400\"\n                      text=\"signin_with\"\n                    />\n                  )}\n                </div>\n              </form>\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-username\">Username</Label>\n                  <Input\n                    id=\"register-username\"\n                    type=\"text\"\n                    value={registerUsername}\n                    onChange={(e) => setRegisterUsername(e.target.value)}\n                    placeholder=\"Choose a username\"\n                    required\n                    disabled={isGeneratingKeys}\n                    data-testid=\"input-register-username\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <Input\n                    id=\"register-password\"\n                    type=\"password\"\n                    value={registerPassword}\n                    onChange={(e) => setRegisterPassword(e.target.value)}\n                    placeholder=\"Choose a password\"\n                    required\n                    disabled={isGeneratingKeys}\n                    data-testid=\"input-register-password\"\n                  />\n                </div>\n                <div className=\"bg-muted/50 rounded-md p-3 text-sm space-y-1\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <Key className=\"h-4 w-4\" />\n                    <span>Encryption keys will be generated automatically</span>\n                  </div>\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isGeneratingKeys}\n                  data-testid=\"button-register\"\n                >\n                  {isGeneratingKeys ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Generating Keys...\n                    </>\n                  ) : (\n                    \"Create Account\"\n                  )}\n                </Button>\n\n                <div className=\"relative my-4\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <span className=\"w-full border-t border-muted\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-center\" data-testid=\"google-register-button\">\n                  {isGoogleLoading ? (\n                    <Button disabled className=\"w-full\">\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing up with Google...\n                    </Button>\n                  ) : (\n                    <GoogleLogin\n                      onSuccess={handleGoogleSuccess}\n                      onError={handleGoogleError}\n                      size=\"large\"\n                      width=\"400\"\n                      text=\"signup_with\"\n                    />\n                  )}\n                </div>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9603},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/routes/users.js":{"content":"import express from 'express';\nimport User from '../models/User.js';\nimport Connection from '../models/Connection.js';\nimport Chat from '../models/Chat.js';\nimport { authenticateToken } from '../middleware/auth.js';\nimport { decryptField } from '../lib/encryption.js';\n\nconst router = express.Router();\n\nrouter.get('/contacts', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    console.log(`📋 Fetching contacts for user: ${user.username}`);\n\n    const connections = await Connection.find({\n      $or: [\n        { sender: user.username, status: 'accepted' },\n        { receiver: user.username, status: 'accepted' }\n      ]\n    }).lean();\n\n    console.log(`🔗 Found ${connections.length} accepted connections`);\n    console.log('Connections:', connections.map(c => `${c.sender} -> ${c.receiver} (${c.status})`));\n\n    const friendUsernames = connections.map(conn => \n      conn.sender === user.username ? conn.receiver : conn.sender\n    );\n\n    console.log(`👥 Friend usernames:`, friendUsernames);\n\n    const allUsers = await User.find({});\n    const friendUsers = allUsers.filter(u => friendUsernames.includes(u.username));\n\n    console.log(`📇 Found ${friendUsers.length} friend users in database`);\n\n    const contacts = await Promise.all(friendUsers.map(async (friendUser) => {\n      const chatRoomId = [user.username, friendUser.username].sort().join('_');\n\n      // Fetch the latest message in the chat room (if any).\n      const last = await Chat.find({ chatRoomId })\n        .sort({ timestamp: -1 })\n        .limit(1)\n        .select('timestamp encryptedMessage')\n        .lean();\n\n      // For unread count, fetch candidates with status != 'seen' and\n      // then filter in application code by decrypting sender/receiver.\n      const unseen = await Chat.find({ chatRoomId, status: { $ne: 'seen' } })\n        .select('senderId receiverId')\n        .lean();\n\n      let unreadCount = 0;\n      for (const m of unseen) {\n        try {\n          const senderPlain = decryptField(m.senderId);\n          const receiverPlain = decryptField(m.receiverId);\n          if (senderPlain === friendUser.username && receiverPlain === user.username) {\n            unreadCount++;\n          }\n        } catch (err) {\n          console.warn('Failed to decrypt chat ids for unread count', err);\n        }\n      }\n\n      return {\n        id: friendUser.publicKey,\n        name: friendUser.username,\n        fullName: friendUser.fullName || '',\n        phone: friendUser.phone || '',\n        profileImage: friendUser.profileImage || '',\n        description: friendUser.description || '',\n        isOnline: false,\n        lastMessageTime: last.length ? last[0].timestamp : null,\n        unreadCount: unreadCount\n      };\n    }));\n\n    contacts.sort((a, b) => {\n      if (!a.lastMessageTime && !b.lastMessageTime) return 0;\n      if (!a.lastMessageTime) return 1;\n      if (!b.lastMessageTime) return -1;\n      return new Date(b.lastMessageTime) - new Date(a.lastMessageTime);\n    });\n\n    console.log(`✅ Returning ${contacts.length} contacts sorted by last message time`);\n\n    res.json(contacts);\n  } catch (error) {\n    console.error('Get contacts error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.get('/profile', authenticateToken, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    res.json({\n      id: user._id,\n      username: user.username,\n      email: user.email,\n      phone: user.phone,\n      fullName: user.fullName,\n      dateOfBirth: user.dateOfBirth,\n      description: user.description || '',\n      profileImage: user.profileImage || '',\n      createdAt: user.createdAt,\n    });\n  } catch (error) {\n    console.error('Get profile error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.put('/profile', authenticateToken, async (req, res) => {\n  try {\n    const { fullName, phone, dateOfBirth, description, profileImage } = req.body;\n\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    if (fullName) user.fullName = fullName;\n    if (phone) user.phone = phone;\n    if (dateOfBirth) user.dateOfBirth = dateOfBirth;\n    if (description !== undefined) user.description = description;\n    if (profileImage !== undefined) user.profileImage = profileImage;\n\n    await user.save();\n\n    res.json({\n      id: user._id,\n      username: user.username,\n      email: user.email,\n      phone: user.phone,\n      fullName: user.fullName,\n      dateOfBirth: user.dateOfBirth,\n      description: user.description,\n      profileImage: user.profileImage,\n      createdAt: user.createdAt,\n    });\n  } catch (error) {\n    console.error('Update profile error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.get('/search', authenticateToken, async (req, res) => {\n  try {\n    const { query } = req.query;\n    \n    console.log('🔍 Search request received:', { query, userId: req.user.id });\n    \n    if (!query || query.length < 2) {\n      console.log('❌ Query too short or missing');\n      return res.json([]);\n    }\n\n    const searchQuery = query.startsWith('@') ? query.substring(1) : query;\n    console.log('🔍 Processed search query:', searchQuery);\n    \n    const allUsers = await User.find({});\n    console.log(`📊 Total users in database: ${allUsers.length}`);\n    \n    const matchingUsers = allUsers\n      .filter(user => {\n        if (user._id.toString() === req.user.id.toString()) return false;\n        const lowerQuery = searchQuery.toLowerCase();\n        const username = user.username || '';\n        const fullName = user.fullName || '';\n        const phone = user.phone || '';\n        \n        const matches = (\n          username.toLowerCase().includes(lowerQuery) ||\n          fullName.toLowerCase().includes(lowerQuery) ||\n          phone.includes(searchQuery)\n        );\n        \n        if (matches) {\n          console.log(`✅ Match found: ${username} (${fullName})`);\n        }\n        \n        return matches;\n      })\n      .map(user => ({\n        id: user._id,\n        username: user.username,\n        fullName: user.fullName,\n        phone: user.phone,\n        description: user.description || '',\n        profileImage: user.profileImage || '',\n        publicKey: user.publicKey,\n        createdAt: user.createdAt,\n      }));\n\n    console.log(`✅ Returning ${matchingUsers.length} matching users`);\n    res.json(matchingUsers);\n  } catch (error) {\n    console.error('❌ Search users error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.get('/:username', authenticateToken, async (req, res) => {\n  try {\n    const { username } = req.params;\n    \n    const allUsers = await User.find({});\n    const user = allUsers.find(u => u.username === username);\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    res.json({\n      id: user._id,\n      username: user.username,\n      fullName: user.fullName,\n      description: user.description || '',\n      profileImage: user.profileImage || '',\n      publicKey: user.publicKey,\n      createdAt: user.createdAt,\n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.put('/theme', authenticateToken, async (req, res) => {\n  try {\n    const { theme } = req.body;\n    \n    if (!theme || !['light', 'dark'].includes(theme)) {\n      return res.status(400).json({ error: 'Invalid theme. Must be \"light\" or \"dark\"' });\n    }\n\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    user.themePreference = theme;\n    await user.save();\n\n    console.log(`✅ Updated theme preference for ${user.username} to ${theme}`);\n\n    res.json({ \n      success: true, \n      theme: user.themePreference \n    });\n  } catch (error) {\n    console.error('Update theme error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nexport default router;\n","size_bytes":8314},"client/src/components/AttachmentMenu.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { FileText, Camera, Image, Mic, MapPin, User, BarChart3, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface AttachmentMenuProps {\n  onClose: () => void;\n  onSendFile: (file: File, type: 'document' | 'image' | 'video' | 'audio') => void;\n  onSendLocation: (location: { latitude: number; longitude: number }) => void;\n  onSendContact: (contact: { name: string; phone: string; email?: string }) => void;\n  onSendPoll: (poll: { question: string; options: string[] }) => void;\n}\n\nexport default function AttachmentMenu({\n  onClose,\n  onSendFile,\n  onSendLocation,\n  onSendContact,\n  onSendPoll,\n}: AttachmentMenuProps) {\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [showContactForm, setShowContactForm] = useState(false);\n  const [showPollForm, setShowPollForm] = useState(false);\n  \n  const documentInputRef = useRef<HTMLInputElement>(null);\n  const galleryInputRef = useRef<HTMLInputElement>(null);\n  const cameraVideoRef = useRef<HTMLVideoElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n\n  useEffect(() => {\n    return () => {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        mediaRecorderRef.current.stop();\n      }\n      if (cameraVideoRef.current && cameraVideoRef.current.srcObject) {\n        const stream = cameraVideoRef.current.srcObject as MediaStream;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const handleDocumentClick = () => {\n    documentInputRef.current?.click();\n  };\n\n  const handleGalleryClick = () => {\n    galleryInputRef.current?.click();\n  };\n\n  const handleCameraClick = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      setIsCapturing(true);\n      if (cameraVideoRef.current) {\n        cameraVideoRef.current.srcObject = stream;\n        cameraVideoRef.current.play();\n      }\n    } catch (error) {\n      console.error('Failed to access camera:', error);\n      alert('Unable to access camera. Please check permissions.');\n    }\n  };\n\n  const capturePhoto = () => {\n    if (!cameraVideoRef.current) return;\n    \n    const canvas = document.createElement('canvas');\n    canvas.width = cameraVideoRef.current.videoWidth;\n    canvas.height = cameraVideoRef.current.videoHeight;\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(cameraVideoRef.current, 0, 0);\n      canvas.toBlob((blob) => {\n        if (blob) {\n          const file = new File([blob], `photo-${Date.now()}.jpg`, { type: 'image/jpeg' });\n          onSendFile(file, 'image');\n          stopCamera();\n          onClose();\n        }\n      }, 'image/jpeg', 0.95);\n    }\n  };\n\n  const stopCamera = () => {\n    if (cameraVideoRef.current && cameraVideoRef.current.srcObject) {\n      const stream = cameraVideoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      cameraVideoRef.current.srcObject = null;\n    }\n    setIsCapturing(false);\n  };\n\n  const handleAudioClick = async () => {\n    if (isRecording) {\n      mediaRecorderRef.current?.stop();\n      setIsRecording(false);\n    } else {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        // Prefer Opus in WebM, fall back to Ogg Opus if not supported.\n        let mimeType = '';\n        if (typeof (window as any).MediaRecorder?.isTypeSupported === 'function') {\n          if ((window as any).MediaRecorder.isTypeSupported('audio/webm;codecs=opus')) {\n            mimeType = 'audio/webm;codecs=opus';\n          } else if ((window as any).MediaRecorder.isTypeSupported('audio/ogg;codecs=opus')) {\n            mimeType = 'audio/ogg;codecs=opus';\n          } else if ((window as any).MediaRecorder.isTypeSupported('audio/webm')) {\n            mimeType = 'audio/webm';\n          }\n        }\n\n        const mediaRecorder = mimeType ? new MediaRecorder(stream, { mimeType }) : new MediaRecorder(stream);\n        mediaRecorderRef.current = mediaRecorder;\n        audioChunksRef.current = [];\n\n        mediaRecorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            audioChunksRef.current.push(event.data);\n          }\n        };\n\n        mediaRecorder.onstop = () => {\n          // Choose an appropriate blob type/extension based on the recorder's mimeType.\n          const recorderType = (mediaRecorder.mimeType || mimeType || '').split(';')[0] || 'audio/webm';\n          const ext = recorderType.includes('ogg') ? '.ogg' : (recorderType.includes('webm') ? '.webm' : '.webm');\n          const audioBlob = new Blob(audioChunksRef.current, { type: recorderType });\n          const file = new File([audioBlob], `audio-${Date.now()}${ext}`, { type: recorderType });\n          onSendFile(file, 'audio');\n          stream.getTracks().forEach(track => track.stop());\n          onClose();\n        };\n\n        mediaRecorder.start();\n        setIsRecording(true);\n      } catch (error) {\n        console.error('Failed to access microphone:', error);\n        alert('Unable to access microphone. Please check permissions.');\n      }\n    }\n  };\n\n  const handleLocationClick = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          onSendLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n          onClose();\n        },\n        (error) => {\n          console.error('Failed to get location:', error);\n          alert('Unable to access location. Please check permissions.');\n        }\n      );\n    } else {\n      alert('Geolocation is not supported by your browser.');\n    }\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>, type: 'document' | 'gallery') => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (type === 'document') {\n      onSendFile(file, 'document');\n    } else {\n      const fileType = file.type.startsWith('video/') ? 'video' : 'image';\n      onSendFile(file, fileType);\n    }\n    onClose();\n  };\n\n  if (showContactForm) {\n    return <ContactForm onSend={(contact) => {\n      onSendContact(contact);\n      onClose();\n    }} onCancel={() => setShowContactForm(false)} />;\n  }\n\n  if (showPollForm) {\n    return <PollForm onSend={(poll) => {\n      onSendPoll(poll);\n      onClose();\n    }} onCancel={() => setShowPollForm(false)} />;\n  }\n\n  if (isCapturing) {\n    return (\n      <div className=\"fixed inset-0 bg-black z-50 flex flex-col\" data-testid=\"camera-capture-view\">\n        <div className=\"flex-1 relative\">\n          <video ref={cameraVideoRef} className=\"w-full h-full object-cover\" />\n          <Button\n            onClick={stopCamera}\n            className=\"absolute top-4 right-4 bg-red-500 hover:bg-red-600\"\n            data-testid=\"button-close-camera\"\n          >\n            <X className=\"w-6 h-6\" />\n          </Button>\n        </div>\n        <div className=\"p-6 bg-gray-900 flex justify-center\">\n          <Button\n            onClick={capturePhoto}\n            className=\"w-16 h-16 rounded-full bg-white hover:bg-gray-200\"\n            data-testid=\"button-capture-photo\"\n          >\n            <Camera className=\"w-8 h-8 text-black\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-20 left-4 z-50\" data-testid=\"attachment-menu\">\n      <Card className=\"bg-gray-800 border-gray-700 p-4 w-72\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-white font-semibold\">Send Attachment</h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            data-testid=\"button-close-attachment\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-4\">\n          <AttachmentOption\n            icon={<FileText className=\"w-6 h-6 text-blue-400\" />}\n            label=\"Document\"\n            onClick={handleDocumentClick}\n            testId=\"option-document\"\n          />\n          <AttachmentOption\n            icon={<Camera className=\"w-6 h-6 text-pink-400\" />}\n            label=\"Camera\"\n            onClick={handleCameraClick}\n            testId=\"option-camera\"\n          />\n          <AttachmentOption\n            icon={<Image className=\"w-6 h-6 text-purple-400\" />}\n            label=\"Gallery\"\n            onClick={handleGalleryClick}\n            testId=\"option-gallery\"\n          />\n          <AttachmentOption\n            icon={<Mic className={`w-6 h-6 ${isRecording ? 'text-red-400 animate-pulse' : 'text-orange-400'}`} />}\n            label={isRecording ? \"Recording...\" : \"Audio\"}\n            onClick={handleAudioClick}\n            testId=\"option-audio\"\n          />\n          <AttachmentOption\n            icon={<MapPin className=\"w-6 h-6 text-green-400\" />}\n            label=\"Location\"\n            onClick={handleLocationClick}\n            testId=\"option-location\"\n          />\n          <AttachmentOption\n            icon={<User className=\"w-6 h-6 text-cyan-400\" />}\n            label=\"Contact\"\n            onClick={() => setShowContactForm(true)}\n            testId=\"option-contact\"\n          />\n          <AttachmentOption\n            icon={<BarChart3 className=\"w-6 h-6 text-yellow-400\" />}\n            label=\"Poll\"\n            onClick={() => setShowPollForm(true)}\n            testId=\"option-poll\"\n          />\n        </div>\n      </Card>\n\n      <input\n        ref={documentInputRef}\n        type=\"file\"\n        accept=\".pdf,.doc,.docx,.csv,.xlsx,.xls\"\n        onChange={(e) => handleFileChange(e, 'document')}\n        className=\"hidden\"\n        data-testid=\"input-document\"\n      />\n      <input\n        ref={galleryInputRef}\n        type=\"file\"\n        accept=\"image/*,video/*\"\n        onChange={(e) => handleFileChange(e, 'gallery')}\n        className=\"hidden\"\n        data-testid=\"input-gallery\"\n      />\n    </div>\n  );\n}\n\nfunction AttachmentOption({ icon, label, onClick, testId }: { \n  icon: React.ReactNode; \n  label: string; \n  onClick: () => void;\n  testId: string;\n}) {\n  return (\n    <button\n      onClick={onClick}\n      className=\"flex flex-col items-center gap-2 p-3 rounded-lg hover:bg-gray-700 transition-colors\"\n      data-testid={testId}\n    >\n      <div className=\"w-12 h-12 rounded-full bg-gray-700 flex items-center justify-center\">\n        {icon}\n      </div>\n      <span className=\"text-xs text-gray-300 text-center\">{label}</span>\n    </button>\n  );\n}\n\nfunction ContactForm({ onSend, onCancel }: {\n  onSend: (contact: { name: string; phone: string; email?: string }) => void;\n  onCancel: () => void;\n}) {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (name && phone) {\n      onSend({ name, phone, email: email || undefined });\n    }\n  };\n\n  return (\n    <Card className=\"fixed inset-4 z-50 bg-gray-800 border-gray-700 p-6 flex flex-col\" data-testid=\"contact-form\">\n      <h3 className=\"text-white text-lg font-semibold mb-4\">Send Contact</h3>\n      <form onSubmit={handleSubmit} className=\"flex-1 flex flex-col\">\n        <input\n          type=\"text\"\n          placeholder=\"Contact Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          className=\"bg-gray-700 text-white px-4 py-2 rounded mb-3\"\n          required\n          data-testid=\"input-contact-name\"\n        />\n        <input\n          type=\"tel\"\n          placeholder=\"Phone Number\"\n          value={phone}\n          onChange={(e) => setPhone(e.target.value)}\n          className=\"bg-gray-700 text-white px-4 py-2 rounded mb-3\"\n          required\n          data-testid=\"input-contact-phone\"\n        />\n        <input\n          type=\"email\"\n          placeholder=\"Email (optional)\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"bg-gray-700 text-white px-4 py-2 rounded mb-6\"\n          data-testid=\"input-contact-email\"\n        />\n        <div className=\"flex gap-3 mt-auto\">\n          <Button type=\"button\" onClick={onCancel} variant=\"outline\" className=\"flex-1\" data-testid=\"button-cancel-contact\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" className=\"flex-1 bg-swapgreen hover:bg-green-600\" data-testid=\"button-send-contact\">\n            Send\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n}\n\nfunction PollForm({ onSend, onCancel }: {\n  onSend: (poll: { question: string; options: string[] }) => void;\n  onCancel: () => void;\n}) {\n  const [question, setQuestion] = useState('');\n  const [options, setOptions] = useState(['', '']);\n\n  const addOption = () => {\n    if (options.length < 5) {\n      setOptions([...options, '']);\n    }\n  };\n\n  const updateOption = (index: number, value: string) => {\n    const newOptions = [...options];\n    newOptions[index] = value;\n    setOptions(newOptions);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const validOptions = options.filter(opt => opt.trim() !== '');\n    if (question && validOptions.length >= 2) {\n      onSend({ question, options: validOptions });\n    }\n  };\n\n  return (\n    <Card className=\"fixed inset-4 z-50 bg-gray-800 border-gray-700 p-6 flex flex-col\" data-testid=\"poll-form\">\n      <h3 className=\"text-white text-lg font-semibold mb-4\">Create Poll</h3>\n      <form onSubmit={handleSubmit} className=\"flex-1 flex flex-col\">\n        <input\n          type=\"text\"\n          placeholder=\"Poll Question\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n          className=\"bg-gray-700 text-white px-4 py-2 rounded mb-4\"\n          required\n          data-testid=\"input-poll-question\"\n        />\n        {options.map((option, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            placeholder={`Option ${index + 1}`}\n            value={option}\n            onChange={(e) => updateOption(index, e.target.value)}\n            className=\"bg-gray-700 text-white px-4 py-2 rounded mb-2\"\n            data-testid={`input-poll-option-${index}`}\n          />\n        ))}\n        {options.length < 5 && (\n          <Button\n            type=\"button\"\n            onClick={addOption}\n            variant=\"outline\"\n            className=\"mb-4\"\n            data-testid=\"button-add-poll-option\"\n          >\n            Add Option\n          </Button>\n        )}\n        <div className=\"flex gap-3 mt-auto\">\n          <Button type=\"button\" onClick={onCancel} variant=\"outline\" className=\"flex-1\" data-testid=\"button-cancel-poll\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" className=\"flex-1 bg-swapgreen hover:bg-green-600\" data-testid=\"button-send-poll\">\n            Send Poll\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n}\n","size_bytes":15155},"server/models/StoryView.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst storyViewSchema = new mongoose.Schema({\n  storyId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Story',\n    required: true,\n  },\n  viewerId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  viewerUsername: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  viewedAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n});\n\nstoryViewSchema.index({ storyId: 1, viewerId: 1 }, { unique: true });\nstoryViewSchema.index({ storyId: 1, viewedAt: -1 });\n\nexport default mongoose.model('StoryView', storyViewSchema);\n","size_bytes":765},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"design_guidelines.md":{"content":"# LockBlip - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Reference-Based with Custom Blockchain Identity\n\nDrawing inspiration from modern messaging platforms (Telegram's fluidity, Signal's security-first aesthetics) while creating a unique blockchain-focused identity. The design emphasizes trust, security, and technological innovation through visual language.\n\n**Core Principle:** Every visual element should reinforce the blockchain foundation - chain-linked interactions, cryptographic motifs, and immutable data visualization.\n\n---\n\n## Color Palette\n\n### Dark Mode (Primary)\n- **Background Gradient:** 11 16 32 → 27 31 58 (midnight gradient)\n- **Surface:** 20 25 45 (elevated cards)\n- **Surface Elevated:** 30 35 60 (chat bubbles, modals)\n\n### Brand Colors\n- **Primary (Swapgreen):** 165 85% 52% - Used for CTAs, active states, sender bubbles\n- **Secondary (Coral):** 0 100% 71% - System messages, alerts, important indicators\n- **Accent (Chain Blue):** 220 80% 60% - Links, blockchain indicators\n\n### Functional Colors\n- **Success:** 142 76% 45% (message delivered, chain validated)\n- **Warning:** 45 93% 58% (pending validation)\n- **Error:** 0 85% 65% (chain broken, invalid block)\n- **Text Primary:** 0 0% 95%\n- **Text Secondary:** 0 0% 70%\n- **Text Muted:** 0 0% 50%\n\n---\n\n## Typography\n\n**Font Families:**\n- **Primary:** 'Inter' (via Google Fonts) - UI, body text, chat messages\n- **Monospace:** 'JetBrains Mono' - Blockchain data, hashes, technical displays\n\n**Scale & Usage:**\n- Headings: font-bold, text-2xl to text-4xl\n- Body: font-normal, text-base\n- Chat Messages: text-sm to text-base\n- Technical Data: text-xs, font-mono\n- Timestamps: text-xs, text-muted\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24\n\n**Layout Structure:**\n- **Sidebar:** Fixed w-80, full height, chain status + contacts\n- **Chat Area:** Flex-1, messages container + input bar\n- **Message Bubbles:** max-w-md, rounded-2xl, p-4\n- **Input Bar:** Fixed bottom, h-16, backdrop-blur\n\n**Responsive Breakpoints:**\n- Mobile: Sidebar slides over (z-50)\n- Tablet: Sidebar collapsible\n- Desktop: Three-column (sidebar + chat + info panel)\n\n---\n\n## Component Library\n\n### Core UI Elements\n\n**Chat Bubbles (Frosted Glass):**\n- Sender: bg-swapgreen/10, backdrop-blur-xl, border-swapgreen/20\n- Receiver: bg-surface-elevated, backdrop-blur-xl, border-white/10\n- Rounded-2xl, drop-shadow-lg\n- Include: Lock icon (encrypted), checkmarks (validated), timestamp\n\n**Blockchain Indicators:**\n- **Chain Status Badge:** Animated gradient border, shows block count\n- **Hash Display:** Monospace, truncated with tooltip on hover\n- **Validation Checkmark:** Animated appearance (scale + fade)\n\n**Input Controls:**\n- **Message Input:** bg-surface, rounded-full, p-3, focus:ring-swapgreen\n- **Send Button:** Circular, bg-swapgreen, with ripple animation\n- **Attachment Button:** Icon-only, ghost style\n\n### Navigation\n\n**Sidebar Navigation:**\n- Contact list with avatar + last message preview\n- Active contact: bg-swapgreen/20, border-l-4 border-swapgreen\n- Search bar at top: backdrop-blur, rounded-lg\n\n**Top Bar:**\n- Contact info + blockchain status\n- Settings icon (top-right)\n- Network status indicator (animated pulse when syncing)\n\n### Forms & Inputs\n\n**Login/Register:**\n- Centered card, max-w-md\n- Gradient border effect\n- Key generation visualization (animated)\n\n**Settings Panel:**\n- Tabs: Profile, Security, Blockchain, Theme\n- Toggle switches with glow effect\n- Export chain button (prominent, with download icon)\n\n### Data Displays\n\n**Blockchain Ledger Viewer:**\n- Vertical timeline of blocks\n- Each block: Card with index, hash (truncated), timestamp\n- Visual chain connection (vertical line with nodes)\n- Expandable for full block details\n\n**Message Metadata:**\n- Encryption status badge\n- Block number link (opens ledger)\n- Delivery timestamp\n\n### Overlays & Modals\n\n**Key Generation Modal:**\n- Full-screen overlay, dark backdrop\n- Animated key visualization\n- Progress indicator\n- Security tips sidebar\n\n**Chain Validation Alert:**\n- Toast notification, top-right\n- Success: green with checkmark\n- Error: coral with warning icon\n- Auto-dismiss or user action\n\n---\n\n## Animations\n\n**Message Send Flow:**\n1. Input shake (prepare)\n2. Ripple effect from send button\n3. Bubble slides up with fade-in\n4. Encryption lock animation (rotate + glow)\n5. Chain link appears (connect to previous block)\n\n**Message Receive:**\n1. Notification pulse\n2. Bubble slides in from left\n3. Decrypt animation (unlock icon)\n4. Validation checkmark (scale bounce)\n\n**Blockchain Sync:**\n- Progress bar with gradient animation\n- Node connection visualization (pulsing dots)\n- Chain integrity check (scanning line effect)\n\n**Subtle Interactions:**\n- Hover: scale-105, brightness-110\n- Active: scale-95\n- Focus: ring-2, ring-swapgreen/50\n\n---\n\n## Images\n\n**Login/Landing Hero:**\n- Abstract blockchain visualization (connected nodes, glowing lines)\n- Dimensions: 1200x600px, gradient overlay\n- Position: Full-width background, centered content overlay\n\n**Empty States:**\n- No messages: Illustrated lock + chain icon, 400x300px\n- No contacts: People + blockchain graphic, 400x300px\n\n**Blockchain Ledger:**\n- Visual block icons (small, 48x48px) for each block type\n- System blocks, user messages, validation nodes\n\n---\n\n## Key Visual Differentiators\n\n1. **Chain Motif:** Subtle chain-link patterns in backgrounds\n2. **Cryptographic Elements:** Lock icons, key symbols, hash displays\n3. **Immutable Trail:** Visual history that can't be edited (strikethrough not allowed)\n4. **Security-First Color:** Swapgreen indicates verified/secure states\n5. **Glass Morphism:** Extensive use of backdrop-blur for depth\n6. **Monospace Technical Data:** All hashes, addresses use JetBrains Mono\n\n---\n\n## Accessibility\n\n- Maintain 4.5:1 contrast ratio for all text\n- Focus indicators: 2px ring, swapgreen color\n- Keyboard navigation: Full support with visible focus states\n- Screen reader: ARIA labels for blockchain status, encryption indicators\n- Color-blind friendly: Don't rely solely on color for validation status (use icons)","size_bytes":6127},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"server/lib/chatCrypto.js":{"content":"import crypto from 'crypto';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport ChatKeyPair from '../models/ChatKeyPair.js';\n\nexport function generateChatKeyPair() {\n  const keyPair = nacl.box.keyPair();\n  return {\n    publicKey: naclUtil.encodeBase64(keyPair.publicKey),\n    privateKey: naclUtil.encodeBase64(keyPair.secretKey),\n  };\n}\n\nexport async function getChatKeys(chatRoomId) {\n  let chatKeys = await ChatKeyPair.findOne({ chatRoomId });\n  \n  if (!chatKeys) {\n    const newKeys = generateChatKeyPair();\n    chatKeys = await ChatKeyPair.create({\n      chatRoomId,\n      publicKey: newKeys.publicKey,\n      privateKey: newKeys.privateKey,\n    });\n  }\n  \n  return {\n    publicKey: chatKeys.publicKey,\n    privateKey: chatKeys.privateKey,\n  };\n}\n\nexport function deriveSharedSecret(chatPrivateKey) {\n  const privateKeyUint8 = naclUtil.decodeBase64(chatPrivateKey);\n  return privateKeyUint8.slice(0, nacl.secretbox.keyLength);\n}\n\nexport function encryptWithChatKey(message, chatPublicKey, chatPrivateKey) {\n  try {\n    const sharedSecret = deriveSharedSecret(chatPrivateKey);\n    const messageUint8 = naclUtil.decodeUTF8(message);\n    const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);\n    \n    const encrypted = nacl.secretbox(messageUint8, nonce, sharedSecret);\n    \n    return JSON.stringify({\n      nonce: naclUtil.encodeBase64(nonce),\n      ciphertext: naclUtil.encodeBase64(encrypted),\n    });\n  } catch (error) {\n    console.error('Chat encryption error:', error);\n    throw error;\n  }\n}\n\nexport function decryptWithChatKey(encryptedPayload, chatPublicKey, chatPrivateKey) {\n  try {\n    const sharedSecret = deriveSharedSecret(chatPrivateKey);\n    const payload = JSON.parse(encryptedPayload);\n    const nonce = naclUtil.decodeBase64(payload.nonce);\n    const ciphertext = naclUtil.decodeBase64(payload.ciphertext);\n    \n    const decrypted = nacl.secretbox.open(ciphertext, nonce, sharedSecret);\n    \n    if (!decrypted) {\n      throw new Error('Decryption failed');\n    }\n    \n    return naclUtil.encodeUTF8(decrypted);\n  } catch (error) {\n    console.error('Chat decryption error:', error);\n    throw error;\n  }\n}\n\nexport function serverEncrypt(data) {\n  const key = process.env.ENCRYPTION_MASTER_KEY || 'default-dev-key-min-32-chars-long';\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key.slice(0, 32)), iv);\n  \n  let encrypted = cipher.update(data, 'utf8', 'base64');\n  encrypted += cipher.final('base64');\n  \n  return JSON.stringify({\n    iv: iv.toString('base64'),\n    data: encrypted,\n  });\n}\n\nexport function serverDecrypt(encryptedPayload) {\n  const key = process.env.ENCRYPTION_MASTER_KEY || 'default-dev-key-min-32-chars-long';\n  const payload = JSON.parse(encryptedPayload);\n  const iv = Buffer.from(payload.iv, 'base64');\n  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key.slice(0, 32)), iv);\n  \n  let decrypted = decipher.update(payload.data, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n}\n\nexport function calculateMessageHash(chatRoomId, senderId, receiverId, messageType, encryptedMessage, timestamp, previousHash) {\n  const data = `${chatRoomId}${senderId}${receiverId}${messageType}${encryptedMessage}${timestamp}${previousHash}`;\n  return crypto.createHash('sha256').update(data).digest('hex');\n}\n\nexport async function getPreviousMessageHash(chatRoomId) {\n  const Chat = (await import('../models/Chat.js')).default;\n  const lastMessage = await Chat.findOne({ chatRoomId }).sort({ timestamp: -1, _id: -1 });\n  return lastMessage?.hash || '0';\n}\n\nexport async function encryptMessageWithChatKeys(message, chatRoomId) {\n  const chatKeys = await getChatKeys(chatRoomId);\n  \n  const chatEncrypted = encryptWithChatKey(message, chatKeys.publicKey, chatKeys.privateKey);\n  \n  const serverEncrypted = serverEncrypt(chatEncrypted);\n  \n  return {\n    encryptedMessage: serverEncrypted,\n    chatPublicKey: chatKeys.publicKey,\n    chatPrivateKey: chatKeys.privateKey,\n  };\n}\n\nexport async function decryptMessageWithChatKeys(encryptedMessage, chatPublicKey, chatPrivateKey) {\n  const chatEncrypted = serverDecrypt(encryptedMessage);\n  \n  const originalMessage = decryptWithChatKey(chatEncrypted, chatPublicKey, chatPrivateKey);\n  \n  return originalMessage;\n}\n","size_bytes":4330},"server/index.ts":{"content":"import './index-main.js';\n","size_bytes":26},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 6% 98%;\n\n  --foreground: 210 6% 12%;\n\n  --border: 210 6% 88%;\n\n  --card: 210 6% 96%;\n\n  --card-foreground: 210 6% 14%;\n\n  --card-border: 210 6% 90%;\n\n  --sidebar: 210 6% 94%;\n\n  --sidebar-foreground: 210 6% 16%;\n\n  --sidebar-border: 210 6% 87%;\n\n  --sidebar-primary: 165 85% 42%;\n\n  --sidebar-primary-foreground: 165 85% 98%;\n\n  --sidebar-accent: 210 8% 88%;\n\n  --sidebar-accent-foreground: 210 8% 18%;\n\n  --sidebar-ring: 165 85% 42%;\n\n  --popover: 210 6% 92%;\n\n  --popover-foreground: 210 6% 18%;\n\n  --popover-border: 210 6% 86%;\n\n  --primary: 165 85% 42%;\n\n  --primary-foreground: 165 85% 98%;\n\n  --secondary: 210 8% 86%;\n\n  --secondary-foreground: 210 8% 20%;\n\n  --muted: 210 8% 90%;\n\n  --muted-foreground: 210 8% 40%;\n\n  --accent: 220 12% 88%;\n\n  --accent-foreground: 220 12% 22%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 85% 98%;\n\n  --input: 210 6% 75%;\n  --ring: 165 85% 42%;\n  --chart-1: 165 85% 42%;\n  --chart-2: 0 100% 71%;\n  --chart-3: 220 80% 60%;\n  --chart-4: 142 76% 45%;\n  --chart-5: 45 93% 58%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 10% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 10% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(210 10% 15% / 0.06), 0px 1px 2px -1px hsl(210 10% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(210 10% 15% / 0.08), 0px 2px 4px -2px hsl(210 10% 15% / 0.05);\n  --shadow-md: 0px 6px 8px -2px hsl(210 10% 15% / 0.1), 0px 4px 6px -2px hsl(210 10% 15% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 10% 15% / 0.12), 0px 4px 6px -4px hsl(210 10% 15% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 10% 15% / 0.14), 0px 8px 10px -6px hsl(210 10% 15% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 10% 15% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 28% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 20% 20%;\n\n  --card: 220 25% 18%;\n\n  --card-foreground: 0 0% 90%;\n\n  --card-border: 220 22% 22%;\n\n  --sidebar: 220 26% 14%;\n\n  --sidebar-foreground: 0 0% 88%;\n\n  --sidebar-border: 220 24% 18%;\n\n  --sidebar-primary: 165 85% 52%;\n\n  --sidebar-primary-foreground: 165 85% 98%;\n\n  --sidebar-accent: 220 20% 22%;\n\n  --sidebar-accent-foreground: 0 0% 85%;\n\n  --sidebar-ring: 165 85% 52%;\n\n  --popover: 220 22% 16%;\n\n  --popover-foreground: 0 0% 86%;\n\n  --popover-border: 220 20% 24%;\n\n  --primary: 165 85% 52%;\n\n  --primary-foreground: 165 85% 98%;\n\n  --secondary: 0 100% 71%;\n\n  --secondary-foreground: 0 100% 98%;\n\n  --muted: 220 16% 24%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 220 80% 60%;\n\n  --accent-foreground: 220 80% 98%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 85% 98%;\n\n  --input: 220 18% 35%;\n  --ring: 165 85% 45%;\n  --chart-1: 165 85% 55%;\n  --chart-2: 0 100% 75%;\n  --chart-3: 220 80% 65%;\n  --chart-4: 142 76% 55%;\n  --chart-5: 45 93% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 40% 5% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 40% 5% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 40% 5% / 0.2), 0px 1px 2px -1px hsl(220 40% 5% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(220 40% 5% / 0.3), 0px 2px 4px -2px hsl(220 40% 5% / 0.2);\n  --shadow-md: 0px 6px 8px -2px hsl(220 40% 5% / 0.35), 0px 4px 6px -2px hsl(220 40% 5% / 0.25);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 40% 5% / 0.4), 0px 4px 6px -4px hsl(220 40% 5% / 0.3);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 40% 5% / 0.45), 0px 8px 10px -6px hsl(220 40% 5% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 40% 5% / 0.5);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11236},"server/routes/blockchain.js":{"content":"import express from 'express';\nimport { getUserBlockchain, validateChain } from '../lib/blockchain.js';\nimport { authenticateToken } from '../middleware/auth.js';\n\nconst router = express.Router();\n\nrouter.get('/ledger', authenticateToken, async (req, res) => {\n  try {\n    const blocks = await getUserBlockchain(req.user.username);\n    res.json(blocks);\n  } catch (error) {\n    console.error('Get ledger error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.get('/validate', authenticateToken, async (req, res) => {\n  try {\n    const validation = await validateChain();\n    res.json(validation);\n  } catch (error) {\n    console.error('Validate chain error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nexport default router;\n","size_bytes":784},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/lib/emailService.js":{"content":"import nodemailer from 'nodemailer';\n\nfunction getTransporter() {\n  const hasSmtpConfig = process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS;\n  const hasEmailConfig = hasSmtpConfig || (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD);\n  \n  if (!hasEmailConfig) {\n    return null;\n  }\n  \n  if (hasSmtpConfig) {\n    return nodemailer.createTransport({\n      host: process.env.SMTP_HOST,\n      port: process.env.SMTP_PORT ? parseInt(process.env.SMTP_PORT, 10) : 587,\n      secure: process.env.SMTP_SECURE === 'true',\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASS,\n      },\n    });\n  } else if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {\n    return nodemailer.createTransport({\n      service: process.env.EMAIL_SERVICE || 'gmail',\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_PASSWORD,\n      },\n    });\n  }\n  \n  return null;\n}\n\nexport async function sendOTPEmail(email, otp) {\n  const transporter = getTransporter();\n  \n  if (!transporter) {\n    console.log(`📧 DEVELOPMENT MODE - OTP would be sent to ${email} (SMTP not configured)`);\n    return true;\n  }\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject: 'LockBlip - Email Verification OTP',\n    html: `\n      <div style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; max-width:600px; margin:0 auto; color:#111;\">\n        <table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"background:#f6f7fb; padding:30px 0;\">\n          <tr>\n            <td align=\"center\">\n              <table role=\"presentation\" width=\"600\" style=\"background:#ffffff; border-radius:8px; overflow:hidden; box-shadow:0 6px 18px rgba(32,33,36,0.08);\">\n                <tr style=\"background:linear-gradient(90deg,#5865F2,#1877F2);\">\n                  <td style=\"padding:18px 24px; color:#fff;\">\n                    <div style=\"display:flex; align-items:center; gap:12px;\">\n                      <div style=\"width:40px; height:40px; background:rgba(255,255,255,0.12); border-radius:8px; display:flex; align-items:center; justify-content:center; font-weight:700;\">S</div>\n                      <div style=\"font-size:18px; font-weight:700;\">LockBlip</div>\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"padding:28px 36px;\">\n                    <h2 style=\"margin:0 0 8px 0; font-size:20px; color:#0f172a;\">Verify your email</h2>\n                    <p style=\"margin:0 0 18px 0; color:#475569;\">Use the code below to confirm your email address. This code will expire in 10 minutes.</p>\n\n                    <div style=\"margin:20px 0; text-align:center;\">\n                      <div style=\"display:inline-block; background:#f4f6ff; border-radius:10px; padding:18px 28px; font-size:28px; letter-spacing:6px; font-weight:700; color:#111;\">${otp}</div>\n                    </div>\n\n                    <p style=\"margin:8px 0 18px 0; color:#64748b; font-size:13px;\">If you didn't request this, you can safely ignore this email.</p>\n\n                    <div style=\"text-align:center; margin-top:6px;\">\n                      <a href=\"#\" style=\"display:inline-block; background:#5865F2; color:#fff; padding:10px 18px; border-radius:8px; text-decoration:none; font-weight:600;\">Open LockBlip</a>\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"padding:16px 36px; background:#f8fafc; font-size:12px; color:#94a3b8;\">\n                    <div>© ${new Date().getFullYear()} LockBlip — Built with care</div>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </div>\n    `,\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log(`✓ OTP email sent successfully to ${email}`);\n    return true;\n  } catch (error) {\n    console.error('Email send error:', error);\n    return false;\n  }\n}\n\nexport async function sendIPAuthorizationEmail(email, username, ip, authUrl) {\n  const transporter = getTransporter();\n  \n  if (!transporter) {\n    console.log('\\n===========================================');\n    console.log('📧 DEVELOPMENT MODE - IP AUTHORIZATION EMAIL');\n    console.log('===========================================');\n    console.log(`To: ${email}`);\n    console.log(`Username: ${username}`);\n    console.log(`IP: ${ip}`);\n    console.log(`Authorization URL: ${authUrl}`);\n    console.log('===========================================\\n');\n    return true;\n  }\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject: 'LockBlip - New Login Detected',\n    html: `\n      <div style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; max-width:600px; margin:0 auto; color:#111;\">\n        <table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"background:#f6f7fb; padding:30px 0;\">\n          <tr>\n            <td align=\"center\">\n              <table role=\"presentation\" width=\"600\" style=\"background:#fff; border-radius:8px; overflow:hidden; box-shadow:0 6px 18px rgba(32,33,36,0.08);\">\n                <tr style=\"background:linear-gradient(90deg,#5865F2,#1877F2);\">\n                  <td style=\"padding:14px 20px; color:#fff;\">\n                    <div style=\"display:flex; align-items:center; gap:10px;\"><div style=\"width:36px; height:36px; background:rgba(255,255,255,0.12); border-radius:8px; display:flex; align-items:center; justify-content:center; font-weight:700;\">S</div><div style=\"font-size:16px; font-weight:700;\">LockBlip</div></div>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"padding:22px 30px;\">\n                    <h3 style=\"margin:0 0 8px 0; font-size:18px; color:#0f172a;\">New sign-in attempt</h3>\n                    <p style=\"margin:0 0 14px 0; color:#475569;\">Hi <strong>${username}</strong>, we detected a login attempt from a new device or IP address.</p>\n\n                    <div style=\"background:#f8fafc; border-radius:8px; padding:12px; margin-bottom:16px;\">\n                      <div style=\"font-size:14px; color:#334155;\"><strong>IP Address:</strong> ${ip}</div>\n                      <div style=\"font-size:13px; color:#64748b;\"><strong>Time:</strong> ${new Date().toLocaleString()}</div>\n                    </div>\n\n                    <p style=\"margin:0 0 18px 0; color:#475569;\">If this was you, authorize this device by clicking below. If it wasn't you, secure your account immediately.</p>\n\n                    <div style=\"text-align:center; margin-top:8px;\">\n                      <a href=\"${authUrl}\" style=\"display:inline-block; background:#1877F2; color:#fff; padding:10px 18px; border-radius:8px; text-decoration:none; font-weight:600;\">Authorize This Device</a>\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"padding:14px 30px; background:#f8fafc; font-size:12px; color:#94a3b8;\">\n                    <div>If you didn't try to sign in, please change your password and enable two-factor authentication.</div>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n        </table>\n      </div>\n    `,\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log(`✓ IP Authorization email sent successfully to ${email}`);\n    return true;\n  } catch (error) {\n    console.error('IP Authorization email error:', error);\n    return false;\n  }\n}\n","size_bytes":7654},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/models/IPAuthorization.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst ipAuthSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    set: encryptField,\n    get: decryptField,\n  },\n  ip: {\n    type: String,\n    required: true,\n  },\n  token: {\n    type: String,\n    required: true,\n  },\n  userAgent: String,\n  authorized: {\n    type: Boolean,\n    default: false,\n  },\n  expiresAt: {\n    type: Date,\n    required: true,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n    expires: 3600,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n});\n\nexport default mongoose.model('IPAuthorization', ipAuthSchema);\n","size_bytes":701},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"mongodb0cshmee.js":{"content":"import dotenv from 'dotenv';\ndotenv.config();\n\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport { calculateHash } from './server/lib/blockchain.js';\nimport { encryptField } from './server/lib/encryption.js';\n\nasync function main() {\n  const uri = process.env.MONGODB_URI;\n  if (!uri) {\n    console.error('MONGODB_URI not set in environment. Aborting.');\n    process.exit(1);\n  }\n\n  console.log('Connecting to MongoDB...');\n  await mongoose.connect(uri, { dbName: new URL(uri).pathname.replace('/', '') || undefined });\n  const db = mongoose.connection.db;\n\n  console.log('Connected. Ensuring collections and indexes...');\n\n  // Ensure collections exist\n  const collections = await db.listCollections().toArray();\n  const names = collections.map(c => c.name);\n\n  if (!names.includes('blocks')) {\n    await db.createCollection('blocks');\n    console.log('Created collection: blocks');\n  }\n  if (!names.includes('users')) {\n    await db.createCollection('users');\n    console.log('Created collection: users');\n  }\n  if (!names.includes('otps')) {\n    await db.createCollection('otps');\n    console.log('Created collection: otps');\n  }\n  if (!names.includes('ipauthorizations')) {\n    await db.createCollection('ipauthorizations');\n    console.log('Created collection: ipauthorizations');\n  }\n\n  // Indexes for blocks\n  try {\n    await db.collection('blocks').createIndex({ hash: 1 }, { unique: true });\n    await db.collection('blocks').createIndex({ index: 1 });\n    console.log('Ensured indexes on blocks');\n  } catch (err) {\n    console.warn('Error creating block indexes (maybe already exist):', err.message);\n  }\n\n  // Create genesis block if none\n  const blockCount = await db.collection('blocks').countDocuments();\n  if (blockCount === 0) {\n    const timestamp = new Date().toISOString();\n    const hash = calculateHash(0, timestamp, 'system', 'all', 'Genesis Block', '0');\n    const genesis = {\n      index: 0,\n      timestamp,\n      from: encryptField('system'),\n      to: encryptField('all'),\n      payload: encryptField('Genesis Block'),\n      prevHash: '0',\n      hash,\n      createdAt: new Date()\n    };\n    await db.collection('blocks').insertOne(genesis);\n    console.log('Inserted genesis block');\n  } else {\n    console.log('Blocks collection already has documents:', blockCount);\n  }\n\n  // Create a sample admin user if none\n  const userCount = await db.collection('users').countDocuments();\n  if (userCount === 0) {\n    const passwordPlain = 'ChangeMe123!';\n    const hashed = await bcrypt.hash(passwordPlain, 12);\n    const admin = {\n      username: 'admin',\n      email: encryptField('admin@example.com'),\n      phone: encryptField('+10000000000'),\n      fullName: encryptField('Admin User'),\n      dateOfBirth: encryptField('1990-01-01'),\n      password: hashed,\n      publicKey: '',\n      privateKey: encryptField(''),\n      authorizedIPs: [],\n      isVerified: true,\n      createdAt: new Date()\n    };\n    await db.collection('users').insertOne(admin);\n    console.log('Inserted sample admin user (username: admin, password: ChangeMe123!)');\n  } else {\n    console.log('Users collection already has documents:', userCount);\n  }\n\n  // Create a test OTP for admin@example.com with long expiry\n  const otpEmail = 'admin@example.com';\n  const otpValue = '999999';\n  const expiresAt = new Date(Date.now() + 1000 * 60 * 60); // 1 hour\n  await db.collection('otps').insertOne({\n    email: encryptField(otpEmail),\n    otp: otpValue,\n    expiresAt,\n    verified: false,\n    createdAt: new Date()\n  });\n  console.log(`Inserted test OTP for ${otpEmail} (value: ${otpValue}, expires in 1 hour)`);\n\n  // Print counts\n  const counts = {\n    blocks: await db.collection('blocks').countDocuments(),\n    users: await db.collection('users').countDocuments(),\n    otps: await db.collection('otps').countDocuments(),\n    ipauthorizations: await db.collection('ipauthorizations').countDocuments()\n  };\n  console.log('Collection counts:', counts);\n\n  await mongoose.disconnect();\n  console.log('Done. Disconnected.');\n}\n\nmain().catch(err => {\n  console.error('Error running mongodb0cshmee.js:', err);\n  process.exit(1);\n});\n","size_bytes":4145},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/examples/BlockItem.tsx":{"content":"import BlockItem from '../BlockItem';\n\nexport default function BlockItemExample() {\n  return (\n    <div className=\"p-6 bg-background space-y-0 max-w-2xl\">\n      <BlockItem\n        index={0}\n        hash=\"0000000000000000000000000000000000000000000000000000000000000000\"\n        prevHash=\"0\"\n        timestamp=\"2025-01-01 00:00:00\"\n        from=\"system\"\n        to=\"all\"\n        payload=\"Genesis Block\"\n      />\n      <BlockItem\n        index={1}\n        hash=\"a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2\"\n        prevHash=\"0000000000000000000000000000000000000000000000000000000000000000\"\n        timestamp=\"2025-01-01 10:30:15\"\n        from=\"alice\"\n        to=\"bob\"\n        payload=\"Hello Bob! This is a blockchain message.\"\n      />\n      <BlockItem\n        index={2}\n        hash=\"f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2\"\n        prevHash=\"a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2\"\n        timestamp=\"2025-01-01 10:31:42\"\n        from=\"bob\"\n        to=\"alice\"\n        payload=\"Hi Alice! The chain is working perfectly.\"\n      />\n    </div>\n  );\n}\n","size_bytes":1120},"client/src/components/examples/BlockchainStatus.tsx":{"content":"import BlockchainStatus from '../BlockchainStatus';\n\nexport default function BlockchainStatusExample() {\n  return (\n    <div className=\"p-6 space-y-4 bg-background\">\n      <BlockchainStatus blockCount={42} isValid={true} />\n      <BlockchainStatus blockCount={43} isValidating={true} />\n      <BlockchainStatus blockCount={44} isValid={false} />\n    </div>\n  );\n}\n","size_bytes":364},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { GoogleLogin } from '@react-oauth/google';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Loader2, AlertCircle, Mail, KeyRound } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface LoginFormProps {\n  onSuccess: (token: string, user: any) => void;\n}\n\nexport default function LoginForm({ onSuccess }: LoginFormProps) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGoogleLoading, setIsGoogleLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [ipAuthRequired, setIpAuthRequired] = useState(false);\n  \n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [forgotEmail, setForgotEmail] = useState(\"\");\n  const [forgotError, setForgotError] = useState(\"\");\n  const [forgotSuccess, setForgotSuccess] = useState(\"\");\n  const [isForgotLoading, setIsForgotLoading] = useState(false);\n  \n  const [showResetPassword, setShowResetPassword] = useState(false);\n  const [resetOtp, setResetOtp] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [resetError, setResetError] = useState(\"\");\n  const [resetSuccess, setResetSuccess] = useState(\"\");\n  const [isResetLoading, setIsResetLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n    setError(\"\");\n    setIpAuthRequired(false);\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        username,\n        password,\n      });\n\n      const data = await response.json();\n      \n      console.log('✅ Login successful');\n      console.log('User data from server:', data.user);\n      console.log('PrivateKey exists in response:', !!data.user.privateKey);\n      console.log('PublicKey exists in response:', !!data.user.publicKey);\n      \n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      localStorage.setItem('privateKey', data.user.privateKey);\n      \n      console.log('✅ Stored user data in localStorage');\n      \n      onSuccess(data.token, data.user);\n    } catch (err: any) {\n      const errorMessage = err.message || \"\";\n      if (errorMessage.includes('IP_AUTHORIZATION_REQUIRED') || errorMessage.includes('New device detected')) {\n        setIpAuthRequired(true);\n        setError(\"New device detected. Check your email to authorize this device.\");\n      } else {\n        setError(err.message || \"Invalid credentials\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsForgotLoading(true);\n    setForgotError(\"\");\n    setForgotSuccess(\"\");\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/forgot-password', {\n        email: forgotEmail,\n      });\n\n      const data = await response.json();\n      setForgotSuccess(data.message || \"Password reset code sent to your email\");\n      setTimeout(() => {\n        setShowForgotPassword(false);\n        setShowResetPassword(true);\n        setForgotSuccess(\"\");\n      }, 2000);\n    } catch (err: any) {\n      setForgotError(err.message || \"Failed to send reset code\");\n    } finally {\n      setIsForgotLoading(false);\n    }\n  };\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!forgotEmail || !forgotEmail.trim()) {\n      setResetError(\"Email address is missing. Please start over.\");\n      return;\n    }\n\n    if (newPassword !== confirmPassword) {\n      setResetError(\"Passwords do not match\");\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      setResetError(\"Password must be at least 6 characters\");\n      return;\n    }\n\n    setIsResetLoading(true);\n    setResetError(\"\");\n    setResetSuccess(\"\");\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/reset-password', {\n        email: forgotEmail.trim(),\n        otp: resetOtp,\n        newPassword,\n      });\n\n      const data = await response.json();\n      setResetSuccess(data.message || \"Password reset successfully\");\n      setTimeout(() => {\n        setShowResetPassword(false);\n        setResetOtp(\"\");\n        setNewPassword(\"\");\n        setConfirmPassword(\"\");\n        setForgotEmail(\"\");\n        setResetSuccess(\"\");\n      }, 2000);\n    } catch (err: any) {\n      setResetError(err.message || \"Failed to reset password\");\n    } finally {\n      setIsResetLoading(false);\n    }\n  };\n\n  const handleGoogleSuccess = async (credentialResponse: any) => {\n    try {\n      setIsGoogleLoading(true);\n      setError(\"\");\n      const response = await apiRequest('POST', '/api/auth/google', {\n        credential: credentialResponse.credential,\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.user) {\n        localStorage.setItem('user', JSON.stringify(data.user));\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('privateKey', data.user.privateKey);\n        onSuccess(data.token, data.user);\n      } else {\n        setError(data.error || 'Failed to authenticate with Google');\n      }\n    } catch (error: any) {\n      console.error('Google login error:', error);\n      const errorMessage = error.message || \"\";\n      if (errorMessage.includes('IP_NOT_AUTHORIZED') || errorMessage.includes('New device detected')) {\n        setIpAuthRequired(true);\n        setError(\"New device detected. Check your email to authorize this device.\");\n      } else {\n        setError('Failed to authenticate with Google');\n      }\n    } finally {\n      setIsGoogleLoading(false);\n    }\n  };\n\n  const handleGoogleError = () => {\n    setError('Google authentication failed');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleLogin} className=\"space-y-4\">\n        {error && (\n          <Alert variant={ipAuthRequired ? \"default\" : \"destructive\"} data-testid=\"alert-error\">\n            {ipAuthRequired ? (\n              <Mail className=\"h-4 w-4 text-primary\" />\n            ) : (\n              <AlertCircle className=\"h-4 w-4\" />\n            )}\n            <AlertDescription className={ipAuthRequired ? \"text-primary\" : \"\"}>\n              {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"login-username\">Username</Label>\n          <Input\n            id=\"login-username\"\n            type=\"text\"\n            value={username}\n            onChange={(e) => {\n              setUsername(e.target.value);\n              setError(\"\");\n            }}\n            placeholder=\"Enter your username\"\n            required\n            disabled={isLoading}\n            data-testid=\"input-login-username\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"login-password\">Password</Label>\n          <Input\n            id=\"login-password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => {\n              setPassword(e.target.value);\n              setError(\"\");\n            }}\n            placeholder=\"Enter your password\"\n            required\n            disabled={isLoading}\n            data-testid=\"input-login-password\"\n          />\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isLoading}\n          data-testid=\"button-login\"\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Logging in...\n            </>\n          ) : (\n            \"Login\"\n          )}\n        </Button>\n\n        {ipAuthRequired && (\n          <div className=\"bg-primary/10 border border-primary/50 rounded-md p-4 text-sm\">\n            <p className=\"font-semibold text-primary mb-1\">New Device Detected</p>\n            <p className=\"text-muted-foreground\">\n              For security, we've sent an authorization link to your email. Click the link to authorize this device, then try logging in again.\n            </p>\n          </div>\n        )}\n\n        <div className=\"relative my-4\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t border-muted\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n          </div>\n        </div>\n\n        <div className=\"flex justify-center\" data-testid=\"google-login-button\">\n          {isGoogleLoading ? (\n            <Button disabled className=\"w-full\">\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Signing in with Google...\n            </Button>\n          ) : (\n            <GoogleLogin\n              onSuccess={handleGoogleSuccess}\n              onError={handleGoogleError}\n              size=\"large\"\n              width=\"400\"\n              text=\"signin_with\"\n            />\n          )}\n        </div>\n\n        <div className=\"text-center mt-4\">\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            className=\"text-sm text-primary hover:underline p-0 h-auto\"\n            onClick={() => setShowForgotPassword(true)}\n            data-testid=\"link-forgot-password\"\n          >\n            Forgot password?\n          </Button>\n        </div>\n      </form>\n\n      <Dialog open={showForgotPassword} onOpenChange={setShowForgotPassword}>\n        <DialogContent data-testid=\"dialog-forgot-password\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <KeyRound className=\"h-5 w-5\" />\n              Forgot Password\n            </DialogTitle>\n            <DialogDescription>\n              Enter your email address and we'll send you a code to reset your password.\n            </DialogDescription>\n          </DialogHeader>\n\n          <form onSubmit={handleForgotPassword} className=\"space-y-4 mt-4\">\n            {forgotError && (\n              <Alert variant=\"destructive\" data-testid=\"alert-forgot-error\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{forgotError}</AlertDescription>\n              </Alert>\n            )}\n\n            {forgotSuccess && (\n              <Alert data-testid=\"alert-forgot-success\">\n                <Mail className=\"h-4 w-4 text-primary\" />\n                <AlertDescription className=\"text-primary\">{forgotSuccess}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"forgot-email\">Email Address</Label>\n              <Input\n                id=\"forgot-email\"\n                type=\"email\"\n                value={forgotEmail}\n                onChange={(e) => setForgotEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                required\n                disabled={isForgotLoading}\n                data-testid=\"input-forgot-email\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isForgotLoading}\n              data-testid=\"button-send-reset-code\"\n            >\n              {isForgotLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                \"Send Reset Code\"\n              )}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={showResetPassword} onOpenChange={setShowResetPassword}>\n        <DialogContent data-testid=\"dialog-reset-password\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <KeyRound className=\"h-5 w-5\" />\n              Reset Password\n            </DialogTitle>\n            <DialogDescription>\n              Enter the 6-digit code sent to your email and your new password.\n            </DialogDescription>\n          </DialogHeader>\n\n          <form onSubmit={handleResetPassword} className=\"space-y-4 mt-4\">\n            {resetError && (\n              <Alert variant=\"destructive\" data-testid=\"alert-reset-error\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{resetError}</AlertDescription>\n              </Alert>\n            )}\n\n            {resetSuccess && (\n              <Alert data-testid=\"alert-reset-success\">\n                <Mail className=\"h-4 w-4 text-primary\" />\n                <AlertDescription className=\"text-primary\">{resetSuccess}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reset-otp\">Verification Code</Label>\n              <Input\n                id=\"reset-otp\"\n                type=\"text\"\n                value={resetOtp}\n                onChange={(e) => setResetOtp(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                placeholder=\"Enter 6-digit code\"\n                maxLength={6}\n                required\n                disabled={isResetLoading}\n                data-testid=\"input-reset-otp\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"new-password\">New Password</Label>\n              <Input\n                id=\"new-password\"\n                type=\"password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                placeholder=\"Enter new password\"\n                required\n                disabled={isResetLoading}\n                data-testid=\"input-new-password\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n              <Input\n                id=\"confirm-password\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                placeholder=\"Confirm new password\"\n                required\n                disabled={isResetLoading}\n                data-testid=\"input-confirm-password\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isResetLoading}\n              data-testid=\"button-reset-password\"\n            >\n              {isResetLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Resetting...\n                </>\n              ) : (\n                \"Reset Password\"\n              )}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":15110},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/BlockItem.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { ChevronDown, ChevronRight, Link2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BlockItemProps {\n  index: number;\n  hash: string;\n  prevHash: string;\n  timestamp: string;\n  from: string;\n  to: string;\n  payload?: string;\n}\n\nexport default function BlockItem({\n  index,\n  hash,\n  prevHash,\n  timestamp,\n  from,\n  to,\n  payload,\n}: BlockItemProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const truncateHash = (hash: string) => {\n    return `${hash.slice(0, 8)}...${hash.slice(-8)}`;\n  };\n\n  return (\n    <div className=\"relative\" data-testid={`block-item-${index}`}>\n      {index > 0 && (\n        <div className=\"absolute left-4 -top-3 h-3 w-px bg-primary/30\" />\n      )}\n      \n      <Card className=\"p-4 hover-elevate cursor-pointer\" onClick={() => setIsExpanded(!isExpanded)}>\n        <div className=\"flex items-start gap-3\">\n          <div className=\"flex-shrink-0 h-8 w-8 rounded-full bg-primary/20 flex items-center justify-center\">\n            <span className=\"text-xs font-mono font-bold text-primary\">\n              {index}\n            </span>\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Block #{index}</span>\n                {index > 0 && <Link2 className=\"h-3 w-3 text-primary\" />}\n              </div>\n              <span className=\"text-xs text-muted-foreground\">{timestamp}</span>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-muted-foreground\">Hash:</span>\n                <code className=\"text-xs font-mono bg-muted/50 px-1.5 py-0.5 rounded\">\n                  {truncateHash(hash)}\n                </code>\n              </div>\n              \n              {isExpanded && (\n                <div className=\"space-y-2 mt-3 pt-3 border-t border-border\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-muted-foreground\">Prev Hash:</span>\n                    <code className=\"text-xs font-mono bg-muted/50 px-1.5 py-0.5 rounded\">\n                      {prevHash === \"0\" ? \"Genesis\" : truncateHash(prevHash)}\n                    </code>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-muted-foreground\">From:</span>\n                    <span className=\"text-xs font-medium\">{from}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xs text-muted-foreground\">To:</span>\n                    <span className=\"text-xs font-medium\">{to}</span>\n                  </div>\n                  {payload && (\n                    <div className=\"mt-2\">\n                      <span className=\"text-xs text-muted-foreground block mb-1\">Payload:</span>\n                      <p className=\"text-xs bg-muted/50 p-2 rounded\">{payload}</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <button\n            className=\"flex-shrink-0 text-muted-foreground hover:text-foreground transition-colors\"\n            data-testid={`button-expand-${index}`}\n          >\n            {isExpanded ? (\n              <ChevronDown className=\"h-4 w-4\" />\n            ) : (\n              <ChevronRight className=\"h-4 w-4\" />\n            )}\n          </button>\n        </div>\n      </Card>\n      \n      {index < 999 && (\n        <div className=\"absolute left-4 bottom-0 h-3 w-px bg-primary/30\" />\n      )}\n    </div>\n  );\n}\n","size_bytes":3883},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/routes/auth.js":{"content":"import express from 'express';\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport requestIp from 'request-ip';\nimport { OAuth2Client } from 'google-auth-library';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport User from '../models/User.js';\nimport OTP from '../models/OTP.js';\nimport IPAuthorization from '../models/IPAuthorization.js';\nimport { sendOTPEmail, sendIPAuthorizationEmail } from '../lib/emailService.js';\nimport { encryptField, decryptField } from '../lib/encryption.js';\nimport { body, validationResult } from 'express-validator';\n\nconst googleClient = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);\n\nconst router = express.Router();\n\n// Normalize client IPs so comparisons are consistent across IPv6-mapped addresses\nfunction normalizeIP(ip) {\n  if (!ip) return ip;\n  // If header contains multiple IPs (proxy chain), take the first\n  if (ip.includes(',')) ip = ip.split(',')[0].trim();\n  // Remove port if present (e.g. 1.2.3.4:12345)\n  if (ip.includes(':') && ip.split(':').length > 2 && ip.includes('.')) {\n    // IPv6 with embedded IPv4 like ::ffff:1.2.3.4\n    const last = ip.split(':').pop();\n    if (last && last.includes('.')) ip = last;\n  } else if (ip.includes(':') && !ip.includes('.')) {\n    // pure IPv6 - keep as-is but trim\n    ip = ip.split('%')[0]; // drop zone id if present\n  } else if (ip.includes(':') && ip.includes('.')) {\n    // IPv4 with port\n    ip = ip.split(':')[0];\n  }\n\n  return ip.trim();\n}\n\nrouter.post('/check-username',\n  body('username').trim().isLength({ min: 3, max: 20 }).matches(/^[a-zA-Z0-9_]+$/),\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { username } = req.body;\n      \n      const allUsers = await User.find({});\n      const usernameTaken = allUsers.some(user => user.username === username);\n\n      res.json({ available: !usernameTaken });\n    } catch (error) {\n      console.error('Username check error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.post('/send-otp',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('fullName').trim().isLength({ min: 2 }),\n    body('phone').trim().matches(/^[0-9+\\-() ]+$/),\n    body('dateOfBirth').isISO8601(),\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { email } = req.body;\n\n      // Prevent rapid duplicate sends: if there's a recent unverified OTP for this email (<=60s), don't create/send another.\n      const encryptedEmail = encryptField(email);\n      const lastUnverified = await OTP.findOne({ email: encryptedEmail, verified: false }).sort({ createdAt: -1 });\n      if (lastUnverified) {\n        const ageMs = Date.now() - new Date(lastUnverified.createdAt).getTime();\n        if (ageMs <= 60 * 1000) {\n          // Recent OTP already sent; return success to the client without resending.\n          return res.json({ message: 'OTP recently sent' });\n        }\n      }\n\n      // Remove older unverified OTPs before creating a new one\n      await OTP.deleteMany({ email: encryptedEmail, verified: false });\n\n      const otp = crypto.randomInt(100000, 999999).toString();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000);\n\n      const otpDoc = new OTP({\n        email,\n        otp,\n        expiresAt,\n      });\n\n      await otpDoc.save();\n\n      const emailSent = await sendOTPEmail(email, otp);\n      \n      if (!emailSent) {\n        return res.status(500).json({ error: 'Failed to send OTP email' });\n      }\n\n      res.json({ message: 'OTP sent successfully' });\n    } catch (error) {\n      console.error('Send OTP error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.post('/verify-otp',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('otp').isLength({ min: 6, max: 6 }),\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { email, otp } = req.body;\n\n      // Find candidate OTPs by otp value (use .lean() to get raw data without getters)\n      const candidates = await OTP.find({ otp, verified: false }).sort({ createdAt: -1 }).limit(5).lean();\n\n      // Try to find a candidate whose decrypted email matches the provided email\n      const now = new Date();\n      const graceMs = 2 * 60 * 1000; // 2 minute grace\n      const normalizedProvidedEmail = (email || '').toString().trim().toLowerCase();\n      \n      let matched = null;\n      for (const c of candidates) {\n        let storedEmail;\n        try {\n          // c.email is raw encrypted value because we used .lean()\n          storedEmail = decryptField(c.email);\n        } catch (e) {\n          storedEmail = null;\n        }\n        const normalizedStoredEmail = storedEmail ? storedEmail.toString().trim().toLowerCase() : null;\n        \n        if (normalizedStoredEmail === normalizedProvidedEmail) {\n          const expiresAt = c.expiresAt instanceof Date ? c.expiresAt : new Date(c.expiresAt);\n          if ((expiresAt.getTime() + graceMs) > now.getTime()) {\n            matched = c;\n            break;\n          } else {\n            // expired candidate; delete it\n            await OTP.deleteOne({ _id: c._id });\n            return res.status(400).json({ error: 'OTP expired' });\n          }\n        }\n      }\n\n      if (!matched) {\n        return res.status(400).json({ error: 'Invalid or expired OTP' });\n      }\n\n      // Update OTP as verified (matched is a plain object from .lean())\n      await OTP.updateOne({ _id: matched._id }, { verified: true });\n\n      res.json({ message: 'OTP verified successfully' });\n    } catch (error) {\n      console.error('Verify OTP error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.post('/register',\n  [\n    body('username').trim().isLength({ min: 3, max: 20 }).matches(/^[a-zA-Z0-9_]+$/),\n    body('password').isLength({ min: 8 }),\n    body('email').isEmail().normalizeEmail(),\n    body('fullName').trim().isLength({ min: 2 }),\n    body('phone').trim().matches(/^[0-9+\\-() ]+$/),\n    body('dateOfBirth').isISO8601(),\n    body('publicKey').notEmpty(),\n    body('privateKey').notEmpty(),\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { username, password, email, fullName, phone, dateOfBirth, publicKey, privateKey } = req.body;\n\n      // Get and normalize client IP address\n      const rawClientIP = requestIp.getClientIp(req) || \n        req.headers['x-forwarded-for']?.split(',')[0]?.trim() || \n        req.connection.remoteAddress || \n        req.socket.remoteAddress || \n        req.ip;\n      const clientIP = normalizeIP(rawClientIP);\n      const userAgent = req.headers['user-agent'];\n\n      // Find verified OTPs and check if any match the provided email\n      const verifiedOTPs = await OTP.find({ verified: true }).lean();\n      const normalizedEmail = email.trim().toLowerCase();\n      \n      let otpDoc = null;\n      for (const otp of verifiedOTPs) {\n        let storedEmail;\n        try {\n          storedEmail = decryptField(otp.email);\n        } catch (e) {\n          storedEmail = null;\n        }\n        if (storedEmail && storedEmail.trim().toLowerCase() === normalizedEmail) {\n          otpDoc = otp;\n          break;\n        }\n      }\n\n      if (!otpDoc) {\n        return res.status(400).json({ error: 'Email not verified' });\n      }\n\n      const allUsers = await User.find({});\n      const usernameTaken = allUsers.some(user => user.username === username);\n\n      if (usernameTaken) {\n        return res.status(400).json({ error: 'Username already taken' });\n      }\n\n      const user = new User({\n        username,\n        password,\n        email,\n        fullName,\n        phone,\n        dateOfBirth,\n        publicKey,\n        privateKey,\n        isVerified: true,\n        authorizedIPs: [{\n          ip: clientIP,\n          authorizedAt: new Date(),\n          userAgent: userAgent || 'Unknown'\n        }]\n      });\n\n      await user.save();\n      \n      console.log('✓ User registered with initial IP:', clientIP);\n\n      // Delete the verified OTP using its ID\n      await OTP.deleteOne({ _id: otpDoc._id });\n\n      const token = jwt.sign(\n        { userId: user._id, username: user.username },\n        process.env.JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      // Set token as httpOnly cookie for automatic inclusion in requests\n      res.cookie('token', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n      });\n\n      res.json({\n        token,\n        user: {\n          id: user._id,\n          username: user.username,\n          publicKey: user.publicKey,\n          privateKey: user.privateKey,\n        },\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.post('/login',\n  [\n    body('username').trim().notEmpty(),\n    body('password').notEmpty(),\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { username, password } = req.body;\n      \n  const rawClientIP = requestIp.getClientIp(req) || \n        req.headers['x-forwarded-for']?.split(',')[0]?.trim() || \n        req.connection.remoteAddress || \n        req.socket.remoteAddress || \n        req.ip;\n  const clientIP = normalizeIP(rawClientIP);\n      \n      const userAgent = req.headers['user-agent'];\n\n      const allUsers = await User.find({});\n      const foundUser = allUsers.find(u => u.username === username);\n      \n      if (!foundUser) {\n        return res.status(401).json({ \n          error: 'INVALID_CREDENTIALS',\n          message: 'Invalid credentials. Please check your username and password or reset your password.',\n          redirectToForgotPassword: true\n        });\n      }\n      \n      console.log('=== USER LOOKUP START ===');\n      console.log('Looking up user:', username);\n      console.log('Found user ID:', foundUser._id);\n      console.log('=== USER LOOKUP END ===');\n      \n      const user = await User.findById(foundUser._id);\n\n      if (!user) {\n        return res.status(401).json({ \n          error: 'INVALID_CREDENTIALS',\n          message: 'Invalid credentials. Please check your username and password or reset your password.',\n          redirectToForgotPassword: true\n        });\n      }\n      \n      console.log('=== USER VERIFICATION ===');\n      console.log('Verified user ID:', user._id);\n      console.log('Verified username:', user.username);\n      console.log('This user has', user.authorizedIPs?.length || 0, 'authorized IPs');\n      console.log('=== END USER VERIFICATION ===');\n\n      const passwordMatch = await user.comparePassword(password);\n      if (!passwordMatch) {\n        return res.status(401).json({ \n          error: 'INVALID_CREDENTIALS',\n          message: 'Invalid credentials. Please check your username and password or reset your password.',\n          redirectToForgotPassword: true\n        });\n      }\n\n      console.log('=== LOGIN IP VERIFICATION START ===');\n      console.log('Checking IP for user:', username);\n      console.log('User ID:', user._id.toString());\n      console.log('Raw IP:', rawClientIP);\n      console.log('Normalized IP:', clientIP);\n      console.log('User Agent:', userAgent);\n      console.log('This user\\'s authorized IPs:', JSON.stringify(user.authorizedIPs));\n      console.log('Number of authorized IPs for this user:', user.authorizedIPs?.length || 0);\n\n      if (!user.authorizedIPs) {\n        console.log('WARNING: authorizedIPs is null/undefined for user', username);\n        user.authorizedIPs = [];\n      }\n\n      const isFirstTimeLogin = user.authorizedIPs.length === 0;\n      const isKnownIP = user.authorizedIPs.some(auth => {\n        const normalizedAuthIP = normalizeIP(auth.ip);\n        const matches = normalizedAuthIP === clientIP;\n        console.log(`Comparing stored IP ${normalizedAuthIP} === current IP ${clientIP} ? ${matches}`);\n        return matches;\n      });\n\n      console.log('First time login for user', username + ':', isFirstTimeLogin);\n      console.log('Known IP for user', username + ':', isKnownIP);\n      console.log('=== LOGIN IP VERIFICATION END ===');\n\n      if (isFirstTimeLogin || !isKnownIP) {\n        console.log('❌ IP NOT AUTHORIZED - Blocking login and sending email verification');\n        \n        await IPAuthorization.deleteMany({ username, ip: clientIP, authorized: false });\n\n        const authToken = crypto.randomBytes(32).toString('hex');\n        const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\n\n        const ipAuth = new IPAuthorization({\n          username,\n          ip: clientIP,\n          token: authToken,\n          userAgent,\n          expiresAt,\n        });\n\n        ipAuth.ip = normalizeIP(ipAuth.ip);\n        await ipAuth.save();\n\n        const authUrl = `${req.protocol}://${req.get('host')}/api/auth/authorize-ip?token=${authToken}`;\n        \n        try {\n          await sendIPAuthorizationEmail(user.email, username, clientIP, authUrl);\n          console.log('✓ IP authorization email sent to:', user.email);\n        } catch (emailError) {\n          console.error('Failed to send IP authorization email:', emailError);\n        }\n\n        return res.status(403).json({\n          error: 'IP_AUTHORIZATION_REQUIRED',\n          message: isFirstTimeLogin \n            ? 'First-time login detected. An authorization email has been sent to your registered email address. Please check your email to authorize this IP address before logging in.'\n            : 'Login attempt from a new IP address detected. An authorization email has been sent to your registered email address. Please verify this new IP address to continue.',\n          isFirstTimeLogin,\n          ip: clientIP,\n          email: user.email\n        });\n      }\n\n      console.log('✓ IP AUTHORIZED - Allowing login');\n\n      const token = jwt.sign(\n        { userId: user._id, username: user.username },\n        process.env.JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      // Set token as httpOnly cookie for automatic inclusion in requests\n      res.cookie('token', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n      });\n\n      res.json({\n        token,\n        user: {\n          id: user._id,\n          username: user.username,\n          publicKey: user.publicKey,\n          privateKey: user.privateKey,\n        },\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.get('/authorize-ip', async (req, res) => {\n  try {\n    const { token } = req.query;\n\n    if (!token) {\n      return res.status(400).send('<h1>Authorization token is required</h1>');\n    }\n\n    const ipAuth = await IPAuthorization.findOne({ token, authorized: false });\n\n    if (!ipAuth) {\n      return res.status(400).send('<h1>Invalid or expired authorization link</h1>');\n    }\n\n    if (new Date() > ipAuth.expiresAt) {\n      await IPAuthorization.deleteOne({ _id: ipAuth._id });\n      return res.status(400).send('<h1>Authorization link expired</h1>');\n    }\n\n    const allUsers = await User.find({});\n    const foundUser = allUsers.find(u => u.username === ipAuth.username);\n\n    if (!foundUser) {\n      console.error('User not found for IP authorization:', ipAuth.username);\n      return res.status(400).send('<h1>User not found</h1>');\n    }\n\n    const user = await User.findById(foundUser._id);\n    \n    if (!user) {\n      console.error('User not found by ID:', foundUser._id);\n      return res.status(400).send('<h1>User not found</h1>');\n    }\n    \n    console.log('=== IP AUTHORIZATION START ===');\n    console.log('User:', user.username);\n    console.log('IP to authorize:', ipAuth.ip);\n    console.log('Normalized IP:', normalizeIP(ipAuth.ip));\n    console.log('Current authorizedIPs:', JSON.stringify(user.authorizedIPs));\n\n    const normalizedNewIP = normalizeIP(ipAuth.ip);\n    const ipExists = user.authorizedIPs && user.authorizedIPs.some(auth => normalizeIP(auth.ip) === normalizedNewIP);\n    \n    if (!ipExists) {\n      if (!user.authorizedIPs) {\n        user.authorizedIPs = [];\n      }\n      \n      user.authorizedIPs.push({\n        ip: normalizedNewIP,\n        authorizedAt: new Date(),\n        userAgent: ipAuth.userAgent || 'Unknown',\n      });\n      \n      console.log('After push - authorizedIPs:', JSON.stringify(user.authorizedIPs));\n\n      await user.save();\n      \n      const savedUser = await User.findById(user._id);\n      console.log('Verification - Saved authorizedIPs:', JSON.stringify(savedUser.authorizedIPs));\n      console.log('✓ IP address successfully saved to database:', normalizedNewIP);\n    } else {\n      console.log('IP already exists in authorizedIPs:', normalizedNewIP);\n    }\n\n    ipAuth.authorized = true;\n    await ipAuth.save();\n    \n    console.log('=== IP AUTHORIZATION COMPLETE ===');\n\n    res.send(`\n      <html>\n        <head>\n          <title>Device Authorized - LockBlip</title>\n          <style>\n            body {\n              font-family: Arial, sans-serif;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              height: 100vh;\n              margin: 0;\n              background: linear-gradient(135deg, #0b1020, #1b1f3a);\n              color: white;\n            }\n            .container {\n              text-align: center;\n              padding: 40px;\n              background: rgba(255,255,255,0.1);\n              border-radius: 10px;\n            }\n            h1 { color: #2DE2A9; }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <h1>✓ Device Authorized</h1>\n            <p>You can now close this window and return to LockBlip to log in.</p>\n          </div>\n        </body>\n      </html>\n    `);\n  } catch (error) {\n    console.error('IP authorization error:', error);\n    res.status(500).send('<h1>Server error</h1>');\n  }\n});\n\nrouter.post('/forgot-password',\n  body('email').isEmail().normalizeEmail(),\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { email } = req.body;\n\n      const allUsers = await User.find({});\n      const foundUser = allUsers.find(u => u.email === email);\n\n      if (!foundUser) {\n        return res.json({ message: 'If an account exists with this email, you will receive a password reset code.' });\n      }\n      \n      const user = await User.findById(foundUser._id);\n\n      const encryptedEmail = encryptField(email);\n      await OTP.deleteMany({ email: encryptedEmail, verified: false });\n\n      const otp = crypto.randomInt(100000, 999999).toString();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000);\n\n      const otpDoc = new OTP({\n        email,\n        otp,\n        expiresAt,\n      });\n\n      await otpDoc.save();\n      await sendOTPEmail(email, otp);\n\n      res.json({ message: 'If an account exists with this email, you will receive a password reset code.' });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.post('/reset-password',\n  [\n    body('email').isEmail().normalizeEmail(),\n    body('otp').isLength({ min: 6, max: 6 }),\n    body('newPassword').isLength({ min: 6 }),\n  ],\n  async (req, res) => {\n    try {\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({ errors: errors.array() });\n      }\n\n      const { email, otp, newPassword } = req.body;\n\n      const candidates = await OTP.find({ otp, verified: false }).sort({ createdAt: -1 }).limit(5).lean();\n\n      const now = new Date();\n      const graceMs = 2 * 60 * 1000;\n      const normalizedProvidedEmail = (email || '').toString().trim().toLowerCase();\n      \n      let matched = null;\n      for (const c of candidates) {\n        let storedEmail;\n        try {\n          storedEmail = decryptField(c.email);\n        } catch (e) {\n          storedEmail = null;\n        }\n        const normalizedStoredEmail = storedEmail ? storedEmail.toString().trim().toLowerCase() : null;\n        \n        if (normalizedStoredEmail === normalizedProvidedEmail) {\n          const expiresAt = c.expiresAt instanceof Date ? c.expiresAt : new Date(c.expiresAt);\n          if ((expiresAt.getTime() + graceMs) > now.getTime()) {\n            matched = c;\n            break;\n          } else {\n            await OTP.deleteOne({ _id: c._id });\n            return res.status(400).json({ error: 'OTP expired' });\n          }\n        }\n      }\n\n      if (!matched) {\n        return res.status(400).json({ error: 'Invalid or expired OTP' });\n      }\n\n      const allUsers = await User.find({});\n      const foundUser = allUsers.find(u => u.email === email);\n\n      if (!foundUser) {\n        return res.status(400).json({ error: 'User not found' });\n      }\n      \n      const user = await User.findById(foundUser._id);\n\n      user.password = newPassword;\n      await user.save();\n\n      await OTP.deleteOne({ _id: matched._id });\n\n      res.json({ message: 'Password reset successfully' });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ error: 'Server error' });\n    }\n  }\n);\n\nrouter.post('/logout', (req, res) => {\n  res.clearCookie('token');\n  res.json({ message: 'Logged out successfully' });\n});\n\nrouter.post('/clear-authorized-ips', async (req, res) => {\n  try {\n    const { username } = req.body;\n    if (!username) {\n      return res.status(400).json({ error: 'Username required' });\n    }\n\n    const allUsers = await User.find({});\n    const foundUser = allUsers.find(u => u.username === username);\n\n    if (!foundUser) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    const user = await User.findById(foundUser._id);\n\n    user.authorizedIPs = [];\n    await user.save();\n\n    res.json({ message: 'Authorized IPs cleared successfully. Please logout and login again to trigger IP authorization.' });\n  } catch (error) {\n    console.error('Clear IPs error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.post('/google', async (req, res) => {\n  try {\n    const { credential } = req.body;\n\n    if (!credential) {\n      return res.status(400).json({ error: 'Google credential is required' });\n    }\n\n    const ticket = await googleClient.verifyIdToken({\n      idToken: credential,\n      audience: process.env.GOOGLE_CLIENT_ID,\n    });\n\n    const payload = ticket.getPayload();\n    const { email, name, sub: googleId, picture } = payload;\n\n    if (!email) {\n      return res.status(400).json({ error: 'Email not provided by Google' });\n    }\n\n    const rawClientIP = requestIp.getClientIp(req) || \n      req.headers['x-forwarded-for']?.split(',')[0]?.trim() || \n      req.connection.remoteAddress || \n      req.socket.remoteAddress || \n      req.ip;\n    const clientIP = normalizeIP(rawClientIP);\n    const userAgent = req.headers['user-agent'];\n\n    const allUsers = await User.find({}).lean({ getters: true });\n    let existingUser = allUsers.find(u => u.email && u.email.toLowerCase() === email.toLowerCase());\n\n    if (existingUser) {\n      const user = await User.findById(existingUser._id);\n\n      const isIPAuthorized = user.authorizedIPs?.some(\n        (ipObj) => ipObj.ip === clientIP\n      );\n\n      if (!isIPAuthorized) {\n        const authCode = crypto.randomBytes(32).toString('hex');\n        const expiresAt = new Date(Date.now() + 15 * 60 * 1000);\n\n        await IPAuthorization.deleteMany({ \n          userId: user._id,\n          ip: clientIP,\n        });\n\n        const ipAuth = new IPAuthorization({\n          userId: user._id,\n          ip: clientIP,\n          userAgent: userAgent || 'Unknown',\n          authorizationCode: authCode,\n          expiresAt,\n        });\n\n        await ipAuth.save();\n\n        const emailSent = await sendIPAuthorizationEmail(\n          user.email,\n          authCode,\n          clientIP,\n          userAgent\n        );\n\n        if (!emailSent) {\n          return res.status(500).json({ \n            error: 'Failed to send authorization email',\n            requiresIPAuth: true \n          });\n        }\n\n        return res.status(403).json({\n          error: 'IP_NOT_AUTHORIZED',\n          message: 'A new device or location was detected. Please check your email to authorize this login.',\n          requiresIPAuth: true,\n        });\n      }\n\n      const token = jwt.sign(\n        { userId: user._id, username: user.username },\n        process.env.JWT_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      res.cookie('token', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'lax',\n        maxAge: 7 * 24 * 60 * 60 * 1000,\n      });\n\n      return res.json({\n        token,\n        user: {\n          id: user.publicKey,\n          username: user.username,\n          email: user.email,\n          fullName: user.fullName,\n          phone: user.phone,\n          dateOfBirth: user.dateOfBirth,\n          description: user.description,\n          profileImage: user.profileImage || picture,\n          privateKey: user.privateKey,\n          publicKey: user.publicKey,\n        },\n      });\n    }\n\n    const username = email.split('@')[0] + '_' + Math.random().toString(36).substring(2, 8);\n    \n    const keyPair = nacl.box.keyPair();\n    const publicKeyBase64 = naclUtil.encodeBase64(keyPair.publicKey);\n    const privateKeyBase64 = naclUtil.encodeBase64(keyPair.secretKey);\n\n    const randomPassword = crypto.randomBytes(32).toString('hex');\n\n    const newUser = new User({\n      username,\n      password: randomPassword,\n      email,\n      fullName: name || 'Google User',\n      phone: '+0000000000',\n      dateOfBirth: '2000-01-01',\n      publicKey: publicKeyBase64,\n      privateKey: privateKeyBase64,\n      isVerified: true,\n      profileImage: picture || '',\n      authorizedIPs: [{\n        ip: clientIP,\n        authorizedAt: new Date(),\n        userAgent: userAgent || 'Unknown'\n      }]\n    });\n\n    await newUser.save();\n\n    console.log('✓ User registered via Google OAuth:', username);\n\n    const token = jwt.sign(\n      { userId: newUser._id, username: newUser.username },\n      process.env.JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000,\n    });\n\n    return res.json({\n      token,\n      user: {\n        id: newUser.publicKey,\n        username: newUser.username,\n        email: newUser.email,\n        fullName: newUser.fullName,\n        phone: newUser.phone,\n        dateOfBirth: newUser.dateOfBirth,\n        description: newUser.description,\n        profileImage: newUser.profileImage,\n        privateKey: newUser.privateKey,\n        publicKey: newUser.publicKey,\n      },\n    });\n  } catch (error) {\n    console.error('Google OAuth error:', error);\n    return res.status(500).json({ error: 'Failed to authenticate with Google' });\n  }\n});\n\nexport default router;\n","size_bytes":27877},"client/src/components/AuthPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport LoginForm from \"./LoginForm\";\nimport RegistrationForm from \"./RegistrationForm\";\nimport heroImage from '@assets/generated_images/Blockchain_network_hero_image_243b3dd4.png';\nimport lockblipLogo from \"@assets/Untitled design_1761899121550.png\";\n\ninterface AuthPageProps {\n  onAuthenticated: (token: string, user: any) => void;\n}\n\nexport default function AuthPage({ onAuthenticated }: AuthPageProps) {\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 relative overflow-hidden\">\n      <div\n        className=\"absolute inset-0 z-0\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(11, 16, 32, 0.85), rgba(27, 31, 58, 0.85)), url(${heroImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      \n      <Card className=\"w-full max-w-md relative z-10 border-primary/20 bg-card/80 backdrop-blur-xl\">\n        <CardHeader className=\"text-center space-y-2\">\n          <div className=\"flex justify-center mb-2\">\n            <img src={lockblipLogo} alt=\"LockBlip\" className=\"h-16 w-16 object-contain rounded-2xl shadow-lg\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold\">LockBlip</CardTitle>\n          <CardDescription>\n            Blockchain-powered secure messaging with end-to-end encryption\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <LoginForm onSuccess={onAuthenticated} />\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <RegistrationForm onSuccess={onAuthenticated} />\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2361},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Mongoose schemas are defined in server/models/\n// These are TypeScript types and Zod schemas for validation\n\nexport interface User {\n  _id?: string;\n  username: string;\n  email: string;\n  phone: string;\n  fullName: string;\n  dateOfBirth: string;\n  password: string;\n  publicKey: string;\n  authorizedIPs: Array<{\n    ip: string;\n    authorizedAt: string;\n    userAgent: string;\n  }>;\n  isVerified: boolean;\n  createdAt: Date;\n}\n\nexport interface Block {\n  _id?: string;\n  index: number;\n  timestamp: string;\n  from: string;\n  to: string;\n  payload: string;\n  prevHash: string;\n  hash: string;\n  createdAt: Date;\n}\n\nexport interface OTP {\n  _id?: string;\n  email: string;\n  otp: string;\n  expiresAt: Date;\n  verified: boolean;\n  createdAt: Date;\n}\n\nexport interface IPAuthorization {\n  _id?: string;\n  username: string;\n  ip: string;\n  token: string;\n  userAgent?: string;\n  authorized: boolean;\n  expiresAt: Date;\n  createdAt: Date;\n}\n\nexport interface Connection {\n  _id?: string;\n  sender: string;\n  receiver: string;\n  status: 'pending' | 'accepted' | 'ignored' | 'blocked';\n  isFriend: boolean;\n  messagePermission: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  notes?: string;\n}\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(1),\n  password: z.string().min(1),\n  email: z.string().email(),\n  phone: z.string().min(1),\n  fullName: z.string().min(1),\n  dateOfBirth: z.string().min(1),\n  publicKey: z.string().min(1),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport const insertConnectionSchema = z.object({\n  sender: z.string().min(1),\n  receiver: z.string().min(1),\n  notes: z.string().optional(),\n});\n\nexport type InsertConnection = z.infer<typeof insertConnectionSchema>;\n","size_bytes":1757},"client/src/components/examples/EmptyState.tsx":{"content":"import EmptyState from '../EmptyState';\nimport emptyChat from '@assets/generated_images/Empty_chat_state_illustration_c6fb06b5.png';\n\nexport default function EmptyStateExample() {\n  return (\n    <div className=\"bg-background h-96\">\n      <EmptyState\n        image={emptyChat}\n        title=\"No messages yet\"\n        description=\"Start a conversation with end-to-end encrypted blockchain messaging\"\n      />\n    </div>\n  );\n}\n","size_bytes":425},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ChatWindow.tsx":{"content":"import { useRef, useEffect, useState } from \"react\";\nimport MessageBubble from \"./MessageBubble\";\nimport MessageContextMenu from \"./MessageContextMenu\";\nimport ChatInput from \"./ChatInput\";\nimport BlockchainStatus from \"./BlockchainStatus\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu } from \"lucide-react\";\nimport EmptyState from \"./EmptyState\";\nimport emptyChat from '@assets/generated_images/Empty_chat_state_illustration_c6fb06b5.png';\n\ninterface Message {\n  id: string;\n  content: string;\n  timestamp: string;\n  isSender: boolean;\n  blockNumber?: number;\n  status?: 'sent' | 'delivered' | 'seen';\n  messageType?: 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact' | 'poll';\n  mediaUrl?: string;\n  metadata?: any;\n}\n\ninterface ChatWindowProps {\n  contactName?: string;\n  messages: Message[];\n  blockCount: number;\n  onSendMessage: (message: string) => void;\n  onSendFile?: (file: File, type: 'document' | 'image' | 'video' | 'audio') => void;\n  onSendLocation?: (location: { latitude: number; longitude: number }) => void;\n  onSendContact?: (contact: { name: string; phone: string; email?: string }) => void;\n  onSendPoll?: (poll: { question: string; options: string[] }) => void;\n  onToggleSidebar?: () => void;\n  onLoadOlderMessages?: () => void;\n  hasMore?: boolean;\n  isLoadingMessages?: boolean;\n  onCopyEncrypted?: (messageId: string) => void;\n  onCopyLink?: (messageId: string) => void;\n  contacts?: { id: string; name: string; fullName?: string; profileImage?: string }[];\n  onForwardMessages?: (messageIds: string[], recipients: string[]) => void;\n  onDeleteForMe?: (messageId: string) => void;\n  onDeleteForBoth?: (messageId: string) => void;\n}\n\nexport default function ChatWindow({\n  contactName,\n  messages,\n  blockCount,\n  onSendMessage,\n  onSendFile,\n  onSendLocation,\n  onSendContact,\n  onSendPoll,\n  onToggleSidebar,\n  onLoadOlderMessages,\n  hasMore = false,\n  isLoadingMessages = false,\n  onCopyEncrypted,\n  onCopyLink,\n  onForwardMessages,\n  contacts = [],\n  onDeleteForMe,\n  onDeleteForBoth,\n}: ChatWindowProps) {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n  const [contextMenu, setContextMenu] = useState<{ x: number; y: number; messageId: string } | null>(null);\n  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());\n  const [deleteModal, setDeleteModal] = useState<{ show: boolean; messageId?: string; deleteForBoth: boolean }>({ show: false, messageId: undefined, deleteForBoth: true });\n  const [forwardModal, setForwardModal] = useState<{ show: boolean; messageIds: string[] }>({ show: false, messageIds: [] });\n  const [forwardRecipients, setForwardRecipients] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleContextMenu = (e: React.MouseEvent, messageId: string) => {\n    e.preventDefault();\n    setContextMenu({ x: e.clientX, y: e.clientY, messageId });\n  };\n\n  const closeContextMenu = () => setContextMenu(null);\n\n  const toggleSelect = (id: string) => {\n    setSelectedIds(prev => {\n      const next = new Set(prev);\n      if (next.has(id)) next.delete(id); else next.add(id);\n      return next;\n    });\n  };\n\n  const handleCopyEncrypted = (messageId: string) => {\n    if (onCopyEncrypted) onCopyEncrypted(messageId);\n    closeContextMenu();\n  };\n\n  const handleCopyLink = (messageId: string) => {\n    if (onCopyLink) onCopyLink(messageId);\n    closeContextMenu();\n  };\n\n  const handleForward = (messageId: string) => {\n    // Open forward modal with the message(s) to forward\n    const toForward = selectedIds.size > 0 ? Array.from(selectedIds) : [messageId];\n    setForwardModal({ show: true, messageIds: toForward });\n    setForwardRecipients(new Set());\n    closeContextMenu();\n  };\n\n  const handleDelete = (messageId: string) => {\n    // open a modal asking whether to delete for both or just for me\n    // decide whether delete-for-both is allowed (only allowed if the current user is the sender)\n    const msg = messages.find(m => m.id === messageId);\n    const canDeleteForBoth = !!msg && msg.isSender === true;\n    setDeleteModal({ show: true, messageId, deleteForBoth: canDeleteForBoth });\n    closeContextMenu();\n  };\n\n  const confirmDelete = async () => {\n    const { messageId, deleteForBoth } = deleteModal;\n    // determine whether delete-for-both is actually allowed for this request\n    let canDeleteForBoth = false;\n    if (messageId) {\n      const msg = messages.find(m => m.id === messageId);\n      canDeleteForBoth = !!msg && msg.isSender === true;\n    } else if (selectedIds.size > 0) {\n      // only allow delete-for-both for batch if ALL selected messages were sent by current user\n      const ids = Array.from(selectedIds);\n      canDeleteForBoth = ids.every(id => {\n        const m = messages.find(mm => mm.id === id);\n        return !!m && m.isSender === true;\n      });\n    }\n    try {\n      if (messageId) {\n        if (deleteForBoth && canDeleteForBoth) {\n          if (onDeleteForBoth) await onDeleteForBoth(messageId);\n        } else {\n          if (onDeleteForMe) await onDeleteForMe(messageId);\n        }\n      } else if (selectedIds.size > 0) {\n        const ids = Array.from(selectedIds);\n        if (deleteForBoth && canDeleteForBoth) {\n          for (const id of ids) {\n            if (onDeleteForBoth) await onDeleteForBoth(id);\n          }\n        } else {\n          for (const id of ids) {\n            if (onDeleteForMe) await onDeleteForMe(id);\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Delete action failed', err);\n      alert('Delete failed');\n    } finally {\n      setSelectedIds(new Set());\n      setDeleteModal({ show: false, messageId: undefined, deleteForBoth: true });\n    }\n  };\n  \n  const handleScroll = () => {\n    if (!messagesContainerRef.current || !onLoadOlderMessages || !hasMore || isLoadingMessages) return;\n    \n    const { scrollTop } = messagesContainerRef.current;\n    \n    if (scrollTop < 100) {\n      onLoadOlderMessages();\n    }\n  };\n\n  const initials = contactName\n    ? contactName\n        .split(\" \")\n        .map((n) => n[0])\n        .join(\"\")\n        .toUpperCase()\n        .slice(0, 2)\n    : \"\";\n\n  if (!contactName) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"flex-shrink-0 h-16 border-b border-border flex items-center px-4 bg-card/30 backdrop-blur-xl\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggleSidebar}\n            className=\"mr-2 md:hidden\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <BlockchainStatus blockCount={blockCount} isValid={true} />\n        </div>\n        <EmptyState\n          image={emptyChat}\n          title=\"No conversation selected\"\n          description=\"Choose a contact from the sidebar to start messaging with blockchain security\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\" data-testid=\"chat-window\">\n      <div className=\"flex-shrink-0 h-16 border-b border-border flex items-center justify-between px-4 bg-card/30 backdrop-blur-xl\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggleSidebar}\n            className=\"mr-2 md:hidden\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <Avatar className=\"h-9 w-9\">\n            <AvatarFallback className=\"bg-primary/20 text-primary font-semibold text-sm\">\n              {initials}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <h2 className=\"font-semibold text-sm\" data-testid=\"text-contact-name\">{contactName}</h2>\n            <p className=\"text-xs text-muted-foreground\">Online</p>\n          </div>\n        </div>\n        <BlockchainStatus blockCount={blockCount} isValid={true} />\n      </div>\n\n      {/* Selection toolbar (left-top) when messages are selected */}\n      {selectedIds.size > 0 && (\n        <div className=\"absolute top-4 left-4 z-40 bg-white/90 dark:bg-card rounded-md shadow px-3 py-2 flex items-center gap-2\">\n          <button className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm\" onClick={() => setForwardModal({ show: true, messageIds: Array.from(selectedIds) })}>Forward {selectedIds.size}</button>\n          <button className=\"bg-red-500 text-white px-3 py-1 rounded text-sm\" onClick={() => setDeleteModal({ show: true, messageId: undefined, deleteForBoth: true })}>Delete {selectedIds.size}</button>\n          <button className=\"px-3 py-1 text-sm\" onClick={() => setSelectedIds(new Set())}>Cancel</button>\n        </div>\n      )}\n\n      <div className=\"flex-1 overflow-y-auto p-4\" ref={messagesContainerRef} onScroll={handleScroll}>\n        {messages.length === 0 ? (\n          <EmptyState\n            image={emptyChat}\n            title=\"Start the conversation\"\n            description=\"Send your first encrypted message on the blockchain\"\n          />\n        ) : (\n          <>\n            {isLoadingMessages && hasMore && (\n              <div className=\"text-center py-2\">\n                <span className=\"text-xs text-muted-foreground\">Loading older messages...</span>\n              </div>\n            )}\n            {messages.map((message, index) => {\n              const isFirstUnread = \n                !message.isSender && \n                message.status !== 'seen' && \n                (index === 0 || messages[index - 1].status === 'seen' || messages[index - 1].isSender);\n              \n              return (\n                <div key={message.id}>\n                  {isFirstUnread && (\n                    <div className=\"flex items-center gap-2 my-4\" data-testid=\"new-messages-separator\">\n                      <div className=\"flex-1 h-px bg-primary/30\"></div>\n                      <span className=\"text-xs font-medium text-primary px-2\">New Messages</span>\n                      <div className=\"flex-1 h-px bg-primary/30\"></div>\n                    </div>\n                  )}\n                  <MessageBubble {...message} onContextMenu={handleContextMenu} isSelected={selectedIds.has(message.id)} onToggleSelect={toggleSelect} />\n                </div>\n              );\n            })}\n            <div ref={messagesEndRef} />\n          </>\n        )}\n      </div>\n\n      {contextMenu && (\n        <MessageContextMenu\n          x={contextMenu.x}\n          y={contextMenu.y}\n          onCopyEncrypted={() => handleCopyEncrypted(contextMenu.messageId)}\n          onCopyLink={() => handleCopyLink(contextMenu.messageId)}\n          onForward={() => handleForward(contextMenu.messageId)}\n          onDelete={() => handleDelete(contextMenu.messageId)}\n          onSelect={() => toggleSelect(contextMenu.messageId)}\n          onClose={closeContextMenu}\n        />\n      )}\n\n      {/* Delete confirmation modal */}\n      {deleteModal.show && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setDeleteModal({ show: false, messageId: undefined, deleteForBoth: true })} />\n          <div className=\"bg-white dark:bg-card rounded-lg shadow-lg p-6 z-10 w-[320px]\">\n            <h3 className=\"text-lg font-medium mb-4\">Do you want to delete this message?</h3>\n            <label className=\"flex items-center gap-2 mb-4\">\n              {/* disable checkbox if user is not allowed to delete for both */}\n              <input\n                type=\"checkbox\"\n                checked={deleteModal.deleteForBoth && (() => {\n                  // compute whether allowed for the currently-open delete modal\n                  const mid = deleteModal.messageId;\n                  if (mid) {\n                    const m = messages.find(mm => mm.id === mid);\n                    return !!m && m.isSender === true && deleteModal.deleteForBoth;\n                  }\n                  if (selectedIds.size > 0) {\n                    const ids = Array.from(selectedIds);\n                    const allSender = ids.every(id => {\n                      const m = messages.find(mm => mm.id === id);\n                      return !!m && m.isSender === true;\n                    });\n                    return allSender && deleteModal.deleteForBoth;\n                  }\n                  return false;\n                })()}\n                onChange={(e) => setDeleteModal(dm => ({ ...dm, deleteForBoth: e.target.checked }))}\n                className=\"w-4 h-4\"\n                disabled={(() => {\n                  const mid = deleteModal.messageId;\n                  if (mid) {\n                    const m = messages.find(mm => mm.id === mid);\n                    return !(!!m && m.isSender === true);\n                  }\n                  if (selectedIds.size > 0) {\n                    const ids = Array.from(selectedIds);\n                    return !ids.every(id => {\n                      const m = messages.find(mm => mm.id === id);\n                      return !!m && m.isSender === true;\n                    });\n                  }\n                  return true;\n                })()}\n              />\n              <span className=\"text-sm\">Also delete for {contactName}</span>\n            </label>\n            {(() => {\n              const mid = deleteModal.messageId;\n              let allowed = true;\n              if (mid) {\n                const m = messages.find(mm => mm.id === mid);\n                allowed = !!m && m.isSender === true;\n              } else if (selectedIds.size > 0) {\n                const ids = Array.from(selectedIds);\n                allowed = ids.every(id => {\n                  const m = messages.find(mm => mm.id === id);\n                  return !!m && m.isSender === true;\n                });\n              }\n              if (!allowed) {\n                return <div className=\"text-xs text-muted-foreground\">Only the sender can delete messages for everyone.</div>;\n              }\n              return null;\n            })()}\n            <div className=\"flex justify-end gap-3\">\n              <button className=\"px-3 py-1 text-sm\" onClick={() => setDeleteModal({ show: false, messageId: undefined, deleteForBoth: true })}>Cancel</button>\n              <button className=\"px-3 py-1 bg-red-500 text-white rounded text-sm\" onClick={confirmDelete}>Delete</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Forward modal: pick one or more contacts to forward selected messages to */}\n      {forwardModal.show && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n          <div className=\"absolute inset-0 bg-black/50\" onClick={() => setForwardModal({ show: false, messageIds: [] })} />\n          <div className=\"bg-white dark:bg-card rounded-lg shadow-lg p-4 z-10 w-[360px] max-h-[70vh] overflow-auto\">\n            <h3 className=\"text-lg font-medium mb-3\">Forward to...</h3>\n            <div className=\"text-sm text-muted-foreground mb-3\">Select one or more contacts</div>\n            <div className=\"space-y-2 mb-4\">\n              {contacts.length === 0 ? (\n                <div className=\"text-sm text-muted-foreground\">No contacts available</div>\n              ) : (\n                contacts.map(c => {\n                  const selected = forwardRecipients.has(c.name);\n                  return (\n                    <label\n                      key={c.id}\n                      className={`flex items-center gap-2 p-2 rounded transition-colors ${selected ? 'bg-gray-100 dark:bg-gray-700' : 'hover:bg-gray-100 dark:hover:bg-gray-700'}`}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        checked={selected}\n                        onChange={(e) => {\n                          setForwardRecipients(prev => {\n                            const next = new Set(prev);\n                            if (e.target.checked) next.add(c.name); else next.delete(c.name);\n                            return next;\n                          });\n                        }}\n                      />\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"h-8 w-8 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center text-sm text-gray-700 dark:text-gray-200\">{(c.name||'').slice(0,2).toUpperCase()}</div>\n                        <div>\n                          <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">{c.fullName || c.name}</div>\n                          <div className=\"text-xs text-muted-foreground\">{c.name}</div>\n                        </div>\n                      </div>\n                    </label>\n                  );\n                })\n              )}\n            </div>\n            <div className=\"flex justify-end gap-3\">\n              <button className=\"px-3 py-1 text-sm\" onClick={() => setForwardModal({ show: false, messageIds: [] })}>Cancel</button>\n              <button className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm\" onClick={async () => {\n                const recipients = Array.from(forwardRecipients);\n                if (recipients.length === 0) return alert('Please select at least one contact');\n                try {\n                  if (onForwardMessages) await onForwardMessages(forwardModal.messageIds, recipients);\n                  setForwardModal({ show: false, messageIds: [] });\n                  setSelectedIds(new Set());\n                } catch (err) {\n                  console.error('Forward failed', err);\n                  alert('Forward failed');\n                }\n              }}>Forward</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <ChatInput \n        onSendMessage={onSendMessage} \n        onSendFile={onSendFile}\n        onSendLocation={onSendLocation}\n        onSendContact={onSendContact}\n        onSendPoll={onSendPoll}\n      />\n    </div>\n  );\n}\n","size_bytes":18163},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ArrowLeft, Camera, Save, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface ProfileManagementProps {\n  onBack: () => void;\n}\n\ninterface UserProfile {\n  id: string;\n  username: string;\n  email: string;\n  phone: string;\n  fullName: string;\n  dateOfBirth: string;\n  description: string;\n  profileImage: string;\n  createdAt: string;\n}\n\nexport default function ProfileManagement({ onBack }: ProfileManagementProps) {\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    fullName: '',\n    phone: '',\n    dateOfBirth: '',\n    description: '',\n    profileImage: '',\n  });\n\n  const { data: profile, isLoading } = useQuery<UserProfile>({\n    queryKey: ['/api/users/profile'],\n  });\n\n  useEffect(() => {\n    if (profile) {\n      setFormData({\n        fullName: profile.fullName,\n        phone: profile.phone,\n        dateOfBirth: profile.dateOfBirth,\n        description: profile.description || '',\n        profileImage: profile.profileImage || '',\n      });\n    }\n  }, [profile]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: Partial<UserProfile>) => {\n      const response = await apiRequest('PUT', '/api/users/profile', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/profile'] });\n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const compressImage = (file: File, maxWidth: number = 400, quality: number = 0.7): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          let width = img.width;\n          let height = img.height;\n\n          if (width > maxWidth) {\n            height = (height * maxWidth) / width;\n            width = maxWidth;\n          }\n\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext('2d');\n          ctx?.drawImage(img, 0, 0, width, height);\n\n          const compressedBase64 = canvas.toDataURL('image/jpeg', quality);\n          resolve(compressedBase64);\n        };\n        img.onerror = reject;\n        img.src = e.target?.result as string;\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      try {\n        const compressed = await compressImage(file, 400, 0.7);\n        setFormData(prev => ({ ...prev, profileImage: compressed }));\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to process image. Please try another one.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center bg-gradient-to-br from-[#0a0f1e] via-[#0d1423] to-[#0a0f1e]\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-swapgreen border-t-transparent mx-auto mb-4\" />\n          <p className=\"text-gray-400\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"flex h-screen items-center justify-center bg-gradient-to-br from-[#0a0f1e] via-[#0d1423] to-[#0a0f1e]\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-400 mb-4\">Failed to load profile</p>\n          <Button\n            onClick={onBack}\n            className=\"bg-swapgreen hover:bg-swapgreen/90 text-black\"\n          >\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const joinedDate = profile.createdAt ? format(new Date(profile.createdAt), 'MMMM dd, yyyy') : 'N/A';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#0a0f1e] via-[#0d1423] to-[#0a0f1e]\">\n      <div className=\"max-w-2xl mx-auto p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={onBack}\n            className=\"text-swapgreen hover:text-swapgreen/80\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5 mr-2\" />\n            Back\n          </Button>\n          {!isEditing && (\n            <Button\n              onClick={() => setIsEditing(true)}\n              className=\"bg-swapgreen hover:bg-swapgreen/90 text-white\"\n              data-testid=\"button-edit-profile\"\n            >\n              Edit Profile\n            </Button>\n          )}\n        </div>\n\n        <Card className=\"bg-midnight-dark border-gray-800\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-white\">Profile Management</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex flex-col items-center space-y-4\">\n              <div className=\"relative\">\n                <Avatar className=\"h-32 w-32 border-4 border-swapgreen\">\n                  <AvatarImage src={formData.profileImage || profile.profileImage} alt={profile.username} />\n                  <AvatarFallback className=\"bg-midnight-light text-white text-3xl\">\n                    <User className=\"h-16 w-16\" />\n                  </AvatarFallback>\n                </Avatar>\n                {isEditing && (\n                  <label\n                    htmlFor=\"profile-image\"\n                    className=\"absolute bottom-0 right-0 bg-swapgreen hover:bg-swapgreen/90 text-black rounded-full p-2 cursor-pointer\"\n                  >\n                    <Camera className=\"h-5 w-5\" />\n                    <input\n                      id=\"profile-image\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleImageUpload}\n                      data-testid=\"input-profile-image\"\n                    />\n                  </label>\n                )}\n              </div>\n              <h2 className=\"text-xl font-semibold text-white\" data-testid=\"text-username\">\n                @{profile.username}\n              </h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\" className=\"text-gray-400\">\n                  Full Name\n                </Label>\n                <Input\n                  id=\"fullName\"\n                  value={formData.fullName}\n                  onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n                  disabled={!isEditing}\n                  className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70\"\n                  data-testid=\"input-fullname\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-gray-400\">\n                  Username\n                </Label>\n                <Input\n                  id=\"username\"\n                  value={profile.username}\n                  disabled\n                  className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70\"\n                  data-testid=\"input-username\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-400\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  value={profile.email}\n                  disabled\n                  className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\" className=\"text-gray-400\">\n                  Mobile Number\n                </Label>\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                  disabled={!isEditing}\n                  className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70\"\n                  data-testid=\"input-phone\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateOfBirth\" className=\"text-gray-400\">\n                  Date of Birth\n                </Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) => setFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                  disabled={!isEditing}\n                  className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70\"\n                  data-testid=\"input-dob\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"joinedDate\" className=\"text-gray-400\">\n                  Joined Date\n                </Label>\n                <Input\n                  id=\"joinedDate\"\n                  value={joinedDate}\n                  disabled\n                  className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70\"\n                  data-testid=\"text-joined-date\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\" className=\"text-gray-400\">\n                About\n              </Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                disabled={!isEditing}\n                placeholder=\"Tell others about yourself...\"\n                className=\"bg-midnight-light border-gray-700 text-white disabled:opacity-70 min-h-[100px]\"\n                data-testid=\"textarea-description\"\n              />\n            </div>\n\n            {isEditing && (\n              <div className=\"flex justify-end space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsEditing(false);\n                    setFormData({\n                      fullName: profile.fullName,\n                      phone: profile.phone,\n                      dateOfBirth: profile.dateOfBirth,\n                      description: profile.description || '',\n                      profileImage: profile.profileImage || '',\n                    });\n                  }}\n                  className=\"border-gray-700 text-white hover:bg-midnight-light\"\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSave}\n                  disabled={updateProfileMutation.isPending}\n                  className=\"bg-swapgreen hover:bg-swapgreen/90 text-black\"\n                  data-testid=\"button-save\"\n                >\n                  {updateProfileMutation.isPending ? (\n                    <>\n                      <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-black border-t-transparent mr-2\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save Changes\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12780},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { io, Socket } from \"socket.io-client\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport ChatWindow from \"@/components/ChatWindow\";\nimport LedgerViewer from \"@/components/LedgerViewer\";\nimport Stories from \"@/components/Stories\";\nimport ProfileManagement from \"@/pages/profile\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { User } from \"lucide-react\";\nimport naclUtil from \"tweetnacl-util\";\nimport nacl from \"tweetnacl\";\n\ninterface HomeProps {\n  onLogout: () => void;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  lastMessage?: string;\n  timestamp?: string;\n  unreadCount?: number;\n  isOnline?: boolean;\n  lastMessageTime?: string;\n  fullName?: string;\n  phone?: string;\n  profileImage?: string;\n  description?: string;\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  timestamp: string;\n  isSender: boolean;\n  encryptedPayload?: string;\n  blockNumber?: number;\n  status?: 'sent' | 'delivered' | 'seen';\n  messageType?: 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact' | 'poll';\n  mediaUrl?: string;\n  metadata?: any;\n}\n\ninterface Block {\n  index: number;\n  hash: string;\n  prevHash: string;\n  timestamp: string;\n  from: string;\n  to: string;\n  payload: string;\n}\n\nexport default function Home({ onLogout }: HomeProps) {\n  const [activeView, setActiveView] = useState<\"chat\" | \"ledger\" | \"profile\">(\"chat\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [activeContactId, setActiveContactId] = useState<string | undefined>();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [onlineUsers, setOnlineUsers] = useState<Set<string>>(new Set());\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMore, setHasMore] = useState(false);\n  const [isLoadingMessages, setIsLoadingMessages] = useState(false);\n  const socketRef = useRef<Socket | null>(null);\n  const tempMessageMapRef = useRef<Map<string, { timestamp: number, content: string }>>(new Map());\n  const activeContactNameRef = useRef<string | undefined>();\n\n  const [user, setUser] = useState(() => JSON.parse(localStorage.getItem('user') || '{}'));\n  const [token, setToken] = useState(() => localStorage.getItem('token'));\n  const previousUserIdRef = useRef<string>(user.id);\n  \n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const newToken = localStorage.getItem('token');\n      \n      if (newUser.id !== previousUserIdRef.current) {\n        console.log('🔄 User changed! Resetting application state...');\n        console.log('Previous user ID:', previousUserIdRef.current);\n        console.log('New user ID:', newUser.id);\n        \n        previousUserIdRef.current = newUser.id;\n        \n        setMessages([]);\n        setActiveContactId(undefined);\n        setCurrentPage(1);\n        setHasMore(false);\n        setOnlineUsers(new Set());\n        tempMessageMapRef.current.clear();\n        \n        if (socketRef.current) {\n          console.log('Disconnecting old socket...');\n          socketRef.current.disconnect();\n          socketRef.current.removeAllListeners();\n          socketRef.current = null;\n        }\n        \n        queryClient.invalidateQueries();\n        console.log('✅ All queries invalidated - fresh data will be fetched for new user');\n      }\n      \n      setUser(newUser);\n      setToken(newToken);\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    \n    const interval = setInterval(() => {\n      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n      const currentToken = localStorage.getItem('token');\n      \n      if (currentUser.id !== previousUserIdRef.current) {\n        console.log('🔄 User changed detected via polling! Resetting application state...');\n        console.log('Previous user ID:', previousUserIdRef.current);\n        console.log('New user ID:', currentUser.id);\n        \n        previousUserIdRef.current = currentUser.id;\n        \n        setMessages([]);\n        setActiveContactId(undefined);\n        setCurrentPage(1);\n        setHasMore(false);\n        setOnlineUsers(new Set());\n        tempMessageMapRef.current.clear();\n        \n        if (socketRef.current) {\n          console.log('Disconnecting old socket...');\n          socketRef.current.disconnect();\n          socketRef.current.removeAllListeners();\n          socketRef.current = null;\n        }\n        \n        queryClient.invalidateQueries();\n        console.log('✅ All queries invalidated - fresh data will be fetched for new user');\n        \n        setUser(currentUser);\n        setToken(currentToken);\n      } else if (JSON.stringify(currentUser) !== JSON.stringify(user) || currentToken !== token) {\n        setUser(currentUser);\n        setToken(currentToken);\n      }\n    }, 500);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      clearInterval(interval);\n    };\n  }, [user, token]);\n\n  interface UserProfile {\n    profileImage?: string;\n  }\n\n  const { data: profile } = useQuery<UserProfile>({\n    queryKey: ['/api/users/profile'],\n    enabled: !!token,\n  });\n\n  const { data: contacts = [], refetch: refetchContacts } = useQuery<Contact[]>({\n    queryKey: ['/api/users/contacts'],\n    enabled: !!token,\n  });\n\n  const { data: blockchain = [], refetch: refetchBlockchain } = useQuery<Block[]>({\n    queryKey: ['/api/blockchain/ledger'],\n    enabled: !!token,\n  });\n\n  useEffect(() => {\n    if (!token) return;\n\n    const socket = io({\n      auth: { token },\n      forceNew: true,\n    });\n\n    socketRef.current = socket;\n\n    socket.on('connected', (data) => {\n      console.log('Connected to chat:', data);\n    });\n\n    socket.on('receive-message', async (data) => {\n      const { from, block, messageId, messageType = 'text', mediaUrl, metadata, encryptedMessage, chatPublicKey, chatPrivateKey } = data;\n      \n      try {\n        const decryptedContent = await decryptMessageWithChatKeys(encryptedMessage, chatPublicKey, chatPrivateKey);\n        const newMessage: Message = {\n          id: messageId,\n          content: decryptedContent,\n          timestamp: new Date(block.timestamp).toLocaleTimeString(\"en-US\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          isSender: false,\n          blockNumber: block.index,\n          status: 'delivered',\n          messageType,\n          metadata,\n          mediaUrl,\n        };\n\n        setMessages((prev) => [...prev, newMessage]);\n        refetchBlockchain();\n        \n        const senderContact = contacts.find(c => c.name === from);\n        if (activeContactId === senderContact?.id && activeView === 'chat') {\n          socket.emit('message-seen', { messageId, from });\n          try {\n            refetchContacts();\n            console.log('🔁 Refetched contacts after marking single message seen');\n          } catch (err) {\n            console.warn('Failed to refetch contacts after marking single message seen', err);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to decrypt message:', error);\n      }\n    });\n\n    socket.on('message-sent', (data) => {\n      console.log('Message sent confirmation:', data);\n      \n      const tempEntry = Array.from(tempMessageMapRef.current.entries())\n        .find(([_, val]) => Math.abs(val.timestamp - new Date(data.timestamp).getTime()) < 2000);\n      \n      if (tempEntry) {\n        const [tempId] = tempEntry;\n        tempMessageMapRef.current.delete(tempId);\n        \n        setMessages((prev) => prev.map(msg => \n          msg.id === tempId ? { ...msg, id: data.messageId, blockNumber: data.blockNumber, status: 'sent' } : msg\n        ));\n      } else {\n        setMessages((prev) => prev.map(msg => \n          msg.id === data.messageId ? { ...msg, status: 'sent', blockNumber: data.blockNumber } : msg\n        ));\n      }\n      \n      refetchBlockchain();\n    });\n    \n    socket.on('message-delivered', (data) => {\n      console.log('Message delivered:', data);\n      setMessages((prev) => prev.map(msg => \n        msg.id === data.messageId ? { ...msg, status: 'delivered' } : msg\n      ));\n    });\n    \n    socket.on('message-status-update', (data) => {\n      console.log('Message status updated:', data);\n      setMessages((prev) => prev.map(msg => \n        msg.id === data.messageId ? { ...msg, status: data.status } : msg\n      ));\n    });\n    \n    socket.on('message-deleted', (data) => {\n      console.log('Message deleted via socket:', data);\n      const { messageId } = data;\n      setMessages(prev => prev.filter(m => m.id !== messageId));\n    });\n    \n    socket.on('messages-seen-bulk', (data) => {\n      console.log('Messages seen in bulk:', data);\n      const { from } = data;\n      setMessages((prev) => prev.map(msg => {\n        if (msg.isSender && msg.status !== 'seen' && from === activeContactNameRef.current) {\n          return { ...msg, status: 'seen' };\n        }\n        return msg;\n      }));\n    });\n\n    return () => {\n      console.log('Disconnecting socket for user:', user.username);\n      socket.disconnect();\n      socket.removeAllListeners();\n      socketRef.current = null;\n    };\n  }, [token]);\n\n  useEffect(() => {\n    const loadMessages = async () => {\n      if (!activeContactId) {\n        setMessages([]);\n        setCurrentPage(1);\n        setHasMore(false);\n        activeContactNameRef.current = undefined;\n        return;\n      }\n\n      const activeContact = contacts.find((c) => c.id === activeContactId);\n      if (!activeContact) return;\n\n      activeContactNameRef.current = activeContact.name;\n      setIsLoadingMessages(true);\n      \n      try {\n        const response = await fetch(`/api/chats/messages/${activeContact.name}?page=1&limit=50`, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch messages');\n        }\n        \n        const data = await response.json();\n        const decryptedMessages: Message[] = [];\n        \n        for (const msg of data.messages) {\n          try {\n            console.log('📨 Processing message from database:');\n            console.log('  Message ID:', msg._id);\n            console.log('  SenderId from DB:', msg.senderId);\n            console.log('  ReceiverId from DB:', msg.receiverId);\n            console.log('  Current username:', user.username);\n            console.log('  Is sender?:', msg.senderId === user.username);\n            console.log('  Chat public key exists:', !!msg.chatPublicKey);\n            console.log('  Chat private key exists:', !!msg.chatPrivateKey);\n            \n            let decryptedContent;\n            if (!msg.chatPublicKey || !msg.chatPrivateKey) {\n              decryptedContent = \"[Old message - please send a new message]\";\n              console.log('  ⚠️ Old message format detected - skipping decryption');\n            } else {\n              decryptedContent = await decryptMessageWithChatKeys(\n                msg.encryptedMessage,\n                msg.chatPublicKey,\n                msg.chatPrivateKey\n              );\n              console.log('  Decrypted content:', decryptedContent.substring(0, 50) + '...');\n            }\n            \n            const isSender = msg.senderId === user.username;\n            console.log('  Message will be positioned:', isSender ? 'RIGHT (sent)' : 'LEFT (received)');\n            \n            decryptedMessages.push({\n              id: msg._id,\n              content: decryptedContent,\n              encryptedPayload: msg.encryptedMessage,\n              timestamp: new Date(msg.timestamp).toLocaleTimeString(\"en-US\", {\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n              }),\n              isSender,\n              blockNumber: msg.blockIndex,\n              status: msg.status,\n              messageType: msg.messageType,\n              mediaUrl: msg.mediaUrl,\n              metadata: msg.metadata,\n            });\n          } catch (error) {\n            console.error('Failed to decrypt message:', error);\n          }\n        }\n        \n        setMessages(decryptedMessages);\n        setCurrentPage(1);\n        setHasMore(data.pagination.hasMore);\n        \n        if (socketRef.current && decryptedMessages.length > 0) {\n          console.log('📬 Emitting messages-seen-bulk for contact:', activeContact.name);\n          console.log('📬 Total messages loaded:', decryptedMessages.length);\n          socketRef.current.emit('messages-seen-bulk', { username: activeContact.name });\n          // Refresh contacts so unread counts update immediately after marking seen\n          try {\n            refetchContacts();\n            console.log('🔁 Refetched contacts after marking messages seen');\n          } catch (err) {\n            console.warn('Failed to refetch contacts after marking messages seen', err);\n          }\n        } else {\n          console.log('⚠️ Not emitting messages-seen-bulk:', {\n            hasSocket: !!socketRef.current,\n            messageCount: decryptedMessages.length\n          });\n        }\n      } catch (error) {\n        console.error('Error loading messages:', error);\n      } finally {\n        setIsLoadingMessages(false);\n      }\n    };\n\n    loadMessages();\n  }, [activeContactId]);\n\n  const decryptMessageWithChatKeys = async (encryptedMessage: string, chatPublicKey: string, chatPrivateKey: string): Promise<string> => {\n    try {\n      console.log('🔓 Decrypting message with chat keys...');\n      console.log('  Chat private key exists:', !!chatPrivateKey);\n      console.log('  Encrypted message exists:', !!encryptedMessage);\n      \n      if (!chatPrivateKey || !encryptedMessage) {\n        console.error('❌ Missing required decryption keys or message');\n        return \"[Encrypted Message - No Keys]\";\n      }\n      \n      const chatPayload = JSON.parse(encryptedMessage);\n      const nonce = naclUtil.decodeBase64(chatPayload.nonce);\n      const ciphertext = naclUtil.decodeBase64(chatPayload.ciphertext);\n      const privateKeyUint8 = naclUtil.decodeBase64(chatPrivateKey);\n      const sharedSecret = privateKeyUint8.slice(0, nacl.secretbox.keyLength);\n      \n      console.log('✅ Decoded chat encryption layer');\n      \n      const decrypted = nacl.secretbox.open(ciphertext, nonce, sharedSecret);\n      \n      if (!decrypted) {\n        console.error('❌ Decryption failed');\n        return \"[Encrypted Message - Decryption Failed]\";\n      }\n      \n      const decryptedText = naclUtil.encodeUTF8(decrypted);\n      console.log('✅ Successfully decrypted message');\n      return decryptedText;\n    } catch (error) {\n      console.error('❌ Decryption error:', error);\n      return \"[Encrypted Message - Error]\";\n    }\n  };\n\n  const encryptMessage = async (content: string, recipientPublicKeyBase64: string): Promise<string> => {\n    try {\n      console.log('🔐 Encryption: recipient publicKey:', recipientPublicKeyBase64?.substring(0, 20) + '...');\n      console.log('🔐 Encryption: sender privateKey exists:', !!user.privateKey);\n      console.log('🔐 Encryption: sender publicKey exists:', !!user.publicKey);\n      \n      const recipientPublicKey = naclUtil.decodeBase64(recipientPublicKeyBase64);\n      console.log('✅ Decoded recipient public key');\n      \n      const senderPrivateKey = naclUtil.decodeBase64(user.privateKey);\n      console.log('✅ Decoded sender private key');\n      \n      const senderPublicKey = naclUtil.decodeBase64(user.publicKey);\n      console.log('✅ Decoded sender public key');\n\n      const nonce = nacl.randomBytes(nacl.box.nonceLength);\n      console.log('✅ Generated nonce');\n      \n      const messageUint8 = naclUtil.decodeUTF8(content);\n      console.log('✅ Encoded message to UTF8');\n      \n      const encrypted = nacl.box(messageUint8, nonce, recipientPublicKey, senderPrivateKey);\n      console.log('✅ Message encrypted');\n\n      const payload = {\n        nonce: naclUtil.encodeBase64(nonce),\n        ciphertext: naclUtil.encodeBase64(encrypted),\n        senderPublicKey: naclUtil.encodeBase64(senderPublicKey),\n      };\n      console.log('✅ Payload created');\n\n      const finalPayload = btoa(JSON.stringify(payload));\n      console.log('✅ Payload encoded to base64');\n      return finalPayload;\n    } catch (error) {\n      console.error('❌ Encryption error:', error);\n      throw error;\n    }\n  };\n  \n  const loadOlderMessages = async () => {\n    if (!activeContactId || !hasMore || isLoadingMessages) return;\n    \n    const activeContact = contacts.find((c) => c.id === activeContactId);\n    if (!activeContact) return;\n    \n    setIsLoadingMessages(true);\n    const nextPage = currentPage + 1;\n    \n    try {\n      const response = await fetch(`/api/chats/messages/${activeContact.name}?page=${nextPage}&limit=50`, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      \n      const data = await response.json();\n      const decryptedMessages: Message[] = [];\n      \n      for (const msg of data.messages) {\n        try {\n          let decryptedContent;\n          if (!msg.chatPublicKey || !msg.chatPrivateKey) {\n            decryptedContent = \"[Old message - please send a new message]\";\n          } else {\n            decryptedContent = await decryptMessageWithChatKeys(\n              msg.encryptedMessage,\n              msg.chatPublicKey,\n              msg.chatPrivateKey\n            );\n          }\n          decryptedMessages.push({\n            id: msg._id,\n            content: decryptedContent,\n            timestamp: new Date(msg.timestamp).toLocaleTimeString(\"en-US\", {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            }),\n            isSender: msg.senderId === user.username,\n            blockNumber: msg.blockIndex,\n            status: msg.status,\n            messageType: msg.messageType,\n            mediaUrl: msg.mediaUrl,\n            metadata: msg.metadata,\n          });\n        } catch (error) {\n          console.error('Failed to decrypt message:', error);\n        }\n      }\n      \n      setMessages((prev) => [...decryptedMessages, ...prev]);\n      setCurrentPage(nextPage);\n      setHasMore(data.pagination.hasMore);\n    } catch (error) {\n      console.error('Error loading older messages:', error);\n    } finally {\n      setIsLoadingMessages(false);\n    }\n  };\n\n  const handleSendAttachment = async (\n    content: string,\n    messageType: 'text' | 'image' | 'video' | 'audio' | 'document' | 'location' | 'contact' | 'poll',\n    mediaUrl?: string,\n    metadata?: any\n  ) => {\n    if (!activeContactId || !socketRef.current) {\n      console.log('❌ Cannot send: missing activeContactId or socket');\n      return;\n    }\n\n    const activeContact = contacts.find((c) => c.id === activeContactId);\n    if (!activeContact) {\n      console.log('❌ Cannot send: active contact not found');\n      return;\n    }\n\n    try {\n      const now = Date.now();\n      const tempId = `temp-${now}`;\n      \n      tempMessageMapRef.current.set(tempId, { timestamp: now, content });\n      \n      socketRef.current.emit('send-message', {\n        to: activeContact.name,\n        message: content,\n        messageType,\n        mediaUrl,\n        metadata,\n      });\n\n      setMessages((prev) => [\n        ...prev,\n        {\n          id: tempId,\n          content,\n          timestamp: new Date(now).toLocaleTimeString(\"en-US\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          isSender: true,\n          status: 'sent',\n          messageType,\n          mediaUrl,\n          metadata,\n        },\n      ]);\n    } catch (error) {\n      console.error('Error sending attachment:', error);\n    }\n  };\n\n  const handleSendMessage = async (content: string) => {\n    if (!activeContactId || !socketRef.current) {\n      console.log('❌ Cannot send: missing activeContactId or socket');\n      return;\n    }\n\n    const activeContact = contacts.find((c) => c.id === activeContactId);\n    if (!activeContact) {\n      console.log('❌ Cannot send: active contact not found');\n      return;\n    }\n\n    console.log('📤 Sending message to:', activeContact.name);\n    console.log('📤 Contact ID (publicKey):', activeContact.id);\n    console.log('📤 Message content:', content);\n\n    try {\n      console.log('📤 Sending message...');\n      \n      const now = Date.now();\n      const tempId = `temp-${now}`;\n      \n      tempMessageMapRef.current.set(tempId, { timestamp: now, content });\n      \n      console.log('📡 Emitting send-message event to:', activeContact.name);\n      socketRef.current.emit('send-message', {\n        to: activeContact.name,\n        message: content,\n      });\n\n      const newMessage: Message = {\n        id: tempId,\n        content,\n        timestamp: new Date().toLocaleTimeString(\"en-US\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        }),\n        isSender: true,\n        status: 'sent',\n        messageType: 'text',\n      };\n      \n      console.log('💬 Adding optimistic message to UI:', tempId);\n      setMessages((prev) => [...prev, newMessage]);\n    } catch (error) {\n      console.error('❌ Failed to send message. Error details:', error);\n      console.error('❌ Error type:', typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : 'Unknown error');\n      console.error('❌ Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n    }\n  };\n\n  const activeContact = contacts.find((c) => c.id === activeContactId);\n\n  if (activeView === \"profile\") {\n    return <ProfileManagement onBack={() => setActiveView(\"chat\")} />;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden flex-col\">\n      <div className=\"flex-1 flex overflow-hidden\">\n        <div\n          className={`${\n            isSidebarOpen ? \"w-80\" : \"w-0\"\n          } h-full flex-shrink-0 transition-all duration-300 overflow-hidden md:w-80`}\n        >\n          <AppSidebar\n            contacts={contacts}\n            activeContactId={activeContactId}\n            onSelectContact={(id) => {\n              setActiveContactId(id);\n              setActiveView(\"chat\");\n              setIsSidebarOpen(false);\n            }}\n            onViewLedger={() => {\n              setActiveView(\"ledger\");\n              setIsSidebarOpen(false);\n            }}\n            onLogout={onLogout}\n          />\n        </div>\n        <div className=\"flex-1 min-w-0 flex flex-col h-full overflow-hidden\">\n          {activeView === \"chat\" && (\n            <div className=\"flex-shrink-0 flex items-center justify-between bg-midnight-dark border-b border-gray-800 px-4 py-2\">\n              <Stories />\n              <button\n                onClick={() => setActiveView(\"profile\")}\n                className=\"ml-auto\"\n                data-testid=\"button-profile\"\n              >\n                <Avatar className=\"h-10 w-10 border-2 border-swapgreen cursor-pointer hover:border-swapgreen/80 transition-colors\">\n                  <AvatarImage src={profile?.profileImage} alt={user.username} />\n                  <AvatarFallback className=\"bg-midnight-light text-white\">\n                    <User className=\"h-5 w-5\" />\n                  </AvatarFallback>\n                </Avatar>\n              </button>\n            </div>\n          )}\n          {activeView === \"chat\" ? (\n            <ChatWindow\n              contactName={activeContact?.name}\n              messages={activeContactId === activeContact?.id ? messages : []}\n              blockCount={blockchain.length - 1}\n              onSendMessage={handleSendMessage}\n              onCopyEncrypted={(messageId: string) => {\n                const msg = messages.find(m => m.id === messageId);\n                if (!msg) return;\n                const enc = (msg as any).encryptedPayload || msg.content;\n                navigator.clipboard.writeText(enc).then(() => console.log('Encrypted copied'));\n              }}\n              onCopyLink={(messageId: string) => {\n                const msg = messages.find(m => m.id === messageId);\n                if (!msg) return;\n                const link = `${window.location.origin}/block/${msg.blockNumber}#msg-${messageId}`;\n                navigator.clipboard.writeText(link).then(() => console.log('Message link copied'));\n              }}\n              // Forward messages to selected recipients\n              onForwardMessages={async (messageIds: string[], recipients: string[]) => {\n                if (!recipients || recipients.length === 0 || !socketRef.current) return;\n                for (const recipient of recipients) {\n                  for (const id of messageIds) {\n                    const msg = messages.find(m => m.id === id);\n                    if (!msg) continue;\n                    if (msg.messageType && msg.messageType !== 'text' && msg.mediaUrl) {\n                      socketRef.current.emit('send-message', {\n                        to: recipient,\n                        message: msg.content,\n                        messageType: msg.messageType,\n                        mediaUrl: msg.mediaUrl,\n                        metadata: msg.metadata,\n                      });\n                    } else {\n                      socketRef.current.emit('send-message', { to: recipient, message: msg.content });\n                    }\n                  }\n                }\n                alert('Forwarded messages');\n              }}\n              onDeleteForMe={async (messageId: string) => {\n                try {\n                  const res = await fetch(`/api/chats/messages/${messageId}/delete-me`, { method: 'POST', credentials: 'include' });\n                  if (!res.ok) throw new Error('Delete failed');\n                  setMessages(prev => prev.filter(m => m.id !== messageId));\n                } catch (err) {\n                  console.error('Failed to delete for me', err);\n                  alert('Delete failed');\n                }\n              }}\n              contacts={contacts}\n              onDeleteForBoth={async (messageId: string) => {\n                try {\n                  const res = await fetch(`/api/chats/messages/${messageId}/delete-both`, { method: 'POST', credentials: 'include' });\n                  if (!res.ok) throw new Error('Delete failed');\n                  // notify other user via socket\n                  if (socketRef.current && activeContactNameRef.current) {\n                    socketRef.current.emit('delete-message-for-both', { messageId, to: activeContactNameRef.current });\n                  }\n                  setMessages(prev => prev.filter(m => m.id !== messageId));\n                } catch (err) {\n                  console.error('Failed to delete for both', err);\n                  alert('Delete failed');\n                }\n              }}\n              onSendFile={async (file, type) => {\n                try {\n                  const formData = new FormData();\n                  formData.append('file', file);\n                  formData.append('fileType', type);\n\n                  const response = await fetch('/api/uploads/file', {\n                    method: 'POST',\n                    credentials: 'include',\n                    body: formData,\n                  });\n\n                  if (!response.ok) throw new Error('Upload failed');\n\n                  const data = await response.json();\n                  const messageContent = `📎 ${data.fileName || file.name}`;\n                  \n                  await handleSendAttachment(\n                    messageContent,\n                    type as any,\n                    data.fileUrl,\n                    { fileName: data.fileName, fileSize: data.fileSize }\n                  );\n                } catch (error) {\n                  console.error('File upload error:', error);\n                  alert('Failed to upload file. Please try again.');\n                }\n              }}\n              onSendLocation={async (location) => {\n                try {\n                  const response = await fetch('/api/uploads/location', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    credentials: 'include',\n                    body: JSON.stringify(location),\n                  });\n\n                  if (!response.ok) throw new Error('Location share failed');\n\n                  const data = await response.json();\n                  const messageContent = `📍 Location: ${data.location.address}`;\n                  \n                  await handleSendAttachment(\n                    messageContent,\n                    'location',\n                    undefined,\n                    data.location\n                  );\n                } catch (error) {\n                  console.error('Location share error:', error);\n                  alert('Failed to share location. Please try again.');\n                }\n              }}\n              onSendContact={async (contact) => {\n                try {\n                  const response = await fetch('/api/uploads/contact', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    credentials: 'include',\n                    body: JSON.stringify(contact),\n                  });\n\n                  if (!response.ok) throw new Error('Contact share failed');\n\n                  const data = await response.json();\n                  const messageContent = `👤 Contact: ${data.contact.name}`;\n                  \n                  await handleSendAttachment(\n                    messageContent,\n                    'contact',\n                    undefined,\n                    data.contact\n                  );\n                } catch (error) {\n                  console.error('Contact share error:', error);\n                  alert('Failed to share contact. Please try again.');\n                }\n              }}\n              onSendPoll={async (poll) => {\n                try {\n                  const response = await fetch('/api/uploads/poll', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    credentials: 'include',\n                    body: JSON.stringify(poll),\n                  });\n\n                  if (!response.ok) throw new Error('Poll creation failed');\n\n                  const data = await response.json();\n                  const messageContent = `📊 Poll: ${data.poll.question}`;\n                  \n                  await handleSendAttachment(\n                    messageContent,\n                    'poll',\n                    undefined,\n                    data.poll\n                  );\n                } catch (error) {\n                  console.error('Poll creation error:', error);\n                  alert('Failed to create poll. Please try again.');\n                }\n              }}\n              onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}\n              onLoadOlderMessages={loadOlderMessages}\n              hasMore={hasMore}\n              isLoadingMessages={isLoadingMessages}\n            />\n          ) : (\n            <LedgerViewer blocks={blockchain} isValid={true} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31723},"client/src/components/Stories.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Plus, X, Eye, User, Image as ImageIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\ninterface Story {\n  id: string;\n  userId: string;\n  username: string;\n  profileImage: string;\n  content: string;\n  mediaType: string;\n  backgroundColor: string;\n  image?: string;\n  createdAt: string;\n  expiresAt: string;\n  viewCount: number;\n  viewers: Array<{\n    username: string;\n    viewedAt: string;\n  }>;\n  isOwnStory: boolean;\n}\n\ninterface GroupedStories {\n  [userId: string]: Story[];\n}\n\nexport default function Stories() {\n  const { toast } = useToast();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isViewOpen, setIsViewOpen] = useState(false);\n  const [storyContent, setStoryContent] = useState('');\n  const [backgroundColor, setBackgroundColor] = useState('#1a1a1a');\n  const [storyImage, setStoryImage] = useState<string | null>(null);\n  const [mediaType, setMediaType] = useState<'text' | 'image'>('text');\n  const [currentStoryGroup, setCurrentStoryGroup] = useState<Story[]>([]);\n  const [currentStoryIndex, setCurrentStoryIndex] = useState(0);\n  const [showViewers, setShowViewers] = useState(false);\n\n  const { data: stories = {}, refetch } = useQuery<GroupedStories>({\n    queryKey: ['/api/stories'],\n  });\n\n  const createStoryMutation = useMutation({\n    mutationFn: async (data: { content: string; backgroundColor: string; mediaType: string; image?: string }) => {\n      console.log('Creating story with data:', data);\n      try {\n        const response = await apiRequest('POST', '/api/stories', {\n          content: data.content,\n          mediaType: data.mediaType,\n          backgroundColor: data.backgroundColor,\n          image: data.image,\n        });\n        console.log('Response status:', response.status, response.statusText);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('API error response:', errorText);\n          throw new Error(`API error: ${response.status} - ${errorText}`);\n        }\n        \n        const result = await response.json();\n        console.log('Story created response:', result);\n        return result;\n      } catch (error) {\n        console.error('Mutation error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      console.log('Story created successfully:', data);\n      queryClient.invalidateQueries({ queryKey: ['/api/stories'] });\n      setIsCreateOpen(false);\n      setStoryContent('');\n      setStoryImage(null);\n      setMediaType('text');\n      toast({\n        title: \"Story Posted\",\n        description: \"Your story has been posted and will expire in 24 hours.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Failed to create story:', error);\n      console.error('Error message:', error?.message);\n      console.error('Error stack:', error?.stack);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to post story. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markViewedMutation = useMutation({\n    mutationFn: async (storyId: string) => {\n      const response = await apiRequest('POST', `/api/stories/${storyId}/view`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stories'] });\n    },\n  });\n\n  const compressImage = (file: File, maxWidth: number = 800, quality: number = 0.7): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const img = new Image();\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          let width = img.width;\n          let height = img.height;\n\n          if (width > maxWidth) {\n            height = (height * maxWidth) / width;\n            width = maxWidth;\n          }\n\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext('2d');\n          ctx?.drawImage(img, 0, 0, width, height);\n\n          const compressedBase64 = canvas.toDataURL('image/jpeg', quality);\n          resolve(compressedBase64);\n        };\n        img.onerror = reject;\n        img.src = e.target?.result as string;\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      try {\n        const compressed = await compressImage(file, 800, 0.7);\n        setStoryImage(compressed);\n        setMediaType('image');\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to process image. Please try another one.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleCreateStory = () => {\n    if (mediaType === 'text' && !storyContent.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter some content for your story.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (mediaType === 'image' && !storyImage) {\n      toast({\n        title: \"Error\",\n        description: \"Please upload an image for your story.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createStoryMutation.mutate({\n      content: storyContent || 'Image story',\n      backgroundColor,\n      mediaType,\n      image: storyImage || undefined,\n    });\n  };\n\n  const handleViewStory = (userStories: Story[]) => {\n    setCurrentStoryGroup(userStories);\n    setCurrentStoryIndex(0);\n    setIsViewOpen(true);\n    \n    if (!userStories[0].isOwnStory) {\n      markViewedMutation.mutate(userStories[0].id);\n    }\n  };\n\n  const handleNextStory = () => {\n    if (currentStoryIndex < currentStoryGroup.length - 1) {\n      const nextIndex = currentStoryIndex + 1;\n      setCurrentStoryIndex(nextIndex);\n      \n      if (!currentStoryGroup[nextIndex].isOwnStory) {\n        markViewedMutation.mutate(currentStoryGroup[nextIndex].id);\n      }\n    } else {\n      setIsViewOpen(false);\n    }\n  };\n\n  const handlePrevStory = () => {\n    if (currentStoryIndex > 0) {\n      setCurrentStoryIndex(currentStoryIndex - 1);\n    }\n  };\n\n  const currentStory = currentStoryGroup[currentStoryIndex];\n  const userStories = Object.entries(stories);\n  const currentUser = JSON.parse(localStorage.getItem('user') || '{}');\n\n  const colors = [\n    '#1a1a1a', '#1e3a8a', '#7c2d12', '#831843', '#064e3b',\n    '#713f12', '#4c1d95', '#14532d', '#991b1b', '#1e40af'\n  ];\n\n  const getTextColor = (bgColor: string) => {\n    const hex = bgColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    const brightness = (r * 299 + g * 587 + b * 114) / 1000;\n    return brightness > 128 ? '#000000' : '#ffffff';\n  };\n\n  return (\n    <>\n      <div className=\"flex space-x-4 p-4 overflow-x-auto bg-midnight-dark border-b border-gray-800\">\n        <div\n          onClick={() => setIsCreateOpen(true)}\n          className=\"flex flex-col items-center space-y-1 cursor-pointer group\"\n          data-testid=\"button-create-story\"\n        >\n          <div className=\"relative\">\n            <Avatar className=\"h-16 w-16 border-2 border-dashed border-swapgreen\">\n              <AvatarFallback className=\"bg-midnight-light text-swapgreen\">\n                <Plus className=\"h-8 w-8\" />\n              </AvatarFallback>\n            </Avatar>\n          </div>\n          <span className=\"text-xs text-gray-400 group-hover:text-swapgreen\">Your Story</span>\n        </div>\n\n        {userStories.map(([userId, userStories]) => {\n          const latestStory = userStories[0];\n          const hasMultiple = userStories.length > 1;\n          \n          return (\n            <div\n              key={userId}\n              onClick={() => handleViewStory(userStories)}\n              className=\"flex flex-col items-center space-y-1 cursor-pointer group\"\n              data-testid={`story-${latestStory.username}`}\n            >\n              <div className=\"relative\">\n                <Avatar className={`h-16 w-16 ${latestStory.isOwnStory ? 'border-2 border-swapgreen' : 'ring-2 ring-chain-blue'}`}>\n                  <AvatarImage src={latestStory.profileImage} alt={latestStory.username} />\n                  <AvatarFallback className=\"bg-midnight-light text-white\">\n                    <User className=\"h-6 w-6\" />\n                  </AvatarFallback>\n                </Avatar>\n                {hasMultiple && (\n                  <div className=\"absolute -bottom-1 -right-1 bg-chain-blue text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {userStories.length}\n                  </div>\n                )}\n              </div>\n              <span className=\"text-xs text-gray-400 group-hover:text-white max-w-[64px] truncate\">\n                {latestStory.isOwnStory ? 'You' : latestStory.username}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent className=\"bg-midnight-dark border-gray-800 text-white h-[80vh] max-h-[600px] flex flex-col\">\n          <DialogHeader className=\"flex-shrink-0\">\n            <DialogTitle className=\"text-2xl\">Create Story</DialogTitle>\n            <DialogDescription className=\"text-gray-400\">\n              Share a text or image story that will be visible to your contacts for 24 hours\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 overflow-y-auto flex-1 pr-2 min-h-0\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant={mediaType === 'text' ? 'default' : 'outline'}\n                onClick={() => {\n                  setMediaType('text');\n                  setStoryImage(null);\n                }}\n                className={mediaType === 'text' ? 'bg-swapgreen text-black' : 'border-gray-700 text-white'}\n                data-testid=\"button-text-story\"\n              >\n                Text\n              </Button>\n              <Button\n                variant={mediaType === 'image' ? 'default' : 'outline'}\n                onClick={() => setMediaType('image')}\n                className={mediaType === 'image' ? 'bg-swapgreen text-black' : 'border-gray-700 text-white'}\n                data-testid=\"button-image-story\"\n              >\n                <ImageIcon className=\"h-4 w-4 mr-2\" />\n                Image\n              </Button>\n            </div>\n\n            {mediaType === 'text' ? (\n              <>\n                <div>\n                  <label className=\"text-sm text-gray-400 mb-2 block\">Background Color</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {colors.map((color) => (\n                      <button\n                        key={color}\n                        onClick={() => setBackgroundColor(color)}\n                        className={`h-10 w-10 rounded-full border-2 ${\n                          backgroundColor === color ? 'border-swapgreen scale-110' : 'border-gray-700'\n                        } transition-transform`}\n                        style={{ backgroundColor: color }}\n                        data-testid={`color-${color}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm text-gray-400 mb-2 block\">Content</label>\n                  <Textarea\n                    value={storyContent}\n                    onChange={(e) => setStoryContent(e.target.value)}\n                    placeholder=\"What's on your mind?\"\n                    className=\"bg-midnight-light border-gray-700 text-white min-h-[100px]\"\n                    maxLength={300}\n                    data-testid=\"textarea-story-content\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">{storyContent.length}/300</p>\n                </div>\n\n                <div>\n                  <label className=\"text-sm text-gray-400 mb-2 block\">Preview</label>\n                  <div \n                    className=\"rounded-lg p-4 flex items-center justify-center text-center min-h-[120px]\"\n                    style={{ backgroundColor }}\n                  >\n                    <p \n                      className=\"text-base break-words max-w-full px-2 font-medium\"\n                      style={{ color: getTextColor(backgroundColor) }}\n                    >\n                      {storyContent || \"Your story preview...\"}\n                    </p>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <div>\n                <label className=\"text-sm text-gray-400 mb-2 block\">Upload Image</label>\n                <div className=\"flex flex-col items-center space-y-4\">\n                  {storyImage ? (\n                    <div className=\"relative w-full\">\n                      <img \n                        src={storyImage} \n                        alt=\"Story preview\" \n                        className=\"w-full max-h-64 object-cover rounded-lg\"\n                      />\n                      <Button\n                        size=\"icon\"\n                        variant=\"destructive\"\n                        onClick={() => setStoryImage(null)}\n                        className=\"absolute top-2 right-2\"\n                        data-testid=\"button-remove-image\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ) : (\n                    <label\n                      htmlFor=\"story-image\"\n                      className=\"w-full h-40 border-2 border-dashed border-gray-700 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-swapgreen transition-colors\"\n                    >\n                      <ImageIcon className=\"h-12 w-12 text-gray-400 mb-2\" />\n                      <span className=\"text-gray-400\">Click to upload image</span>\n                      <input\n                        id=\"story-image\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleImageUpload}\n                        data-testid=\"input-story-image\"\n                      />\n                    </label>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4 border-t border-gray-800 flex-shrink-0\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsCreateOpen(false);\n                setStoryContent('');\n                setStoryImage(null);\n                setMediaType('text');\n              }}\n              className=\"border-gray-700 text-white hover:bg-midnight-light\"\n              data-testid=\"button-cancel-story\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleCreateStory}\n              disabled={createStoryMutation.isPending || (mediaType === 'text' && !storyContent.trim()) || (mediaType === 'image' && !storyImage)}\n              className=\"bg-swapgreen hover:bg-swapgreen/90 text-black font-semibold disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-post-story\"\n            >\n              {createStoryMutation.isPending ? 'Posting...' : 'Post Story'}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isViewOpen} onOpenChange={setIsViewOpen}>\n        <DialogContent className=\"bg-transparent border-0 max-w-md p-0 overflow-hidden\" aria-describedby=\"story-viewer-description\">\n          <DialogDescription id=\"story-viewer-description\" className=\"sr-only\">\n            Story viewer - View stories from your contacts\n          </DialogDescription>\n          {currentStory && (\n            <div className=\"relative h-[600px]\">\n              <div className=\"absolute top-0 left-0 right-0 p-4 bg-gradient-to-b from-black/50 to-transparent z-10\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar className=\"h-10 w-10 border-2 border-white\">\n                      <AvatarImage src={currentStory.profileImage} alt={currentStory.username} />\n                      <AvatarFallback className=\"bg-midnight-light text-white\">\n                        <User className=\"h-5 w-5\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"text-white font-medium text-sm\">{currentStory.username}</p>\n                      <p className=\"text-gray-300 text-xs\">\n                        {format(new Date(currentStory.createdAt), 'h:mm a')}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {currentStory.isOwnStory && (\n                      <button\n                        onClick={() => setShowViewers(!showViewers)}\n                        className=\"bg-black/30 hover:bg-black/50 rounded-full p-2 text-white\"\n                        data-testid=\"button-show-viewers\"\n                      >\n                        <Eye className=\"h-5 w-5\" />\n                        <span className=\"ml-1 text-sm\">{currentStory.viewCount}</span>\n                      </button>\n                    )}\n                    <button\n                      onClick={() => setIsViewOpen(false)}\n                      className=\"bg-black/30 hover:bg-black/50 rounded-full p-2 text-white\"\n                      data-testid=\"button-close-story\"\n                    >\n                      <X className=\"h-5 w-5\" />\n                    </button>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-1 mt-2\">\n                  {currentStoryGroup.map((_, idx) => (\n                    <div\n                      key={idx}\n                      className={`h-0.5 flex-1 rounded-full ${\n                        idx === currentStoryIndex ? 'bg-white' : idx < currentStoryIndex ? 'bg-gray-400' : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n\n              {currentStory.mediaType === 'image' && currentStory.image ? (\n                <div\n                  onClick={handleNextStory}\n                  className=\"absolute inset-0 cursor-pointer\"\n                >\n                  <img \n                    src={currentStory.image} \n                    alt=\"Story\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div\n                  onClick={handleNextStory}\n                  className=\"absolute inset-0 flex items-center justify-center p-8 cursor-pointer\"\n                  style={{ backgroundColor: currentStory.backgroundColor }}\n                >\n                  <p \n                    className=\"text-xl text-center break-words max-w-full font-medium\"\n                    style={{ color: getTextColor(currentStory.backgroundColor) }}\n                  >\n                    {currentStory.content}\n                  </p>\n                </div>\n              )}\n\n              {currentStoryIndex > 0 && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handlePrevStory();\n                  }}\n                  className=\"absolute left-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 rounded-full p-2 text-white z-20\"\n                  data-testid=\"button-prev-story\"\n                >\n                  ‹\n                </button>\n              )}\n\n              {showViewers && currentStory.isOwnStory && (\n                <div className=\"absolute bottom-0 left-0 right-0 bg-black/80 p-4 max-h-48 overflow-y-auto\">\n                  <h3 className=\"text-white font-medium mb-2\">Viewers ({currentStory.viewCount})</h3>\n                  {currentStory.viewers.map((viewer, idx) => (\n                    <div key={idx} className=\"flex items-center justify-between py-2 border-b border-gray-700 last:border-0\">\n                      <span className=\"text-white text-sm\">{viewer.username}</span>\n                      <span className=\"text-gray-400 text-xs\">\n                        {format(new Date(viewer.viewedAt), 'h:mm a')}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":21366},"client/src/components/EmptyState.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface EmptyStateProps {\n  image: string;\n  title: string;\n  description: string;\n  className?: string;\n}\n\nexport default function EmptyState({\n  image,\n  title,\n  description,\n  className,\n}: EmptyStateProps) {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center h-full p-8 text-center\",\n        className\n      )}\n      data-testid=\"empty-state\"\n    >\n      <img\n        src={image}\n        alt={title}\n        className=\"w-64 h-48 object-contain mb-6 opacity-80\"\n      />\n      <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n      <p className=\"text-sm text-muted-foreground max-w-sm\">{description}</p>\n    </div>\n  );\n}\n","size_bytes":711},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    // listen on LAN so other devices can reach the dev server\n    host: '0.0.0.0',\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    proxy: {\n      // Proxy API requests to the backend dev server and preserve client IP\n      '/api': {\n        target: 'http://localhost:5000',\n        changeOrigin: true,\n        secure: false,\n        configure: (proxy, options) => {\n          // Ensure X-Forwarded-For contains the original client IP\n          proxy.on('proxyReq', (proxyReq, req, res) => {\n            try {\n              const realIp = req.headers['x-forwarded-for']?.toString().split(',')[0]?.trim() || req.socket?.remoteAddress || req.connection?.remoteAddress || '';\n              if (realIp) {\n                proxyReq.setHeader('X-Forwarded-For', realIp);\n              }\n            } catch (e) {\n              // ignore\n            }\n          });\n        },\n      },\n    },\n  },\n});\n\n","size_bytes":1922},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes/chats.js":{"content":"import express from 'express';\nimport Chat from '../models/Chat.js';\nimport { authenticateToken } from '../middleware/auth.js';\nimport { serverDecrypt } from '../lib/chatCrypto.js';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst router = express.Router();\n\nfunction getChatRoomId(user1, user2) {\n  return [user1, user2].sort().join('_');\n}\n\nrouter.get('/messages/:username', authenticateToken, async (req, res) => {\n  try {\n    const { username } = req.params;\n    const { page = 1, limit = 50 } = req.query;\n    const currentUser = req.user.username;\n    \n    const chatRoomId = getChatRoomId(currentUser, username);\n    \n    const skip = (parseInt(page) - 1) * parseInt(limit);\n    \n    const messages = await Chat.find({ chatRoomId })\n      .sort({ timestamp: -1 })\n      .skip(skip)\n      .limit(parseInt(limit));\n    \n    // Filter out any messages that have been deleted for the current user\n    const decryptedMessages = [];\n    for (const msg of messages) {\n      try {\n        const msgObj = msg.toObject({ getters: true });\n\n        // If this message was marked deleted for the requesting user, skip it\n        if (msgObj.deletedFor && Array.isArray(msgObj.deletedFor) && msgObj.deletedFor.includes(req.user.username)) {\n          continue;\n        }\n\n        if (msgObj.encryptedMessage && msgObj.chatPublicKey && msgObj.chatPrivateKey) {\n          try {\n            msgObj.encryptedMessage = serverDecrypt(msgObj.encryptedMessage);\n          } catch (error) {\n            console.error('Failed to decrypt message server layer:', error);\n          }\n        }\n\n        decryptedMessages.push(msgObj);\n      } catch (err) {\n        console.error('Error processing message for fetch:', err);\n      }\n    }\n    \n    // total should count only messages that aren't deleted for this user\n    const totalCandidates = await Chat.find({ chatRoomId }).select('deletedFor').lean();\n    let total = 0;\n    for (const c of totalCandidates) {\n      try {\n        const decryptedDeletedFor = (c.deletedFor || []).map(d => {\n          try { return decryptField(d); } catch (e) { return d; }\n        });\n        if (!decryptedDeletedFor.includes(req.user.username)) total += 1;\n      } catch (err) {\n        total += 1; // if decryption fails, count it conservatively\n      }\n    }\n    \n    res.json({\n      messages: decryptedMessages.reverse(),\n      pagination: {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        total,\n        hasMore: skip + messages.length < total,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching messages:', error);\n    res.status(500).json({ message: 'Error fetching messages' });\n  }\n});\n\nrouter.patch('/messages/:messageId/status', authenticateToken, async (req, res) => {\n  try {\n    const { messageId } = req.params;\n    const { status } = req.body;\n    \n    if (!['delivered', 'seen'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid status' });\n    }\n    \n    const message = await Chat.findByIdAndUpdate(\n      messageId,\n      { status },\n      { new: true }\n    );\n    \n    if (!message) {\n      return res.status(404).json({ message: 'Message not found' });\n    }\n    \n    res.json({ message: 'Status updated', status: message.status });\n  } catch (error) {\n    console.error('Error updating message status:', error);\n    res.status(500).json({ message: 'Error updating message status' });\n  }\n});\n\nrouter.patch('/messages/bulk-status', authenticateToken, async (req, res) => {\n  try {\n    const { messageIds, status } = req.body;\n    const currentUser = req.user.username;\n    \n    if (!['delivered', 'seen'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid status' });\n    }\n    \n    // The stored receiverId values are encrypted non-deterministically,\n    // so re-encrypting the username will not match the saved ciphertext.\n    // Find the candidate messages, decrypt receiverId and update only the\n    // messages that actually belong to the current user.\n    const candidates = await Chat.find({ _id: { $in: messageIds } })\n      .select('_id receiverId')\n      .lean();\n\n    const idsToUpdate = [];\n    for (const c of candidates) {\n      try {\n        const decryptedReceiver = decryptField(c.receiverId);\n        if (decryptedReceiver === currentUser) idsToUpdate.push(c._id.toString());\n      } catch (err) {\n        console.warn('Failed to decrypt receiverId for message', c._id, err);\n      }\n    }\n\n    let modifiedCount = 0;\n    if (idsToUpdate.length > 0) {\n      const updateRes = await Chat.updateMany({ _id: { $in: idsToUpdate } }, { status });\n      modifiedCount = updateRes.modifiedCount || 0;\n    }\n\n    res.json({ message: 'Status updated', updated: modifiedCount });\n  } catch (error) {\n    console.error('Error updating message status:', error);\n    res.status(500).json({ message: 'Error updating message status' });\n  }\n});\n\nrouter.patch('/messages/seen/:username', authenticateToken, async (req, res) => {\n  try {\n    const { username } = req.params;\n    const currentUser = req.user.username;\n    \n    const chatRoomId = getChatRoomId(currentUser, username);\n\n    // Fetch candidate messages in the chat room, then decrypt receiverId\n    // and update only those where the decrypted receiver matches the\n    // current user. This handles the non-deterministic encryption output.\n    const candidates = await Chat.find({ chatRoomId, status: { $ne: 'seen' } })\n      .select('_id receiverId')\n      .lean();\n\n    const idsToUpdate = [];\n    for (const c of candidates) {\n      try {\n        const decryptedReceiver = decryptField(c.receiverId);\n        if (decryptedReceiver === currentUser) idsToUpdate.push(c._id.toString());\n      } catch (err) {\n        console.warn('Failed to decrypt receiverId for message', c._id, err);\n      }\n    }\n\n    let modifiedCount = 0;\n    if (idsToUpdate.length > 0) {\n      const updateRes = await Chat.updateMany({ _id: { $in: idsToUpdate } }, { status: 'seen' });\n      modifiedCount = updateRes.modifiedCount || 0;\n    }\n\n    res.json({ message: 'Messages marked as seen', updated: modifiedCount });\n  } catch (error) {\n    console.error('Error marking messages as seen:', error);\n    res.status(500).json({ message: 'Error marking messages as seen' });\n  }\n});\n\nrouter.delete('/messages/:messageId', authenticateToken, async (req, res) => {\n  try {\n    const { messageId } = req.params;\n    const currentUser = req.user.username;\n    \n    // Retrieve the message and compare the decrypted senderId to ensure\n    // only the sender can delete the message. Do not try to re-encrypt the\n    // username since encryption is non-deterministic.\n    const message = await Chat.findById(messageId).select('senderId').lean();\n    if (!message) {\n      return res.status(404).json({ message: 'Message not found or unauthorized' });\n    }\n\n    try {\n      const decryptedSender = decryptField(message.senderId);\n      if (decryptedSender !== currentUser) {\n        return res.status(404).json({ message: 'Message not found or unauthorized' });\n      }\n    } catch (err) {\n      console.warn('Failed to decrypt senderId for message', messageId, err);\n      return res.status(500).json({ message: 'Error deleting message' });\n    }\n\n    await Chat.findByIdAndDelete(messageId);\n    res.json({ message: 'Message deleted' });\n  } catch (error) {\n    console.error('Error deleting message:', error);\n    res.status(500).json({ message: 'Error deleting message' });\n  }\n});\n\n// Delete for both: remove message if requester is sender or receiver\nrouter.post('/messages/:messageId/delete-both', authenticateToken, async (req, res) => {\n  try {\n    const { messageId } = req.params;\n    const currentUser = req.user.username;\n\n    const message = await Chat.findById(messageId).select('senderId receiverId').lean();\n    if (!message) {\n      return res.status(404).json({ message: 'Message not found' });\n    }\n\n    try {\n      const senderPlain = decryptField(message.senderId);\n\n      // Only the original sender can delete a message for everyone.\n      if (senderPlain !== currentUser) {\n        return res.status(403).json({ message: 'Only the sender can delete this message for everyone' });\n      }\n    } catch (err) {\n      console.warn('Failed to decrypt senderId for delete-both', err);\n      return res.status(500).json({ message: 'Error processing request' });\n    }\n\n    await Chat.findByIdAndDelete(messageId);\n    res.json({ message: 'Deleted for both' });\n  } catch (error) {\n    console.error('Error deleting message for both:', error);\n    res.status(500).json({ message: 'Error deleting message' });\n  }\n});\n\n// Delete for me: mark this message as deleted for the requesting user only\nrouter.post('/messages/:messageId/delete-me', authenticateToken, async (req, res) => {\n  try {\n    const { messageId } = req.params;\n    const currentUser = req.user.username;\n\n    const message = await Chat.findById(messageId).select('senderId receiverId deletedFor').lean();\n    if (!message) return res.status(404).json({ message: 'Message not found' });\n\n    try {\n      const senderPlain = decryptField(message.senderId);\n      const receiverPlain = decryptField(message.receiverId);\n      if (senderPlain !== currentUser && receiverPlain !== currentUser) {\n        return res.status(403).json({ message: 'Not authorized' });\n      }\n    } catch (err) {\n      console.warn('Failed to decrypt ids for delete-me', err);\n      return res.status(500).json({ message: 'Error processing request' });\n    }\n\n    // push encrypted username into deletedFor array\n    try {\n      await Chat.findByIdAndUpdate(messageId, { $push: { deletedFor: encryptField(currentUser) } });\n      return res.json({ message: 'Deleted for me' });\n    } catch (err) {\n      console.error('Failed to mark deletedFor:', err);\n      return res.status(500).json({ message: 'Error marking message deleted' });\n    }\n  } catch (error) {\n    console.error('Error deleting message for me:', error);\n    res.status(500).json({ message: 'Error deleting message' });\n  }\n});\n\nexport default router;\n","size_bytes":10067},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/AppSidebar.tsx":{"content":"import { Search, Plus, BookOpen, LogOut, User, X, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ContactItem from \"./ContactItem\";\nimport UserProfilePreview from \"./UserProfilePreview\";\nimport FriendRequests from \"./FriendRequests\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport lockblipLogo from \"@assets/Untitled design_1761899121550.png\";\n\ninterface Contact {\n  id: string;\n  name: string;\n  fullName?: string;\n  phone?: string;\n  lastMessage?: string;\n  timestamp?: string;\n  unreadCount?: number;\n  isOnline?: boolean;\n  profileImage?: string;\n  description?: string;\n}\n\ninterface SearchResult {\n  id: string;\n  username: string;\n  fullName: string;\n  description: string;\n  profileImage: string;\n  publicKey: string;\n  createdAt: string;\n}\n\ninterface AppSidebarProps {\n  contacts: Contact[];\n  activeContactId?: string;\n  onSelectContact: (id: string) => void;\n  onViewLedger: () => void;\n  onLogout: () => void;\n}\n\nexport default function AppSidebar({\n  contacts,\n  activeContactId,\n  onSelectContact,\n  onViewLedger,\n  onLogout,\n}: AppSidebarProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isSearchMode, setIsSearchMode] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<SearchResult | null>(null);\n  const [showFriendRequests, setShowFriendRequests] = useState(false);\n  \n  const user = JSON.parse(localStorage.getItem('user') || '{}');\n\n  const { data: requestsData } = useQuery<{ received: any[], sent: any[] }>({\n    queryKey: ['/api/connections/friend-requests', user.username],\n    enabled: !!user.username,\n    refetchInterval: 30000,\n  });\n\n  const { data: searchResults = [] } = useQuery<SearchResult[]>({\n    queryKey: ['/api/users/search', { query: searchQuery }],\n    enabled: isSearchMode && searchQuery.length >= 2,\n  });\n\n  const filteredContacts = isSearchMode \n    ? contacts \n    : contacts.filter((contact) => {\n        if (!searchQuery) return true;\n        const query = searchQuery.toLowerCase();\n        const searchWithoutAt = query.startsWith('@') ? query.substring(1) : query;\n        \n        return (\n          contact.name.toLowerCase().includes(searchWithoutAt) ||\n          contact.fullName?.toLowerCase().includes(query) ||\n          contact.phone?.includes(searchQuery) ||\n          `@${contact.name}`.toLowerCase().includes(query)\n        );\n      });\n\n  const handleStartChat = (publicKey: string, username: string) => {\n    const contact = contacts.find(c => c.id === publicKey);\n    if (contact) {\n      onSelectContact(contact.id);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"h-full flex flex-col bg-sidebar border-r border-sidebar-border\">\n        <div className=\"flex-shrink-0 p-4 border-b border-sidebar-border\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-2\">\n              <img src={lockblipLogo} alt=\"LockBlip\" className=\"h-8 w-8 object-contain rounded-lg shadow-md\" />\n              <h1 className=\"text-xl font-bold\">LockBlip</h1>\n            </div>\n            <div className=\"flex gap-1\">\n              <ThemeToggle />\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={() => setShowFriendRequests(true)}\n                className=\"relative hover:bg-swapgreen/10\"\n                data-testid=\"button-friend-requests\"\n              >\n                <Bell className=\"h-5 w-5\" />\n                {requestsData?.received && requestsData.received.length > 0 && (\n                  <Badge \n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs font-semibold bg-swapgreen text-white rounded-full\"\n                    data-testid=\"badge-friend-request-count\"\n                  >\n                    {requestsData.received.length}\n                  </Badge>\n                )}\n              </Button>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={() => setIsSearchMode(!isSearchMode)}\n                data-testid=\"button-add-contact\"\n              >\n                {isSearchMode ? <X className=\"h-5 w-5\" /> : <Plus className=\"h-5 w-5\" />}\n              </Button>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder={isSearchMode ? \"Search users (@username)...\" : \"Search contacts...\"}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-9\"\n              data-testid=\"input-search-users\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-2\">\n          {isSearchMode ? (\n            <div className=\"space-y-2\">\n              {searchQuery.length < 2 ? (\n                <div className=\"text-center py-8 px-4\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Type at least 2 characters to search users\n                  </p>\n                </div>\n              ) : searchResults.length === 0 ? (\n                <div className=\"text-center py-8 px-4\">\n                  <p className=\"text-sm text-muted-foreground\">No users found</p>\n                </div>\n              ) : (\n                searchResults.map((user) => (\n                  <div\n                    key={user.id}\n                    onClick={() => setSelectedUser(user)}\n                    className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-sidebar-hover cursor-pointer transition-colors\"\n                    data-testid={`user-card-${user.username}`}\n                  >\n                    <Avatar className=\"h-12 w-12 border-2 border-swapgreen\">\n                      <AvatarImage src={user.profileImage} alt={user.username} />\n                      <AvatarFallback className=\"bg-midnight-light text-white\">\n                        <User className=\"h-6 w-6\" />\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-white truncate\">@{user.username}</p>\n                      <p className=\"text-sm text-gray-400 truncate\">{user.fullName}</p>\n                      {user.description && (\n                        <p className=\"text-xs text-gray-500 truncate mt-1\">{user.description}</p>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          ) : (\n            filteredContacts.length === 0 ? (\n              <div className=\"text-center py-8 px-4\">\n                <p className=\"text-sm text-muted-foreground\">No contacts found</p>\n              </div>\n            ) : (\n              <div className=\"space-y-1\">\n                {filteredContacts.map((contact) => (\n                  <ContactItem\n                    key={contact.id}\n                    {...contact}\n                    isActive={contact.id === activeContactId}\n                    onClick={() => onSelectContact(contact.id)}\n                  />\n                ))}\n              </div>\n            )\n          )}\n        </div>\n\n        <div className=\"flex-shrink-0 p-4 border-t border-sidebar-border space-y-2\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full justify-start gap-2\"\n            onClick={onLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            Logout\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"w-full justify-start gap-2\"\n            onClick={onViewLedger}\n            data-testid=\"button-view-ledger\"\n          >\n            <BookOpen className=\"h-4 w-4\" />\n            View Blockchain Ledger\n          </Button>\n        </div>\n      </div>\n\n      <UserProfilePreview\n        user={selectedUser}\n        open={!!selectedUser}\n        onClose={() => setSelectedUser(null)}\n        onStartChat={handleStartChat}\n      />\n      \n      <FriendRequests\n        open={showFriendRequests}\n        onClose={() => setShowFriendRequests(false)}\n        username={user.username}\n      />\n    </>\n  );\n}\n","size_bytes":8597},"server/migrations/migrate-chatroom-ids.js":{"content":"import mongoose from 'mongoose';\nimport Chat from '../models/Chat.js';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nasync function migrateChatRoomIds() {\n  try {\n    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/swapchat';\n    await mongoose.connect(MONGODB_URI);\n    console.log('✓ MongoDB connected');\n\n    const allChats = await Chat.find({}).lean({ getters: true });\n    console.log(`Found ${allChats.length} chat messages to migrate`);\n\n    let updated = 0;\n    let skipped = 0;\n\n    for (const chat of allChats) {\n      try {\n        const senderId = chat.senderId;\n        const receiverId = chat.receiverId;\n        \n        if (!senderId || !receiverId) {\n          console.log(`Skipping chat ${chat._id} - missing sender or receiver`);\n          skipped++;\n          continue;\n        }\n\n        const plainChatRoomId = [senderId, receiverId].sort().join('_');\n        \n        if (chat.chatRoomId === plainChatRoomId) {\n          skipped++;\n          continue;\n        }\n\n        await Chat.updateOne(\n          { _id: chat._id },\n          { $set: { chatRoomId: plainChatRoomId } }\n        );\n        \n        updated++;\n        \n        if (updated % 100 === 0) {\n          console.log(`Progress: ${updated} messages updated, ${skipped} skipped`);\n        }\n      } catch (error) {\n        console.error(`Error updating chat ${chat._id}:`, error.message);\n      }\n    }\n\n    console.log('\\n✓ Migration completed!');\n    console.log(`  Updated: ${updated} messages`);\n    console.log(`  Skipped: ${skipped} messages (already correct or invalid)`);\n    console.log(`  Total: ${allChats.length} messages`);\n\n    await mongoose.disconnect();\n    console.log('✓ MongoDB disconnected');\n    process.exit(0);\n  } catch (error) {\n    console.error('Migration failed:', error);\n    process.exit(1);\n  }\n}\n\nmigrateChatRoomIds();\n","size_bytes":1869},"client/src/components/ContactItem.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ContactItemProps {\n  name: string;\n  lastMessage?: string;\n  timestamp?: string;\n  unreadCount?: number;\n  isActive?: boolean;\n  isOnline?: boolean;\n  onClick?: () => void;\n}\n\nexport default function ContactItem({\n  name,\n  lastMessage,\n  timestamp,\n  unreadCount = 0,\n  isActive = false,\n  isOnline = false,\n  onClick,\n}: ContactItemProps) {\n  const initials = name\n    .split(\" \")\n    .map((n) => n[0])\n    .join(\"\")\n    .toUpperCase()\n    .slice(0, 2);\n\n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        \"w-full flex items-center gap-3 p-3 rounded-md transition-colors hover-elevate active-elevate-2\",\n        isActive && \"bg-sidebar-accent\"\n      )}\n      data-testid={`contact-${name.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <div className=\"relative flex-shrink-0\">\n        <Avatar className=\"h-10 w-10\">\n          <AvatarFallback className=\"bg-primary/20 text-primary font-semibold text-sm\">\n            {initials}\n          </AvatarFallback>\n        </Avatar>\n        {isOnline && (\n          <div className=\"absolute bottom-0 right-0 h-3 w-3 bg-primary rounded-full border-2 border-sidebar\" />\n        )}\n      </div>\n      <div className=\"flex-1 min-w-0 text-left\">\n        <div className=\"flex items-center justify-between mb-0.5\">\n          <span className=\"font-medium text-sm truncate\">{name}</span>\n          {timestamp && (\n            <span className=\"text-xs text-muted-foreground flex-shrink-0 ml-2\">\n              {timestamp}\n            </span>\n          )}\n        </div>\n        {lastMessage && (\n          <p className=\"text-xs text-muted-foreground truncate\">\n            {lastMessage}\n          </p>\n        )}\n      </div>\n      {unreadCount > 0 && (\n        <Badge\n          variant=\"default\"\n          className=\"ml-auto flex-shrink-0 h-5 min-w-5 px-1.5 text-xs\"\n          data-testid={`badge-unread-${unreadCount}`}\n        >\n          {unreadCount}\n        </Badge>\n      )}\n    </button>\n  );\n}\n","size_bytes":2118},"client/src/components/examples/MessageBubble.tsx":{"content":"import MessageBubble from '../MessageBubble';\n\nexport default function MessageBubbleExample() {\n  return (\n    <div className=\"p-6 space-y-2 bg-background max-w-2xl\">\n      <MessageBubble\n        content=\"Hey! How does blockchain messaging work?\"\n        timestamp=\"10:30 AM\"\n        isSender={false}\n        blockNumber={42}\n        isEncrypted={true}\n      />\n      <MessageBubble\n        content=\"Each message becomes a block in the chain, cryptographically linked to the previous one. It's tamper-proof!\"\n        timestamp=\"10:31 AM\"\n        isSender={true}\n        blockNumber={43}\n        isDelivered={true}\n        isRead={true}\n      />\n      <MessageBubble\n        content=\"That's amazing! So nobody can modify past messages?\"\n        timestamp=\"10:32 AM\"\n        isSender={false}\n        blockNumber={44}\n      />\n    </div>\n  );\n}\n","size_bytes":842},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/routes/uploads.ts":{"content":"import express from 'express';\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\nimport { authenticateToken } from '../middleware/auth.js';\n\nconst router = express.Router();\n\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 50 * 1024 * 1024,\n  },\n  fileFilter: (req, file, cb) => {\n    // Validate by extension and MIME type. The previous check tested the\n    // mimetype against an extension-only regex which caused valid audio\n    // uploads (e.g. mimetype 'audio/mpeg') to be rejected. Use separate\n    // patterns for extensions and MIME types and accept when either is a\n    // valid known type.\n    const allowedExt = /\\.(jpeg|jpg|png|gif|mp4|mov|avi|mp3|wav|ogg|pdf|doc|docx|csv|xlsx|xls)$/i;\n    const allowedMime = /^(image\\/|video\\/|audio\\/|application\\/pdf|application\\/msword|application\\/vnd\\.openxmlformats-officedocument\\.wordprocessingml\\.document|text\\/csv|application\\/vnd\\.ms-excel|application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet)/i;\n\n    const extname = allowedExt.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedMime.test(file.mimetype || '');\n\n    if (extname || mimetype) {\n      return cb(null, true);\n    }\n\n    cb(new Error('Invalid file type'));\n  }\n});\n\nrouter.post('/file', authenticateToken, upload.single('file'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ error: 'No file uploaded' });\n    }\n\n    const fileUrl = `/uploads/${req.file.filename}`;\n    const fileType = req.body.fileType || 'file';\n\n    res.json({\n      success: true,\n      fileUrl,\n      fileType,\n      fileName: req.file.originalname,\n      fileSize: req.file.size,\n    });\n  } catch (error) {\n    console.error('File upload error:', error);\n    res.status(500).json({ error: 'Failed to upload file' });\n  }\n});\n\nrouter.post('/location', authenticateToken, async (req, res) => {\n  try {\n    const { latitude, longitude, address } = req.body;\n\n    if (!latitude || !longitude) {\n      return res.status(400).json({ error: 'Latitude and longitude are required' });\n    }\n\n    res.json({\n      success: true,\n      location: {\n        latitude,\n        longitude,\n        address: address || `${latitude}, ${longitude}`,\n      },\n    });\n  } catch (error) {\n    console.error('Location share error:', error);\n    res.status(500).json({ error: 'Failed to process location' });\n  }\n});\n\nrouter.post('/contact', authenticateToken, async (req, res) => {\n  try {\n    const { name, phone, email } = req.body;\n\n    if (!name || !phone) {\n      return res.status(400).json({ error: 'Name and phone are required' });\n    }\n\n    res.json({\n      success: true,\n      contact: {\n        name,\n        phone,\n        email: email || '',\n      },\n    });\n  } catch (error) {\n    console.error('Contact share error:', error);\n    res.status(500).json({ error: 'Failed to process contact' });\n  }\n});\n\nrouter.post('/poll', authenticateToken, async (req, res) => {\n  try {\n    const { question, options } = req.body;\n\n    if (!question || !options || !Array.isArray(options) || options.length < 2) {\n      return res.status(400).json({ error: 'Question and at least 2 options are required' });\n    }\n\n    const poll = {\n      question,\n      options: options.map((opt: string) => ({\n        text: opt,\n        votes: 0,\n        voters: [],\n      })),\n      totalVotes: 0,\n    };\n\n    res.json({\n      success: true,\n      poll,\n    });\n  } catch (error) {\n    console.error('Poll creation error:', error);\n    res.status(500).json({ error: 'Failed to create poll' });\n  }\n});\n\nrouter.post('/poll/vote', authenticateToken, async (req, res) => {\n  try {\n    const { pollId, optionIndex } = req.body;\n    const username = (req as any).user?.username;\n\n    if (!username) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n\n    res.json({\n      success: true,\n      message: 'Vote recorded',\n    });\n  } catch (error) {\n    console.error('Poll vote error:', error);\n    res.status(500).json({ error: 'Failed to record vote' });\n  }\n});\n\nexport default router;\n","size_bytes":4547},"server/routes/stories.js":{"content":"import express from 'express';\nimport { authenticateToken } from '../middleware/auth.js';\nimport Story from '../models/Story.js';\nimport StoryView from '../models/StoryView.js';\nimport User from '../models/User.js';\nimport Connection from '../models/Connection.js';\n\nconst router = express.Router();\n\nrouter.post('/', authenticateToken, async (req, res) => {\n  try {\n    const { content, mediaType, backgroundColor, image } = req.body;\n\n    if (!content) {\n      return res.status(400).json({ error: 'Content is required' });\n    }\n\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n    const story = new Story({\n      userId: req.user.id,\n      username: user.username,\n      content,\n      mediaType: mediaType || 'text',\n      backgroundColor: backgroundColor || '#1a1a1a',\n      image: image || '',\n      expiresAt,\n    });\n\n    await story.save();\n\n    res.json({\n      id: story._id,\n      userId: story.userId,\n      username: story.username,\n      content: story.content,\n      mediaType: story.mediaType,\n      backgroundColor: story.backgroundColor,\n      image: story.image,\n      createdAt: story.createdAt,\n      expiresAt: story.expiresAt,\n      viewCount: 0,\n      viewers: [],\n    });\n  } catch (error) {\n    console.error('Create story error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.get('/', authenticateToken, async (req, res) => {\n  try {\n    const currentTime = new Date();\n    const currentUser = await User.findById(req.user.id);\n    if (!currentUser) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const connections = await Connection.find({\n      $or: [\n        { sender: currentUser.username, status: 'accepted' },\n        { receiver: currentUser.username, status: 'accepted' }\n      ]\n    }).lean();\n\n    const friendUsernames = connections.map(conn => \n      conn.sender === currentUser.username ? conn.receiver : conn.sender\n    );\n\n    const stories = await Story.find({\n      expiresAt: { $gt: currentTime },\n      $or: [\n        { userId: req.user.id },\n        { username: { $in: friendUsernames } }\n      ]\n    }).sort({ createdAt: -1 });\n\n    const storyViews = await StoryView.find({\n      storyId: { $in: stories.map(s => s._id) }\n    });\n\n    const allUsers = await User.find({\n      $or: [\n        { _id: req.user.id },\n        { username: { $in: friendUsernames } }\n      ]\n    });\n    const userMap = {};\n    allUsers.forEach(user => {\n      userMap[user._id.toString()] = {\n        username: user.username,\n        profileImage: user.profileImage || '',\n      };\n    });\n\n    const storiesWithViews = await Promise.all(stories.map(async (story) => {\n      const views = storyViews.filter(v => v.storyId.toString() === story._id.toString());\n      const userInfo = userMap[story.userId.toString()] || {};\n\n      return {\n        id: story._id,\n        userId: story.userId,\n        username: story.username,\n        profileImage: userInfo.profileImage,\n        content: story.content,\n        mediaType: story.mediaType,\n        backgroundColor: story.backgroundColor,\n        image: story.image,\n        createdAt: story.createdAt,\n        expiresAt: story.expiresAt,\n        viewCount: views.length,\n        viewers: views.map(v => ({\n          username: v.viewerUsername,\n          viewedAt: v.viewedAt,\n        })),\n        isOwnStory: story.userId.toString() === req.user.id.toString(),\n      };\n    }));\n\n    const groupedStories = {};\n    storiesWithViews.forEach(story => {\n      const userId = story.userId.toString();\n      if (!groupedStories[userId]) {\n        groupedStories[userId] = [];\n      }\n      groupedStories[userId].push(story);\n    });\n\n    res.json(groupedStories);\n  } catch (error) {\n    console.error('Get stories error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.post('/:storyId/view', authenticateToken, async (req, res) => {\n  try {\n    const { storyId } = req.params;\n\n    const story = await Story.findById(storyId);\n    if (!story) {\n      return res.status(404).json({ error: 'Story not found' });\n    }\n\n    if (story.userId.toString() === req.user.id.toString()) {\n      return res.json({ message: 'Cannot view own story' });\n    }\n\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    const existingView = await StoryView.findOne({\n      storyId,\n      viewerId: req.user.id,\n    });\n\n    if (existingView) {\n      return res.json({ message: 'Already viewed' });\n    }\n\n    const view = new StoryView({\n      storyId,\n      viewerId: req.user.id,\n      viewerUsername: user.username,\n    });\n\n    await view.save();\n\n    res.json({ message: 'Story viewed' });\n  } catch (error) {\n    console.error('Mark story viewed error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nrouter.get('/:storyId/viewers', authenticateToken, async (req, res) => {\n  try {\n    const { storyId } = req.params;\n\n    const story = await Story.findById(storyId);\n    if (!story) {\n      return res.status(404).json({ error: 'Story not found' });\n    }\n\n    if (story.userId.toString() !== req.user.id.toString()) {\n      return res.status(403).json({ error: 'Not authorized to view story viewers' });\n    }\n\n    const views = await StoryView.find({ storyId }).sort({ viewedAt: -1 });\n\n    const viewers = await Promise.all(views.map(async (view) => {\n      const user = await User.findById(view.viewerId);\n      return {\n        id: view.viewerId,\n        username: view.viewerUsername,\n        profileImage: user?.profileImage || '',\n        viewedAt: view.viewedAt,\n      };\n    }));\n\n    res.json(viewers);\n  } catch (error) {\n    console.error('Get story viewers error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nexport default router;\n","size_bytes":5998},"client/src/components/BlockchainStatus.tsx":{"content":"import { Shield, Check, Loader2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BlockchainStatusProps {\n  blockCount: number;\n  isValidating?: boolean;\n  isValid?: boolean;\n  className?: string;\n}\n\nexport default function BlockchainStatus({\n  blockCount,\n  isValidating = false,\n  isValid = true,\n  className,\n}: BlockchainStatusProps) {\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)} data-testid=\"blockchain-status\">\n      <Badge variant=\"outline\" className=\"font-mono text-xs gap-1.5 bg-card/50 backdrop-blur-xl\">\n        {isValidating ? (\n          <Loader2 className=\"h-3 w-3 animate-spin\" />\n        ) : isValid ? (\n          <Shield className=\"h-3 w-3 text-primary\" />\n        ) : (\n          <Shield className=\"h-3 w-3 text-destructive\" />\n        )}\n        <span>Block #{blockCount}</span>\n        {isValid && !isValidating && (\n          <Check className=\"h-3 w-3 text-primary\" data-testid=\"status-validated\" />\n        )}\n      </Badge>\n    </div>\n  );\n}\n","size_bytes":1059},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/models/ChatKeyPair.js":{"content":"import mongoose from 'mongoose';\nimport { encryptField, decryptField } from '../lib/encryption.js';\n\nconst chatKeyPairSchema = new mongoose.Schema({\n  chatRoomId: {\n    type: String,\n    required: true,\n    unique: true,\n    index: true,\n  },\n  publicKey: {\n    type: String,\n    required: true,\n    get: decryptField,\n    set: encryptField,\n  },\n  privateKey: {\n    type: String,\n    required: true,\n    get: decryptField,\n    set: encryptField,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  toJSON: { getters: true },\n  toObject: { getters: true },\n  timestamps: true,\n});\n\nconst ChatKeyPair = mongoose.model('ChatKeyPair', chatKeyPairSchema);\n\nexport default ChatKeyPair;\n","size_bytes":700},"client/src/App.tsx":{"content":"import { Route, Switch, useLocation, Redirect } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport LandingPage from \"@/pages/LandingPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [location, setLocation] = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    \n    if (token && user) {\n      setIsAuthenticated(true);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      const shouldBeAuthenticated = !!(token && user);\n      \n      if (shouldBeAuthenticated !== isAuthenticated) {\n        console.log('🔄 Authentication status changed:', shouldBeAuthenticated);\n        setIsAuthenticated(shouldBeAuthenticated);\n        \n        if (shouldBeAuthenticated) {\n          console.log('✅ User logged in - clearing old cache');\n          queryClient.clear();\n        }\n      }\n    };\n\n    window.addEventListener('storage', checkAuthStatus);\n    const interval = setInterval(checkAuthStatus, 500);\n\n    return () => {\n      window.removeEventListener('storage', checkAuthStatus);\n      clearInterval(interval);\n    };\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    const handleIPNotAuthorized = (event: any) => {\n      const message = event.detail?.message || 'Your IP address has changed. Please log in again.';\n      toast({\n        title: \"Authentication Required\",\n        description: message,\n        variant: \"destructive\",\n      });\n      handleLogout();\n    };\n\n    window.addEventListener('ip-not-authorized', handleIPNotAuthorized);\n    return () => window.removeEventListener('ip-not-authorized', handleIPNotAuthorized);\n  }, []);\n\n  const handleAuthenticated = () => {\n    setIsAuthenticated(true);\n    setLocation(\"/home\");\n  };\n\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n    \n    console.log('🧹 Clearing all application state on logout...');\n    queryClient.clear();\n    console.log('✅ React Query cache cleared');\n    \n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('privateKey');\n    setIsAuthenticated(false);\n    setLocation(\"/\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const currentUser = localStorage.getItem('user');\n  const userId = currentUser ? JSON.parse(currentUser).id : null;\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {isAuthenticated ? (\n          <Redirect to=\"/home\" />\n        ) : (\n          <LandingPage />\n        )}\n      </Route>\n\n      <Route path=\"/home\">\n        {isAuthenticated ? (\n          <Home key={userId} onLogout={handleLogout} />\n        ) : (\n          <Redirect to=\"/\" />\n        )}\n      </Route>\n\n      <Route path=\"/auth\">\n        {isAuthenticated ? (\n          <Redirect to=\"/home\" />\n        ) : (\n          <Login onAuthenticated={handleAuthenticated} />\n        )}\n      </Route>\n      \n      <Route path=\"/login\">\n        {isAuthenticated ? (\n          <Redirect to=\"/home\" />\n        ) : (\n          <Login onAuthenticated={handleAuthenticated} />\n        )}\n      </Route>\n      \n      <Route path=\"/register\">\n        {isAuthenticated ? (\n          <Redirect to=\"/home\" />\n        ) : (\n          <Register onAuthenticated={handleAuthenticated} />\n        )}\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4902},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ChatInput.tsx":{"content":"import { useState } from \"react\";\nimport { Send, Paperclip } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport AttachmentMenu from \"./AttachmentMenu\";\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  onSendFile?: (file: File, type: 'document' | 'image' | 'video' | 'audio') => void;\n  onSendLocation?: (location: { latitude: number; longitude: number }) => void;\n  onSendContact?: (contact: { name: string; phone: string; email?: string }) => void;\n  onSendPoll?: (poll: { question: string; options: string[] }) => void;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport default function ChatInput({\n  onSendMessage,\n  onSendFile,\n  onSendLocation,\n  onSendContact,\n  onSendPoll,\n  disabled = false,\n  className,\n}: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const [showAttachmentMenu, setShowAttachmentMenu] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim() && !disabled) {\n      onSendMessage(message.trim());\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <>\n      {showAttachmentMenu && (\n        <AttachmentMenu\n          onClose={() => setShowAttachmentMenu(false)}\n          onSendFile={(file, type) => {\n            onSendFile?.(file, type);\n            setShowAttachmentMenu(false);\n          }}\n          onSendLocation={(location) => {\n            onSendLocation?.(location);\n            setShowAttachmentMenu(false);\n          }}\n          onSendContact={(contact) => {\n            onSendContact?.(contact);\n            setShowAttachmentMenu(false);\n          }}\n          onSendPoll={(poll) => {\n            onSendPoll?.(poll);\n            setShowAttachmentMenu(false);\n          }}\n        />\n      )}\n      <form\n        onSubmit={handleSubmit}\n        className={cn(\n          \"flex items-center gap-2 p-4 border-t border-border bg-card/50 backdrop-blur-xl\",\n          className\n        )}\n        data-testid=\"form-chat-input\"\n      >\n        <Button\n          type=\"button\"\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={() => setShowAttachmentMenu(!showAttachmentMenu)}\n          data-testid=\"button-attach\"\n        >\n          <Paperclip className=\"h-5 w-5\" />\n        </Button>\n        <input\n          type=\"text\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Type a message...\"\n          disabled={disabled}\n          className=\"flex-1 bg-background border border-input rounded-full px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary/50 disabled:opacity-50\"\n          data-testid=\"input-message\"\n        />\n        <Button\n          type=\"submit\"\n          size=\"icon\"\n          disabled={!message.trim() || disabled}\n          className=\"rounded-full hover-elevate active-elevate-2\"\n          data-testid=\"button-send\"\n        >\n          <Send className=\"h-5 w-5\" />\n        </Button>\n      </form>\n    </>\n  );\n}\n","size_bytes":3016},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/register.tsx":{"content":"import { Link } from \"wouter\";\nimport AuthLayout from \"@/components/AuthLayout\";\nimport RegistrationForm from \"@/components/RegistrationForm\";\n\ninterface RegisterProps {\n  onAuthenticated: (token: string, user: any) => void;\n}\n\nexport default function Register({ onAuthenticated }: RegisterProps) {\n  return (\n    <AuthLayout \n      title=\"Create Account\" \n      description=\"Join LockBlip for secure blockchain-powered messaging\"\n    >\n      <RegistrationForm onSuccess={onAuthenticated} />\n      \n      <div className=\"mt-4 text-center text-sm\">\n        <span className=\"text-muted-foreground\">Already have an account? </span>\n        <Link href=\"/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n          Sign in\n        </Link>\n      </div>\n    </AuthLayout>\n  );\n}\n","size_bytes":808},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"GOOGLE_OAUTH_SETUP.md":{"content":"# Google OAuth Setup for LockBlip on Replit\n\n## Setup Instructions\n\n### Step 1: Get Google OAuth Credentials\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Select or create a project\n3. Navigate to **APIs & Services** → **Credentials**\n4. Click **Create Credentials** → **OAuth 2.0 Client ID**\n5. Configure the OAuth consent screen if prompted\n6. Choose **Web application** as the application type\n7. Add authorized JavaScript origins and redirect URIs (see Step 2 below)\n8. Copy the **Client ID** and **Client Secret**\n\n### Step 2: Add Credentials to Replit Secrets\n\nFor security, Google OAuth credentials should be stored in Replit Secrets, not in files:\n\n1. Click the lock icon (🔒) in the left sidebar of Replit\n2. Add these secrets with your actual values from Google Cloud:\n   - `GOOGLE_CLIENT_ID` = `your-client-id-from-google-cloud.apps.googleusercontent.com`\n   - `GOOGLE_CLIENT_SECRET` = `your-client-secret-from-google-cloud`\n   - `VITE_GOOGLE_CLIENT_ID` = `your-client-id-from-google-cloud.apps.googleusercontent.com`\n\n**⚠️ Important:** Never commit these credentials to version control!\n\n### Step 3: Configure Authorized Origins\n\nTo allow Google OAuth to work on Replit, you need to add your Replit domain to Google's authorized origins:\n\n1. **Find Your Replit Domain**\n   - Check the webview URL or run this command in the Replit shell:\n     ```bash\n     echo $REPLIT_DEV_DOMAIN\n     ```\n   - It will look like: `https://[your-repl-id].replit.dev`\n\n2. **Go to Google Cloud Console**\n   - Visit: https://console.cloud.google.com/\n   - Navigate to **APIs & Services** → **Credentials**\n\n3. **Edit Your OAuth 2.0 Client ID**\n   - Click the edit icon on your OAuth 2.0 Client ID\n\n4. **Add Authorized JavaScript Origins**\n   - Add your Replit domain:\n     ```\n     https://[your-replit-domain].replit.dev\n     ```\n\n5. **Add Authorized Redirect URIs (optional)**\n   - Add the same domain if needed:\n     ```\n     https://[your-replit-domain].replit.dev\n     ```\n\n6. **Save Changes**\n   - Click \"Save\" at the bottom\n   - Wait a few minutes for changes to propagate\n\n7. **Restart the Workflow**\n   - In Replit, restart the dev-server workflow\n   - The Google OAuth should now work!\n\n## Note\nIf you deploy this app or the Replit URL changes, you'll need to add the new URL to the authorized origins list.\n","size_bytes":2346},"client/src/pages/LandingPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Shield, Lock, Users, MessageSquare, Smartphone, Globe } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport lockblipLogo from \"@assets/Untitled design_1761899121550.png\";\nimport heroImage from '@assets/stock_images/happy_friends_messag_b27a8923.jpg';\nimport secureImage from '@assets/stock_images/person_using_smartph_2cd70d09.jpg';\nimport groupImage from '@assets/stock_images/group_of_people_vide_d23795e5.jpg';\nimport encryptedImage from '@assets/stock_images/smartphone_showing_e_411752b7.jpg';\n\nexport default function LandingPage() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-md border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center gap-3\">\n              <img src={lockblipLogo} alt=\"LockBlip\" className=\"h-10 w-10 object-contain rounded-lg shadow-md\" />\n              <span className=\"text-2xl font-bold\">LockBlip</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <ThemeToggle />\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation('/auth')}\n                data-testid=\"button-login-nav\"\n              >\n                Log in\n              </Button>\n              <Button \n                onClick={() => setLocation('/auth')}\n                className=\"bg-swapgreen hover:bg-swapgreen/90\"\n                data-testid=\"button-signup-nav\"\n              >\n                Sign up\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-6\">\n              <h1 className=\"text-5xl md:text-6xl font-bold leading-tight\">\n                Message <span className=\"text-swapgreen\">privately</span> with blockchain security\n              </h1>\n              <p className=\"text-xl text-muted-foreground\">\n                End-to-end encrypted messaging powered by blockchain technology. \n                Your conversations, protected by cryptography.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  size=\"lg\" \n                  onClick={() => setLocation('/auth')}\n                  className=\"bg-swapgreen hover:bg-swapgreen/90 text-lg px-8 py-6\"\n                  data-testid=\"button-get-started\"\n                >\n                  Get Started\n                </Button>\n                <Button \n                  size=\"lg\" \n                  variant=\"outline\"\n                  className=\"text-lg px-8 py-6\"\n                  data-testid=\"button-learn-more\"\n                >\n                  Learn More\n                </Button>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-swapgreen/20 rounded-3xl blur-3xl\"></div>\n              <img \n                src={heroImage} \n                alt=\"People messaging\" \n                className=\"relative rounded-3xl shadow-2xl w-full h-auto object-cover\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section 1 - Secure Messaging */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-midnight-light/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div className=\"relative order-2 md:order-1\">\n              <img \n                src={secureImage} \n                alt=\"Secure messaging\" \n                className=\"rounded-3xl shadow-2xl w-full h-auto object-cover\"\n              />\n            </div>\n            <div className=\"space-y-6 order-1 md:order-2\">\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-swapgreen/10 text-swapgreen\">\n                <Lock className=\"h-5 w-5\" />\n                <span className=\"font-semibold\">Encrypted by Default</span>\n              </div>\n              <h2 className=\"text-4xl md:text-5xl font-bold\">\n                Chat and call on a larger screen\n              </h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Send and receive messages with military-grade encryption. \n                Your private conversations stay private with blockchain-verified security.\n              </p>\n              <Button \n                variant=\"outline\" \n                className=\"gap-2\"\n                data-testid=\"button-download-app\"\n              >\n                <Smartphone className=\"h-5 w-5\" />\n                Download the app\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section 2 - Group Chats */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-6\">\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-swapgreen/10 text-swapgreen\">\n                <Users className=\"h-5 w-5\" />\n                <span className=\"font-semibold\">Group Messaging</span>\n              </div>\n              <h2 className=\"text-4xl md:text-5xl font-bold\">\n                Never miss a moment with voice and video\n              </h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Connect with friends, family, and communities in secure group chats. \n                Share moments knowing every message is protected by blockchain verification.\n              </p>\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-5 w-5 rounded-full bg-swapgreen/20 flex items-center justify-center flex-shrink-0\">\n                    <div className=\"h-2 w-2 rounded-full bg-swapgreen\"></div>\n                  </div>\n                  <span className=\"text-muted-foreground\">Unlimited group size</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-5 w-5 rounded-full bg-swapgreen/20 flex items-center justify-center flex-shrink-0\">\n                    <div className=\"h-2 w-2 rounded-full bg-swapgreen\"></div>\n                  </div>\n                  <span className=\"text-muted-foreground\">End-to-end encrypted group calls</span>\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <div className=\"mt-1 h-5 w-5 rounded-full bg-swapgreen/20 flex items-center justify-center flex-shrink-0\">\n                    <div className=\"h-2 w-2 rounded-full bg-swapgreen\"></div>\n                  </div>\n                  <span className=\"text-muted-foreground\">Admin controls and permissions</span>\n                </li>\n              </ul>\n            </div>\n            <div className=\"relative\">\n              <img \n                src={groupImage} \n                alt=\"Group video call\" \n                className=\"rounded-3xl shadow-2xl w-full h-auto object-cover\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section 3 - Blockchain Security */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-midnight/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div className=\"relative order-2 md:order-1\">\n              <div className=\"absolute inset-0 bg-swapgreen/10 rounded-3xl blur-3xl\"></div>\n              <img \n                src={encryptedImage} \n                alt=\"Encrypted messages\" \n                className=\"relative rounded-3xl shadow-2xl w-full h-auto object-cover\"\n              />\n            </div>\n            <div className=\"space-y-6 order-1 md:order-2\">\n              <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-swapgreen/10 text-swapgreen\">\n                <Shield className=\"h-5 w-5\" />\n                <span className=\"font-semibold\">Blockchain Powered</span>\n              </div>\n              <h2 className=\"text-4xl md:text-5xl font-bold\">\n                Speak freely with verified security\n              </h2>\n              <p className=\"text-lg text-muted-foreground\">\n                Every message is recorded on an immutable blockchain ledger. \n                Verify message authenticity and ensure no one can tamper with your conversations.\n              </p>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-4 rounded-xl bg-card border border-border\">\n                  <MessageSquare className=\"h-8 w-8 text-swapgreen mb-2\" />\n                  <div className=\"font-semibold\">Zero Knowledge</div>\n                  <div className=\"text-sm text-muted-foreground\">Complete privacy</div>\n                </div>\n                <div className=\"p-4 rounded-xl bg-card border border-border\">\n                  <Globe className=\"h-8 w-8 text-swapgreen mb-2\" />\n                  <div className=\"font-semibold\">Decentralized</div>\n                  <div className=\"text-sm text-muted-foreground\">No central server</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center space-y-8\">\n          <h2 className=\"text-4xl md:text-5xl font-bold\">\n            Keep in touch with your groups\n          </h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Join millions of users who trust LockBlip for secure, blockchain-verified messaging.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => setLocation('/auth')}\n            className=\"bg-swapgreen hover:bg-swapgreen/90 text-lg px-12 py-6\"\n            data-testid=\"button-get-started-cta\"\n          >\n            Get Started Free\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-midnight py-12 px-4 sm:px-6 lg:px-8 border-t border-border\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 mb-8\">\n            <div>\n              <h3 className=\"font-semibold mb-4\">Product</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground\">Features</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Security</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Download</a></li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Blog</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Careers</a></li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Support</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Privacy</a></li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Legal</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground\">Terms</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground\">Cookie Policy</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"pt-8 border-t border-border flex flex-col md:flex-row justify-between items-center gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <img src={lockblipLogo} alt=\"LockBlip\" className=\"h-8 w-8 object-contain rounded-lg\" />\n              <span className=\"text-sm text-muted-foreground\">© 2025 LockBlip. All rights reserved.</span>\n            </div>\n            <div className=\"flex gap-4 text-sm text-muted-foreground\">\n              <a href=\"#\" className=\"hover:text-foreground\">Twitter</a>\n              <a href=\"#\" className=\"hover:text-foreground\">GitHub</a>\n              <a href=\"#\" className=\"hover:text-foreground\">Discord</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13312},"replit.md":{"content":"# LockBlip - Blockchain Messaging Platform\n\n## Overview\n\nLockBlip is a secure messaging application that leverages blockchain technology to create an immutable, verifiable message ledger. Every message sent through the platform becomes a block in a cryptographic chain, ensuring message integrity and providing end-to-end encryption. The platform combines traditional secure messaging features with blockchain-based verification, offering users a unique trust model where message history is cryptographically provable.\n\nThe application uses MongoDB for data persistence, Socket.IO for real-time bidirectional communication, and implements both blockchain-based message integrity and end-to-end encryption using NaCl (TweetNaCl).\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- TanStack Query (React Query) for server state management and caching\n- Wouter for lightweight client-side routing\n- Tailwind CSS with shadcn/ui components for consistent design system\n\n**Design System:**\n- Dark-mode first approach with blockchain-themed aesthetics\n- Custom color palette emphasizing trust and security (Swapgreen primary, Coral secondary)\n- Inter font for UI/body text, JetBrains Mono for technical/blockchain data\n- Component library from shadcn/ui (Radix UI primitives)\n\n**State Management Pattern:**\n- React Query for server state with aggressive caching strategies\n- Local state with React hooks for UI-specific state\n- LocalStorage for authentication tokens and user data persistence\n- Real-time updates via Socket.IO event listeners\n\n**Key Frontend Features:**\n- Real-time messaging with Socket.IO client\n- Blockchain ledger visualization\n- Stories feature (24-hour ephemeral content)\n- Friend/connection management system\n- Profile management with image uploads\n- Multi-media message support (images, videos, audio, documents, location, contacts, polls)\n\n### Backend Architecture\n\n**Technology Stack:**\n- Node.js with Express framework\n- TypeScript for type safety (though some legacy .js files exist)\n- MongoDB with Mongoose ODM for data modeling\n- Socket.IO for WebSocket-based real-time communication\n- JWT for authentication with cookie-based session management\n\n**Authentication & Security:**\n- Multi-factor authentication with email OTP verification\n- IP-based authorization system requiring email confirmation for new IPs\n- Google OAuth integration as alternative authentication method\n- Password hashing with bcrypt\n- Field-level encryption using AES (CryptoJS) for sensitive data\n- JWT tokens stored in HTTP-only cookies\n\n**Blockchain Implementation:**\n- Custom blockchain implementation for message verification\n- Each message creates a new block with SHA-256 hashing\n- Blocks contain: index, timestamp, sender, receiver, encrypted payload, previous hash, current hash\n- Genesis block initialization on first application start\n- Chain validation ensures message integrity\n\n**Encryption Strategy:**\n- **Field-level encryption**: Sensitive user data (email, phone, username, etc.) encrypted at rest using AES\n- **Chat encryption**: Per-chat-room key pairs using NaCl (Curve25519) for end-to-end encryption\n- **Message encryption**: Messages encrypted with chat-specific keys before blockchain insertion\n- **Key management**: Chat key pairs stored encrypted in database, decrypted server-side when needed\n\n**Real-time Communication:**\n- Socket.IO for bidirectional event-based communication\n- Authenticated socket connections with JWT verification\n- Real-time message delivery with delivery/read receipts\n- Online/offline status tracking\n- Typing indicators support\n\n**API Structure:**\n- RESTful endpoints under `/api` prefix\n- Rate limiting (100 requests per 15 minutes)\n- CORS configuration for cross-origin requests\n- Proxy-aware IP handling for proper client identification\n\n**Routes:**\n- `/api/auth` - Authentication (login, register, OTP, IP authorization, Google OAuth)\n- `/api/users` - User management (profile, contacts, search)\n- `/api/blockchain` - Blockchain operations (ledger retrieval, validation)\n- `/api/stories` - Stories CRUD operations\n- `/api/connections` - Friend requests and connection management\n- `/api/chats` - Message retrieval and chat operations\n- `/api/uploads` - File upload handling\n\n### Database Design\n\n**MongoDB Collections:**\n- **users**: User profiles with encrypted PII, public/private keys, authorized IPs\n- **blocks**: Blockchain ledger with encrypted message payloads\n- **chats**: Message history with chat-room-based encryption\n- **chatkeypairs**: Encryption key pairs per chat room\n- **connections**: Friend/connection relationships with status tracking\n- **otps**: Temporary OTP codes for email verification\n- **ipauthorizations**: Pending IP authorization requests\n- **stories**: 24-hour ephemeral content with TTL indexes\n- **storyviews**: Story view tracking with viewer information\n\n**Data Encryption Pattern:**\n- Mongoose getter/setter functions for automatic field encryption/decryption\n- Master encryption key from environment variable\n- Encrypted fields transparent to application logic layer\n\n**Indexing Strategy:**\n- Unique indexes on critical fields (username, block hash, chat room ID)\n- Compound indexes for query optimization (sender/receiver pairs)\n- TTL indexes for automatic document expiration (OTPs, stories)\n\n## External Dependencies\n\n### Third-Party Services\n\n**Google OAuth:**\n- OAuth 2.0 authentication integration\n- Client ID and secret stored in Replit Secrets\n- Authorized domains must be configured in Google Cloud Console\n- Used for social login alternative to traditional email/password\n\n**Email Service:**\n- Nodemailer for transactional emails\n- Supports both SMTP and Gmail service configurations\n- OTP delivery for email verification\n- IP authorization confirmation emails\n- Graceful fallback in development when SMTP not configured\n\n### Database\n\n**MongoDB:**\n- Primary data store using Mongoose ODM\n- Connection via `MONGODB_URI` environment variable\n- Currently not using PostgreSQL despite Drizzle config presence\n- Collections manually created via migration scripts\n\n### Key NPM Packages\n\n**Security & Cryptography:**\n- `bcryptjs` - Password hashing\n- `tweetnacl` / `tweetnacl-util` - End-to-end encryption (NaCl)\n- `crypto-js` - Field-level AES encryption\n- `jsonwebtoken` - JWT token generation/validation\n- `helmet` - HTTP security headers\n\n**Backend Framework:**\n- `express` - Web framework\n- `socket.io` - WebSocket server\n- `mongoose` - MongoDB ODM\n- `multer` - File upload handling\n- `express-rate-limit` - API rate limiting\n- `cookie-parser` - Cookie handling\n- `cors` - CORS middleware\n\n**Frontend Libraries:**\n- `@tanstack/react-query` - Server state management\n- `wouter` - Routing\n- `socket.io-client` - WebSocket client\n- `@react-oauth/google` - Google OAuth components\n- `@radix-ui/*` - UI primitives (via shadcn/ui)\n- `date-fns` - Date formatting\n\n**Development Tools:**\n- `vite` - Build tool and dev server\n- `typescript` - Type checking\n- `tsx` - TypeScript execution\n- `tailwindcss` - Utility-first CSS\n- `drizzle-kit` - Database migration tool (configured but not actively used)\n\n### Environment Variables Required\n\n**Essential:**\n- `MONGODB_URI` - MongoDB connection string\n- `JWT_SECRET` - Secret for JWT signing\n- `ENCRYPTION_MASTER_KEY` - Master key for field encryption (min 32 chars)\n\n**OAuth:**\n- `GOOGLE_CLIENT_ID` - Google OAuth client ID\n- `GOOGLE_CLIENT_SECRET` - Google OAuth secret\n- `VITE_GOOGLE_CLIENT_ID` - Client-side Google client ID\n\n**Email (Optional):**\n- `SMTP_HOST`, `SMTP_PORT`, `SMTP_USER`, `SMTP_PASS` - SMTP configuration\n- OR `EMAIL_SERVICE`, `EMAIL_USER`, `EMAIL_PASSWORD` - Gmail configuration\n\n**Deployment:**\n- `REPLIT_DEV_DOMAIN` - Replit deployment domain (auto-set on Replit)\n- `DATABASE_URL` - PostgreSQL URL (Drizzle config, not currently used)","size_bytes":8006},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>('dark');\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  const loadThemeFromLocalStorage = () => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        const userTheme = user.themePreference || 'dark';\n        setThemeState(userTheme);\n        document.documentElement.classList.toggle('dark', userTheme === 'dark');\n        console.log(`🎨 Loaded theme preference: ${userTheme} for user ${user.username}`);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadThemeFromLocalStorage();\n    setIsInitialized(true);\n  }, []);\n\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'user' || e.key === null) {\n        console.log('🔄 User data changed in localStorage, reloading theme...');\n        loadThemeFromLocalStorage();\n      }\n    };\n\n    const handleUserChange = () => {\n      loadThemeFromLocalStorage();\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('user-logged-in', handleUserChange);\n\n    const interval = setInterval(() => {\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const user = JSON.parse(storedUser);\n          const userTheme = user.themePreference || 'dark';\n          if (userTheme !== theme) {\n            console.log('🔄 Theme preference mismatch detected, syncing...');\n            loadThemeFromLocalStorage();\n          }\n        } catch (error) {\n          // Ignore parsing errors\n        }\n      }\n    }, 500);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('user-logged-in', handleUserChange);\n      clearInterval(interval);\n    };\n  }, [theme]);\n\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    \n    root.style.transition = 'background-color 0.3s ease, color 0.3s ease';\n  }, [theme, isInitialized]);\n\n  const setTheme = async (newTheme: Theme) => {\n    setThemeState(newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        user.themePreference = newTheme;\n        localStorage.setItem('user', JSON.stringify(user));\n\n        await apiRequest('PUT', '/api/users/theme', { theme: newTheme });\n        console.log(`✅ Theme updated to ${newTheme} for user and saved to backend`);\n      } catch (error) {\n        console.error('Failed to save theme preference:', error);\n      }\n    }\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":3749}},"version":2}